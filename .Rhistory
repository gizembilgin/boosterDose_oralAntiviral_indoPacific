mutate(
rolling_average = case_when(
date > fit_cutoff_dates[1] ~ rolling_average * under_reporting_est,
date <= fit_cutoff_dates[1] ~ rolling_average * first_wave_fit$par[2])) %>%
rename(adjusted_reported = rolling_average) %>%
left_join(incidence_log, by = "date") %>%
mutate(fit_statistic = abs(rolling_average - adjusted_reported)^2 ,
beta_mod = this_beta_mod,
shift = this_shift,
omicron_truncation = TOGGLE_omicron_truncation_factor)
fit_statistic = data.frame(fit = sum(workshop$fit_statistic, #fit only after first wave
na.rm=TRUE),
beta_mod = this_beta_mod,
shift = this_shift,
omicron_truncation = TOGGLE_omicron_truncation_factor)
incidence_log = incidence_log %>%
mutate(beta_mod = this_beta_mod, shift = this_shift,
omicron_truncation = TOGGLE_omicron_truncation_factor)
plot_tracker = rbind(plot_tracker,workshop)
fit_tracker = rbind(fit_tracker,fit_statistic)
workshop_incidence_log_tracker = rbind(workshop_incidence_log_tracker,incidence_log)
}
}
}
}
plot_tracker
plot_tracker = rbind(plot_tracker,workshop)
fit_tracker = rbind(fit_tracker,fit_statistic)
fit_tracker = fit_tracker %>% mutate(omicron_truncation = 1)
workshop_incidence_log_tracker = workshop_incidence_log_tracker %>% mutate(omicron_truncation = 1)
fit_tracker = rbind(fit_tracker,fit_statistic)
workshop_incidence_log_tracker = rbind(workshop_incidence_log_tracker,incidence_log)
for (TOGGLE_omicron_truncation_factor in c(1,0.9)){
for (this_shift in c(0, 7, -7, 14, -14, 21, -21)){ #7
for (this_beta_mod in  c(1,0.95,1.05,0.9,1.1,1.15)) { #6
if(nrow(plot_tracker[plot_tracker$shift == this_shift &
plot_tracker$beta_mod == this_beta_mod &
plot_tracker$omicron_truncation == TOGGLE_omicron_truncation_factor,])>0){
#skip
} else{
strain_inital = strain_now = 'delta'
fitting_beta[2]= this_beta_mod
covid19_waves = baseline_covid19_waves
covid19_waves$date[1] = covid19_waves$date[1] + round(first_wave_fit$par[1])
covid19_waves$date[2] = covid19_waves$date[2] + this_shift
source(paste(getwd(),"/CommandDeck.R",sep=""))
workshop = case_history %>%
select(date,rolling_average) %>%
mutate(
rolling_average = case_when(
date > fit_cutoff_dates[1] ~ rolling_average * under_reporting_est,
date <= fit_cutoff_dates[1] ~ rolling_average * first_wave_fit$par[2])) %>%
rename(adjusted_reported = rolling_average) %>%
left_join(incidence_log, by = "date") %>%
mutate(fit_statistic = abs(rolling_average - adjusted_reported)^2 ,
beta_mod = this_beta_mod,
shift = this_shift,
omicron_truncation = TOGGLE_omicron_truncation_factor)
fit_statistic = data.frame(fit = sum(workshop$fit_statistic, #fit only after first wave
na.rm=TRUE),
beta_mod = this_beta_mod,
shift = this_shift,
omicron_truncation = TOGGLE_omicron_truncation_factor)
incidence_log = incidence_log %>%
mutate(beta_mod = this_beta_mod, shift = this_shift,
omicron_truncation = TOGGLE_omicron_truncation_factor)
plot_tracker = rbind(plot_tracker,workshop)
fit_tracker = rbind(fit_tracker,fit_statistic)
workshop_incidence_log_tracker = rbind(workshop_incidence_log_tracker,incidence_log)
}
}
}
}
for (TOGGLE_omicron_truncation_factor in c(1,0.9)){
for (this_shift in c(0, 7, -7, 14, -14, 21, -21)){ #7
for (this_beta_mod in  c(1,0.95,1.05,0.9,1.1,1.15)) { #6
if(nrow(plot_tracker[plot_tracker$shift == this_shift &
plot_tracker$beta_mod == this_beta_mod &
plot_tracker$omicron_truncation == TOGGLE_omicron_truncation_factor,])>0){
#skip
} else{
strain_inital = strain_now = 'delta'
fitting_beta[2]= this_beta_mod
covid19_waves = baseline_covid19_waves
covid19_waves$date[1] = covid19_waves$date[1] + round(first_wave_fit$par[1])
covid19_waves$date[2] = covid19_waves$date[2] + this_shift
source(paste(getwd(),"/CommandDeck.R",sep=""))
workshop = case_history %>%
select(date,rolling_average) %>%
mutate(
rolling_average = case_when(
date > fit_cutoff_dates[1] ~ rolling_average * under_reporting_est,
date <= fit_cutoff_dates[1] ~ rolling_average * first_wave_fit$par[2])) %>%
rename(adjusted_reported = rolling_average) %>%
left_join(incidence_log, by = "date") %>%
mutate(fit_statistic = abs(rolling_average - adjusted_reported)^2 ,
beta_mod = this_beta_mod,
shift = this_shift,
omicron_truncation = TOGGLE_omicron_truncation_factor)
fit_statistic = data.frame(fit = sum(workshop$fit_statistic, #fit only after first wave
na.rm=TRUE),
beta_mod = this_beta_mod,
shift = this_shift,
omicron_truncation = TOGGLE_omicron_truncation_factor)
incidence_log = incidence_log %>%
mutate(beta_mod = this_beta_mod, shift = this_shift,
omicron_truncation = TOGGLE_omicron_truncation_factor)
plot_tracker = rbind(plot_tracker,workshop)
fit_tracker = rbind(fit_tracker,fit_statistic)
workshop_incidence_log_tracker = rbind(workshop_incidence_log_tracker,incidence_log)
}
}
}
}
this_shift
this_beta_mod
beta_fit_tracker = fit_tracker; beta_fit_tracker[beta_fit_tracker$fit == min(beta_fit_tracker$fit),]
beta_tracker = plot_tracker %>%
filter(date<= max(plot_tracker$date[is.na(plot_tracker$rolling_average) == FALSE]) &
date>= min(plot_tracker$date[is.na(plot_tracker$rolling_average) == FALSE]) &
date > date_start &
shift %in% c(0, 7, -7, 14, -14) &
beta_mod %in% c(0.9, 0.95, 1, 1.05, 1.1, 1.15) %>%
omicron_truncation == 1
)
under_reporting_est = 90
ggplot() +
geom_line(data=beta_tracker,aes(x=date,y=rolling_average,color=as.factor(beta_mod)),na.rm=TRUE) +
geom_point(data=case_history[case_history$date<=max(beta_tracker$date) & case_history$date>min(beta_tracker$date),],aes(x=date,y=rolling_average*under_reporting_est)) +
plot_standard +
labs(color = 'beta modifier')+
facet_grid(shift ~ .)
beta_tracker = plot_tracker %>%
filter(date<= max(plot_tracker$date[is.na(plot_tracker$rolling_average) == FALSE]) &
date>= min(plot_tracker$date[is.na(plot_tracker$rolling_average) == FALSE]) &
date > date_start &
shift %in% c(0, 7, -7, 14, -14) &
beta_mod %in% c(0.9, 0.95, 1, 1.05, 1.1, 1.15) &
omicron_truncation == 1
)
under_reporting_est = 90
ggplot() +
geom_line(data=beta_tracker,aes(x=date,y=rolling_average,color=as.factor(beta_mod)),na.rm=TRUE) +
geom_point(data=case_history[case_history$date<=max(beta_tracker$date) & case_history$date>min(beta_tracker$date),],aes(x=date,y=rolling_average*under_reporting_est)) +
plot_standard +
labs(color = 'beta modifier')+
facet_grid(shift ~ .)
beta_tracker = plot_tracker %>%
filter(date<= max(plot_tracker$date[is.na(plot_tracker$rolling_average) == FALSE]) &
date>= min(plot_tracker$date[is.na(plot_tracker$rolling_average) == FALSE]) &
date > date_start &
shift %in% c(0, 7, -7, 14, -14) &
beta_mod %in% c(0.9, 0.95, 1, 1.05, 1.1, 1.15) &
omicron_truncation != 1
)
under_reporting_est = 90
ggplot() +
geom_line(data=beta_tracker,aes(x=date,y=rolling_average,color=as.factor(beta_mod)),na.rm=TRUE) +
geom_point(data=case_history[case_history$date<=max(beta_tracker$date) & case_history$date>min(beta_tracker$date),],aes(x=date,y=rolling_average*under_reporting_est)) +
plot_standard +
labs(color = 'beta modifier')+
facet_grid(shift ~ .)
beta_tracker = plot_tracker %>%
filter(date<= max(plot_tracker$date[is.na(plot_tracker$rolling_average) == FALSE]) &
date>= min(plot_tracker$date[is.na(plot_tracker$rolling_average) == FALSE]) &
date > date_start &
shift %in% c(0, 7, -7) &
beta_mod %in% c(0.9, 0.95, 1, 1.05, 1.1, 1.15) #&
#omicron_truncation != 1
)
under_reporting_est = 90
ggplot() +
geom_line(data=beta_tracker,aes(x=date,y=rolling_average,color=as.factor(beta_mod),linetype = as.factor(omicron_truncation)),na.rm=TRUE) +
geom_point(data=case_history[case_history$date<=max(beta_tracker$date) & case_history$date>min(beta_tracker$date),],aes(x=date,y=rolling_average*under_reporting_est)) +
plot_standard +
labs(color = 'beta modifier')+
facet_grid(shift ~ .)
#find range under reporting
find_underreporting = data.frame()
best_this_combo = data.frame()
for (this_shift in c(0, 7, -7, 14, -14, 21, -21)){ #7
for (this_beta_mod in  c(0.9, 0.95, 1, 1.05, 1.1, 1.15)) {
this_incidence_log = workshop_incidence_log_tracker %>%
filter(beta_mod == this_beta_mod & shift == this_shift)
for (this_underreporting in c(40:110)){
workshop = case_history %>%
select(date,rolling_average) %>%
mutate(
rolling_average = case_when(
date > fit_cutoff_dates[1] ~ rolling_average * this_underreporting,
date <= fit_cutoff_dates[1] ~ rolling_average * first_wave_fit$par[2])) %>%
rename(adjusted_reported = rolling_average) %>%
left_join(this_incidence_log, by = "date") %>%
mutate(fit_statistic = abs(rolling_average - adjusted_reported)^2 )
fit_statistic = data.frame(fit = sum(workshop$fit_statistic, #fit only after first wave
na.rm=TRUE),
beta_mod = this_beta_mod,
shift = this_shift,
under_reporting_est = this_underreporting)
find_underreporting = rbind(find_underreporting,fit_statistic)
}
workshop = find_underreporting %>%
filter(beta_mod == this_beta_mod & shift == this_shift)
workshop = workshop[workshop$fit == min(workshop$fit,na.rm=TRUE),]
best_this_combo = rbind(best_this_combo,workshop)
}
}
beta_tracker = plot_tracker %>%
filter(date<= max(plot_tracker$date[is.na(plot_tracker$rolling_average) == FALSE]) &
date>= min(plot_tracker$date[is.na(plot_tracker$rolling_average) == FALSE]) &
shift %in% c(7) &
beta_mod %in% c(1.05)
)
under_reporting_est = 79
ggplot() +
geom_line(data=beta_tracker,aes(x=date,y=rolling_average,color=as.factor(beta_mod)),na.rm=TRUE) +
geom_point(data=case_history[case_history$date<=max(beta_tracker$date) & case_history$date>min(beta_tracker$date),],aes(x=date,y=rolling_average*under_reporting_est)) +
plot_standard +
labs(color = 'beta modifier')+
facet_grid(shift ~ .)
View(best_this_combo)
#find range under reporting
find_underreporting = data.frame()
best_this_combo = data.frame()
for (TOGGLE_omicron_truncation_factor in c(1,0.9)){
for (this_shift in c(0, 7, -7, 14, -14, 21, -21)){ #7
for (this_beta_mod in  c(0.9, 0.95, 1, 1.05, 1.1, 1.15)) {
this_incidence_log = workshop_incidence_log_tracker %>%
filter(beta_mod == this_beta_mod & shift == this_shift)
for (this_underreporting in c(40:110)){
workshop = case_history %>%
select(date,rolling_average) %>%
mutate(
rolling_average = case_when(
date > fit_cutoff_dates[1] ~ rolling_average * this_underreporting,
date <= fit_cutoff_dates[1] ~ rolling_average * first_wave_fit$par[2])) %>%
rename(adjusted_reported = rolling_average) %>%
left_join(this_incidence_log, by = "date") %>%
mutate(fit_statistic = abs(rolling_average - adjusted_reported)^2 )
fit_statistic = data.frame(fit = sum(workshop$fit_statistic, #fit only after first wave
na.rm=TRUE),
beta_mod = this_beta_mod,
shift = this_shift,
under_reporting_est = this_underreporting)
find_underreporting = rbind(find_underreporting,fit_statistic)
}
workshop = find_underreporting %>%
filter(beta_mod == this_beta_mod & shift == this_shift)
workshop = workshop[workshop$fit == min(workshop$fit,na.rm=TRUE),]
best_this_combo = rbind(best_this_combo,workshop)
}
}
}
#find range under reporting
find_underreporting = data.frame()
best_this_combo = data.frame()
#find range under reporting
find_underreporting = data.frame()
best_this_combo = data.frame()
for (TOGGLE_omicron_truncation_factor in c(1,0.9)){
for (this_shift in c(0, 7, -7, 14, -14, 21, -21)){ #7
for (this_beta_mod in  c(0.9, 0.95, 1, 1.05, 1.1, 1.15)) {
this_incidence_log = workshop_incidence_log_tracker %>%
filter(beta_mod == this_beta_mod & shift == this_shift & omicron_truncation == TOGGLE_omicron_truncation_factor)
if (nrow(this_incidence_log)>0){
for (this_underreporting in c(40:110)){
workshop = case_history %>%
select(date,rolling_average) %>%
mutate(
rolling_average = case_when(
date > fit_cutoff_dates[1] ~ rolling_average * this_underreporting,
date <= fit_cutoff_dates[1] ~ rolling_average * first_wave_fit$par[2])) %>%
rename(adjusted_reported = rolling_average) %>%
left_join(this_incidence_log, by = "date") %>%
mutate(fit_statistic = abs(rolling_average - adjusted_reported)^2 )
fit_statistic = data.frame(fit = sum(workshop$fit_statistic, #fit only after first wave
na.rm=TRUE),
beta_mod = this_beta_mod,
shift = this_shift,
under_reporting_est = this_underreporting,
omicron_truncation = TOGGLE_omicron_truncation_factor)
find_underreporting = rbind(find_underreporting,fit_statistic)
}
workshop = find_underreporting %>%
filter(beta_mod == this_beta_mod & shift == this_shift & omicron_truncation == TOGGLE_omicron_truncation_factor)
workshop = workshop[workshop$fit == min(workshop$fit,na.rm=TRUE),]
best_this_combo = rbind(best_this_combo,workshop)
}
}
}
}
View(best_this_combo)
first_wave_fit
workshop = best_this_combo %>% filter(under_reporting_est > 75)
View(workshop)
setting
plot_tracker
#       (1/2) Setup
####################################################################
#load libraries
library(readr)
library(deSolve)
library(rvest)
library(ggplot2)
library(gridExtra)
library(ggpubr)
library(tidyverse)
View(best_this_combo)
this_setting
setting
baseline_covid19_waves
max(VE_real_range$date)
fit_cutoff_dates
fitting_beta
under_reporting_est
covid19_waves
baseline_covid19_waves
date_start
baseline_covid19_waves$date[2]-28-1
baseline_covid19_waves
baseline_covid19_waves$strain[1]
par = c(7,79,1.05)
#FIT SECOND WAVE (from start point) _______________________________
if (exists("fitting_beta")){rm(fitting_beta)}
if (exists("under_reporting_est")){rm(under_reporting_est)}
if (exists("covid19_waves")){rm(covid19_waves)}
#Load first wave
list_poss_Rdata = list.files(path="1_inputs/fit/",pattern = paste("first_wave_fit*",sep=""))
list_poss_Rdata_details = double()
for (i in 1:length(list_poss_Rdata)){
list_poss_Rdata_details = rbind(list_poss_Rdata_details,
file.info(paste("1_inputs/fit/",list_poss_Rdata[[i]],sep=''))$mtime)
}
latest_file = list_poss_Rdata[[which.max(list_poss_Rdata_details)]]
load(file = paste('1_inputs/fit/',latest_file,sep=''))
date_start = baseline_covid19_waves$date[2]-28-1
model_weeks = as.numeric((fit_cutoff_dates[2]-date_start)/7)
strain_inital = strain_now = baseline_covid19_waves$strain[1]
fitting_beta= c(first_wave_fit$par[3],par[3])
covid19_waves = baseline_covid19_waves
covid19_waves$date[1] = covid19_waves$date[1] + round(first_wave_fit$par[1])
covid19_waves$date[2] = covid19_waves$date[2] + round(par[1])
under_reporting_est = par[2]
source(paste(getwd(),"/CommandDeck.R",sep=""),local=TRUE)
workshop = case_history %>%
select(date,rolling_average) %>%
mutate(#under_reporting_est = coeff1 + coeff2*as.numeric(date - date_start), #linear
rolling_average = case_when(
date > fit_cutoff_dates[1] ~ rolling_average * under_reporting_est,
date <= fit_cutoff_dates[1] ~ rolling_average * first_wave_fit$par[2])) %>%
rename(adjusted_reported = rolling_average) %>%
left_join(incidence_log, by = "date") %>%
mutate(fit_statistic = abs(rolling_average - adjusted_reported)^2)
fit_statistic = sum(workshop$fit_statistic[workshop$date> fit_cutoff_dates[1]], #fit only after first wave
na.rm=TRUE)
to_plot = workshop %>% filter(date>date_start & date<=(date_start+model_weeks*7))
ggplot() +
geom_line(data=to_plot,aes(x=date,y=rolling_average),na.rm=TRUE) +
geom_point(data=to_plot,aes(x=date,y=adjusted_reported)) +
plot_standard
par
fitting
date_start
#FIT SECOND WAVE (from start point) _______________________________
if (exists("fitting_beta")){rm(fitting_beta)}
if (exists("under_reporting_est")){rm(under_reporting_est)}
if (exists("covid19_waves")){rm(covid19_waves)}
rm(par)
fit_daily_reported_2 <- function(par){
#Load first wave
list_poss_Rdata = list.files(path="1_inputs/fit/",pattern = paste("first_wave_fit*",sep=""))
list_poss_Rdata_details = double()
for (i in 1:length(list_poss_Rdata)){
list_poss_Rdata_details = rbind(list_poss_Rdata_details,
file.info(paste("1_inputs/fit/",list_poss_Rdata[[i]],sep=''))$mtime)
}
latest_file = list_poss_Rdata[[which.max(list_poss_Rdata_details)]]
load(file = paste('1_inputs/fit/',latest_file,sep=''))
fitting = "wave_two"
date_start = baseline_covid19_waves$date[2]-28-1
model_weeks = as.numeric((fit_cutoff_dates[2]-date_start)/7)
strain_inital = strain_now = baseline_covid19_waves$strain[1]
fitting_beta= c(first_wave_fit$par[3],par[3])
covid19_waves = baseline_covid19_waves
covid19_waves$date[1] = covid19_waves$date[1] + round(first_wave_fit$par[1])
covid19_waves$date[2] = covid19_waves$date[2] + round(par[1])
under_reporting_est = par[2]
source(paste(getwd(),"/CommandDeck.R",sep=""),local=TRUE)
workshop = case_history %>%
select(date,rolling_average) %>%
mutate(#under_reporting_est = coeff1 + coeff2*as.numeric(date - date_start), #linear
rolling_average = case_when(
date > fit_cutoff_dates[1] ~ rolling_average * under_reporting_est,
date <= fit_cutoff_dates[1] ~ rolling_average * first_wave_fit$par[2])) %>%
rename(adjusted_reported = rolling_average) %>%
left_join(incidence_log, by = "date") %>%
mutate(fit_statistic = abs(rolling_average - adjusted_reported)^2)
fit_statistic = sum(workshop$fit_statistic[workshop$date> fit_cutoff_dates[1]], #fit only after first wave
na.rm=TRUE)
return(fit_statistic)
}
fit_daily_reported_2
system.time({second_wave_fit = optim(c(7,79,1.05),
fit_daily_reported_2,
method = "Nelder-Mead")})
#Load first wave
list_poss_Rdata = list.files(path="1_inputs/fit/",pattern = paste("first_wave_fit",this_setting,"*",sep=""))
list_poss_Rdata_details = double()
for (i in 1:length(list_poss_Rdata)){
list_poss_Rdata_details = rbind(list_poss_Rdata_details,
file.info(paste("1_inputs/fit/",list_poss_Rdata[[i]],sep=''))$mtime)
}
latest_file = list_poss_Rdata[[which.max(list_poss_Rdata_details)]]
load(file = paste('1_inputs/fit/',latest_file,sep=''))
latest_file
#fitting second wave of Indonesia using the Nedler Mead algorithm
fit_daily_reported_2(7,79,1.05)
fit_daily_reported_2(c(7,79,1.05))
fit_daily_reported_2(c(7,79,1.05))
first_wave_fit
fit_daily_reported_2 <- function(par){
#Load first wave
list_poss_Rdata = list.files(path="1_inputs/fit/",pattern = paste("first_wave_fit",this_setting,"*",sep=""))
list_poss_Rdata_details = double()
for (i in 1:length(list_poss_Rdata)){
list_poss_Rdata_details = rbind(list_poss_Rdata_details,
file.info(paste("1_inputs/fit/",list_poss_Rdata[[i]],sep=''))$mtime)
}
latest_file = list_poss_Rdata[[which.max(list_poss_Rdata_details)]]
load(file = paste('1_inputs/fit/',latest_file,sep=''))
fitting = "wave_two"
date_start = baseline_covid19_waves$date[2]-28-1
model_weeks = as.numeric((fit_cutoff_dates[2]-date_start)/7)
strain_inital = strain_now = baseline_covid19_waves$strain[1]
fitting_beta= c(first_wave_fit$par[3],par[3])
covid19_waves = baseline_covid19_waves
covid19_waves$date[1] = covid19_waves$date[1] + round(first_wave_fit$par[1])
covid19_waves$date[2] = covid19_waves$date[2] + round(par[1])
under_reporting_est = par[2]
source(paste(getwd(),"/CommandDeck.R",sep=""),local=TRUE)
workshop = case_history %>%
select(date,rolling_average) %>%
mutate(#under_reporting_est = coeff1 + coeff2*as.numeric(date - date_start), #linear
rolling_average = case_when(
date > fit_cutoff_dates[1] ~ rolling_average * under_reporting_est,
date <= fit_cutoff_dates[1] ~ rolling_average * first_wave_fit$par[2])) %>%
rename(adjusted_reported = rolling_average) %>%
left_join(incidence_log, by = "date") %>%
mutate(fit_statistic = abs(rolling_average - adjusted_reported)^2)
fit_statistic = sum(workshop$fit_statistic[workshop$date> fit_cutoff_dates[1]], #fit only after first wave
na.rm=TRUE)
return(fit_statistic)
}
fit_daily_reported_2(c(7,79,1.05))
fit_daily_reported_2 <- function(par){
on.exit(.optim <<- list(par = par, obj = print(returnValue())))
#Load first wave
list_poss_Rdata = list.files(path="1_inputs/fit/",pattern = paste("first_wave_fit",this_setting,"*",sep=""))
list_poss_Rdata_details = double()
for (i in 1:length(list_poss_Rdata)){
list_poss_Rdata_details = rbind(list_poss_Rdata_details,
file.info(paste("1_inputs/fit/",list_poss_Rdata[[i]],sep=''))$mtime)
}
latest_file = list_poss_Rdata[[which.max(list_poss_Rdata_details)]]
load(file = paste('1_inputs/fit/',latest_file,sep=''))
fitting = "wave_two"
date_start = baseline_covid19_waves$date[2]-28-1
model_weeks = as.numeric((fit_cutoff_dates[2]-date_start)/7)
strain_inital = strain_now = baseline_covid19_waves$strain[1]
fitting_beta= c(first_wave_fit$par[3],par[3])
covid19_waves = baseline_covid19_waves
covid19_waves$date[1] = covid19_waves$date[1] + round(first_wave_fit$par[1])
covid19_waves$date[2] = covid19_waves$date[2] + round(par[1])
under_reporting_est = par[2]
source(paste(getwd(),"/CommandDeck.R",sep=""),local=TRUE)
workshop = case_history %>%
select(date,rolling_average) %>%
mutate(#under_reporting_est = coeff1 + coeff2*as.numeric(date - date_start), #linear
rolling_average = case_when(
date > fit_cutoff_dates[1] ~ rolling_average * under_reporting_est,
date <= fit_cutoff_dates[1] ~ rolling_average * first_wave_fit$par[2])) %>%
rename(adjusted_reported = rolling_average) %>%
left_join(incidence_log, by = "date") %>%
mutate(fit_statistic = abs(rolling_average - adjusted_reported)^2)
fit_statistic = sum(workshop$fit_statistic[workshop$date> fit_cutoff_dates[1]], #fit only after first wave
na.rm=TRUE)
return(fit_statistic)
}
.optim <- NULL
settting
setting
ggplot() +
geom_point(data=case_history,aes(x=date,y=rolling_average),na.rm=TRUE) +
xlab("") +
scale_x_date(date_breaks="6 month", date_labels="%b") +
ylab("daily cases") +
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
axis.line = element_line(color = 'black'))
library(ggplot2)
ggplot() +
geom_point(data=case_history,aes(x=date,y=rolling_average),na.rm=TRUE) +
xlab("") +
scale_x_date(date_breaks="6 month", date_labels="%b") +
ylab("daily cases") +
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
axis.line = element_line(color = 'black'))
