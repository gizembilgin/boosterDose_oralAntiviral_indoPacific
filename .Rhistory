rolling_average = case_when(
date > fit_cutoff_dates[1] ~ rolling_average * under_reporting_est,
date <= fit_cutoff_dates[1] ~ rolling_average * first_wave_fit$par[2])) %>%
rename(adjusted_reported = rolling_average) %>%
left_join(incidence_log, by = "date") %>%
mutate(fit_statistic = abs(rolling_average - adjusted_reported)^2)
fit_statistic = sum(workshop$fit_statistic[workshop$date> fit_cutoff_dates[1]], #fit only after first wave
na.rm=TRUE)
return(fit_statistic)
}
fit_daily_reported_2(c(7,79,1.05))
fit_daily_reported_2 <- function(par){
on.exit(.optim <<- list(par = par, obj = print(returnValue())))
#Load first wave
list_poss_Rdata = list.files(path="1_inputs/fit/",pattern = paste("first_wave_fit",this_setting,"*",sep=""))
list_poss_Rdata_details = double()
for (i in 1:length(list_poss_Rdata)){
list_poss_Rdata_details = rbind(list_poss_Rdata_details,
file.info(paste("1_inputs/fit/",list_poss_Rdata[[i]],sep=''))$mtime)
}
latest_file = list_poss_Rdata[[which.max(list_poss_Rdata_details)]]
load(file = paste('1_inputs/fit/',latest_file,sep=''))
fitting = "wave_two"
date_start = baseline_covid19_waves$date[2]-28-1
model_weeks = as.numeric((fit_cutoff_dates[2]-date_start)/7)
strain_inital = strain_now = baseline_covid19_waves$strain[1]
fitting_beta= c(first_wave_fit$par[3],par[3])
covid19_waves = baseline_covid19_waves
covid19_waves$date[1] = covid19_waves$date[1] + round(first_wave_fit$par[1])
covid19_waves$date[2] = covid19_waves$date[2] + round(par[1])
under_reporting_est = par[2]
source(paste(getwd(),"/CommandDeck.R",sep=""),local=TRUE)
workshop = case_history %>%
select(date,rolling_average) %>%
mutate(#under_reporting_est = coeff1 + coeff2*as.numeric(date - date_start), #linear
rolling_average = case_when(
date > fit_cutoff_dates[1] ~ rolling_average * under_reporting_est,
date <= fit_cutoff_dates[1] ~ rolling_average * first_wave_fit$par[2])) %>%
rename(adjusted_reported = rolling_average) %>%
left_join(incidence_log, by = "date") %>%
mutate(fit_statistic = abs(rolling_average - adjusted_reported)^2)
fit_statistic = sum(workshop$fit_statistic[workshop$date> fit_cutoff_dates[1]], #fit only after first wave
na.rm=TRUE)
return(fit_statistic)
}
<<<<<<< Updated upstream
.optim <- NULL
<<<<<<< Updated upstream
settting
setting
ggplot() +
geom_point(data=case_history,aes(x=date,y=rolling_average),na.rm=TRUE) +
xlab("") +
scale_x_date(date_breaks="6 month", date_labels="%b") +
ylab("daily cases") +
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
axis.line = element_line(color = 'black'))
library(ggplot2)
ggplot() +
geom_point(data=case_history,aes(x=date,y=rolling_average),na.rm=TRUE) +
xlab("") +
scale_x_date(date_breaks="6 month", date_labels="%b") +
ylab("daily cases") +
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
axis.line = element_line(color = 'black'))
=======
=======
ggarrange(plot_list[[1]],plot_list[[2]],
common.legend = TRUE,
legend="bottom",
ncol = 1,
nrow = length(LIST_outcomes))
#ggsave(paste(rootpath,"x_results/plot_VaxVsAntivirals_",time,".png",sep=''), width = 9.6, height = 5.7)
options(warn = 0)
#_______________________________________________________________________________
file.exists(paste("1_inputs/live_updates/NPI_estimates",this_setting,Sys.Date(),".Rdata",sep='')) == TRUE
this_setting
this_setting = "IDN"
file.exists(paste("1_inputs/live_updates/NPI_estimates",this_setting,Sys.Date(),".Rdata",sep='')) == TRUE
file.exists(paste("1_inputs/live_updates/case_history",this_setting,Sys.Date(),".Rdata",sep='')
)
fitting
file.exists(paste("1_inputs/fit/vaccination_history_TRUE",this_setting,risk_group_name,Sys.Date(),".Rdata",sep='')) == TRUE
file.exists(paste("1_inputs/live_updates/vaccination_history_TRUE",this_setting,risk_group_name,Sys.Date(),".Rdata",sep='')) == TRUE
source("~/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/(1)_simulate_setting.R", echo=TRUE)
#       (1/2) Setup
####################################################################
#load libraries
library(readr)
library(deSolve)
library(rvest)
library(ggplot2)
library(gridExtra)
library(ggpubr)
library(tidyverse)
source("~/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/(1)_simulate_setting.R", echo=TRUE)
source("~/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/(1)_simulate_setting.R", echo=TRUE)
#clear the field!
rm(list=ls())
this_setting
setting
this_setting = setting = "IDN"
### Setup __________________________________________________________________________________________________
#general toggles
fitting = "on"
plotting = "off"; ticket = 0
outbreak_timing = "off" #i.e., no new outbreak if =="after" than new VOC after last vaccine delivery date, if == 'during" new VOC introduced one week from now
vax_strategy_toggle = "off" #no additional vax, use real vax data only
vax_risk_strategy_toggle = "off"
sensitivity_analysis_toggles = list()
waning_toggle_acqusition = TRUE
waning_toggle_severe_outcome = FALSE #let's save some time, this is not used in the modelling scenarios
waning_toggle_rho_acqusition = TRUE
#initial search range of seed dates
if (this_setting == "FJI"){
date_start = as.Date('2021-04-30')
strain_inital = strain_now = 'WT'
covid19_waves = baseline_covid19_waves = data.frame(date = #c(as.Date('2021-06-06'),as.Date('2021-10-21'),as.Date('2022-01-15')), # initial best guess!
c(as.Date('2021-06-09'),as.Date('2021-10-15'),as.Date('2022-02-01')), # previous best guess
strain = c('delta','omicron','omicron'))
} else if (this_setting == "PNG"){
strain_inital = strain_now = 'WT'
baseline_covid19_waves = covid19_waves = data.frame(date = c(as.Date('2021-01-15'),as.Date('2021-09-01'),as.Date('2021-12-01')),
strain = c('WT','delta','omicron'))
date_start = covid19_waves$date[1] - 2
} else if (this_setting == "TLS") {
strain_inital = strain_now = 'WT'
baseline_covid19_waves = covid19_waves = data.frame(
date = c(as.Date('2021-03-01'),as.Date('2021-05-01'),as.Date('2021-12-01')),
strain = c('WT', 'delta', 'omicron'))
date_start = covid19_waves$date[1] - 2
} else if (this_setting == "IDN") {
strain_inital = strain_now = 'WT'
baseline_covid19_waves = covid19_waves = data.frame(date = c(as.Date('2021-04-01'),as.Date('2021-12-01')),
strain = c('delta','omicron'))
date_start = covid19_waves$date[1] - 2
}
model_weeks = as.numeric((Sys.Date()+1-date_start)/7)
#plot standard
plot_standard = theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
#risk group toggles
risk_group_prioritisation_to_date = NA
risk_group_lower_cov_ratio = NA
risk_group_toggle = "on"
risk_group_name = 'adults_with_comorbidities'
RR_estimate = 1.95
#______________________________________________________________________________________________________________
### Saving VE for known dates __________________________________________________________________________________
#Load vax history
source(paste(getwd(),"/(function)_VE_time_step.R",sep=""))
source(paste(getwd(),"/(function)_rho_time_step.R",sep=""))
source(paste(getwd(),"/(1)_simulate_setting.R",sep=""))
source(paste(getwd(),"/(3)_disease_characteristics.R",sep=""))
source(paste(getwd(),"/(2)_inital_state.R",sep=""))
list_poss_Rdata = list.files(path="1_inputs/fit/",pattern = paste("VE_real_range_",this_setting,"*",sep=''))
if (length(list_poss_Rdata)>0){
list_poss_Rdata_details = double()
for (i in 1:length(list_poss_Rdata)){
list_poss_Rdata_details = rbind(list_poss_Rdata_details,
file.info(paste("1_inputs/fit/",list_poss_Rdata[[i]],sep=''))$mtime)
}
latest_file = list_poss_Rdata[[which.max(list_poss_Rdata_details)]]
load(file = paste("1_inputs/fit/",latest_file,sep=''))
date_list = seq(max(max(VE_real_range$date)+1), # run only dates not yet filled
Sys.Date()+1,
by="days")
} else{
VE_real_range = data.frame()
date_list = seq(max(date_start,min(vaccination_history_TRUE$date)+ min(vaxCovDelay$delay)),
Sys.Date()+1,
by="days")
}
for (i in 1:length(date_list)) {
#date_now
date_now = date_list[i]
#(1/3) save VE as all WT-delta estimates
VE_delta = VE_time_step(
"delta",
date_now,
'any_infection',
VE_waning_LOCAL = VE_waning_distribution, #loaded from (2)
vaccination_history_LOCAL = vaccination_history_TRUE, #loaded from (1)
SA_toggles_local = sensitivity_analysis_toggles) %>%
mutate(date = date_now,
strain = "delta")
#(2/3) save VE as all omicron estimates
VE_omicron = VE_time_step(
"omicron",
date_now,
'any_infection',
VE_waning_LOCAL = VE_waning_distribution, #loaded from (2)
vaccination_history_LOCAL = vaccination_history_TRUE, #loaded from (1)
SA_toggles_local = sensitivity_analysis_toggles) %>%
mutate(date = date_now,
strain = "omicron")
#(3/3) within time step of each run calculate as mixed WT-delta/omicron estimates within omicron shift
VE_real_range = rbind(VE_real_range, VE_delta,VE_omicron)
}
rm(VE_time_step)
save(VE_real_range, file = paste('1_inputs/fit/VE_real_range_',this_setting,'_',Sys.Date(),'.Rdata',sep=''))
#______________________________________________________________________________________________________________
#SETUP________________________________________
require('pracma') #contains findpeaks function
#reported_cases remove NA, and within simulation scope
reported_cases = case_history %>% select(date,rolling_average) %>% filter(date > date_start)
reported_cases <- na.omit(reported_cases)
#reported_peaks - peaks in reported daily cases, NB: currently hard coded to FJI
reported_peaks = findpeaks(reported_cases$rolling_average,minpeakheight = 50 ,minpeakdistance = 90, npeaks = 3 )
reported_peaks = reported_cases$date[c(reported_peaks[,2])]
#add third peak
window = reported_cases %>% filter(date>as.Date('2022-05-01'))
third_peak = median(window$date[window$rolling_average == max(window$rolling_average)])
reported_peaks = c(reported_peaks,third_peak)
#fit cutoff dates
if (this_setting == "FJI"){
fit_cutoff_dates = c(as.Date('2021-10-15'),#earliest likely introduction of Omicron
reported_peaks[2] + as.numeric(reported_peaks[3] - reported_peaks[2])/2)
} else if (this_setting == "PNG"){
fit_cutoff_dates = c(as.Date('2021-07-05')) #first good introduction of Delta in PNG
} else if (this_setting == "IDN"){
fit_cutoff_dates =(sort(reported_peaks)[2]-sort(reported_peaks)[1])/2+sort(reported_peaks)[1] #first good introduction of Delta in PNG
}
par = c(40,70,1)
strain_inital = strain_now = 'WT'
covid19_waves = baseline_covid19_waves
covid19_waves$date[1] = covid19_waves$date[1] + round(par[1])
if (this_setting == "IDN"){date_start = covid19_waves$date[1] - 7}
model_weeks = as.numeric((fit_cutoff_dates[1]-date_start)/7)
under_reporting_est = par[2]
fitting_beta= par[3]
source(paste(getwd(),"/CommandDeck.R",sep=""),local=TRUE)
workshop = case_history %>%
select(date,rolling_average) %>%
mutate(rolling_average = rolling_average * under_reporting_est) %>%
rename(adjusted_reported = rolling_average) %>%
left_join(incidence_log, by = "date") %>%
mutate(fit_statistic = abs(rolling_average - adjusted_reported)^2)
fit_statistic = sum(workshop$fit_statistic,na.rm=TRUE)
to_plot = workshop %>% filter(date>date_start & date<=(date_start+model_weeks*7))
ggplot() +
geom_line(data=to_plot,aes(x=date,y=rolling_average),na.rm=TRUE) +
geom_point(data=to_plot,aes(x=date,y=adjusted_reported)) +
plot_standard
#FIT FIRST WAVE_______________________________
if (exists("fitting_beta")){rm(fitting_beta)}
if (exists("under_reporting_est")){rm(under_reporting_est)}
if (exists("covid19_waves")){rm(covid19_waves)}
fit_daily_reported_1 <- function(par){ #c(shift,under reporting, beta1)
on.exit(.optim <<- list(par = par, obj = print(returnValue())))
strain_inital = strain_now = 'WT'
covid19_waves = baseline_covid19_waves
covid19_waves$date[1] = covid19_waves$date[1] + round(par[1])
if (this_setting == "IDN"){date_start = covid19_waves$date[1] - 7}
model_weeks = as.numeric((fit_cutoff_dates[1]-date_start)/7)
under_reporting_est = par[2]
fitting_beta= par[3]
source(paste(getwd(),"/CommandDeck.R",sep=""),local=TRUE)
workshop = case_history %>%
select(date,rolling_average) %>%
mutate(rolling_average = rolling_average * under_reporting_est) %>%
rename(adjusted_reported = rolling_average) %>%
left_join(incidence_log, by = "date") %>%
mutate(fit_statistic = abs(rolling_average - adjusted_reported)^2)
fit_statistic = sum(workshop$fit_statistic,na.rm=TRUE)
return(fit_statistic)
}
.optim <- NULL
#Attempt Two: fit bounded
require(DEoptim)
#system.time CommandDeck = ~21.7 minutes, therefore (3*24*60)/21.7 ~ 200 runs before Sunday
first_wave_fit = DEoptim(fn = fit_daily_reported_1,
lower = c(30,50,0.9),
upper = c(50,90,1.2),
control = list(NP = 20,
itermax = 10))
save(first_wave_fit, file = paste('1_inputs/fit/first_wave_fit',this_setting,Sys.Date(),'.Rdata',sep=''))
warnings()
first_wave_fit
plot(first_wave_fit)
summary(first_wave_fit)
plot(first_wave_fit, type = 'b')
dev.new()
plot(outDEoptim, plot.type = "bestvalit", type = 'b', col = 'blue')
plot(first_wave_fit, plot.type = "bestvalit", type = 'b', col = 'blue')
plot(first_wave_fit, plot.type = "bestvalit", type = 'b', col = 'blue')
plot(first_wave_fit, plot.type = "bestvalit", type = 'b', col = 'blue')
plot(first_wave_fit, plot.type = "bestvalit")
plot(first_wave_fit, plot.type = "storepop")
plot(first_wave_fit, plot.type = "pop")
plot(first_wave_fit, plot.type ="bestmemit")
plot(first_wave_fit, plot.type ="storepop")
plot(first_wave_fit, plot.type ="pop")
first_wave_fit$member$pop
first_wave_fit$member$pop[,1]
summary(first_wave_fit)
plot(first_wave_fit, plot.type = "bestvalit")
plot(first_wave_fit, plot.type ="bestmemit")
to_plot = first_wave_fit$member$pop
to_plot
to_plot = as.data.frame(first_wave_fit$member$pop)
to_plot
colnames(to_plot) <- c('seed_date','under_reporting','beta_modifier')
to_plot
ggplot(to_plot) + geom_histogram(aes(x=seed_date))
ggplot(to_plot) + geom_histogram(aes(x=seed_date,bins=1))
ggplot(to_plot) + geom_histogram(aes(x=seed_date),bins=10)
ggplot(to_plot) + geom_histogram(aes(x=under_reporting),bins=10)
ggplot(to_plot) + geom_histogram(aes(x=beta_modifier),bins=10)
ggplot(to_plot) + geom_point(aes(x=beta_modifier,y=under_reporting))
param = first_wave_fit$optim$bestmem
param
par = param
strain_inital = strain_now = 'WT'
covid19_waves = baseline_covid19_waves
covid19_waves$date[1] = covid19_waves$date[1] + round(par[1])
if (this_setting == "IDN"){date_start = covid19_waves$date[1] - 7}
model_weeks = as.numeric((fit_cutoff_dates[1]-date_start)/7)
under_reporting_est = par[2]
fitting_beta= par[3]
source(paste(getwd(),"/CommandDeck.R",sep=""),local=TRUE)
workshop = case_history %>%
select(date,rolling_average) %>%
mutate(rolling_average = rolling_average * under_reporting_est) %>%
rename(adjusted_reported = rolling_average) %>%
left_join(incidence_log, by = "date") %>%
mutate(fit_statistic = abs(rolling_average - adjusted_reported)^2)
fit_statistic = sum(workshop$fit_statistic,na.rm=TRUE)
fit_statistic
to_plot = workshop %>% filter(date>date_start & date<=(date_start+model_weeks*7))
ggplot() +
geom_line(data=to_plot,aes(x=date,y=rolling_average),na.rm=TRUE) +
geom_point(data=to_plot,aes(x=date,y=adjusted_reported)) +
plot_standard
>>>>>>> Stashed changes
>>>>>>> Stashed changes
#clear the field!
rm(list=ls())
#       (1/2) Setup
####################################################################
#load libraries
library(readr)
library(deSolve)
library(rvest)
library(ggplot2)
library(gridExtra)
library(ggpubr)
library(tidyverse)
this_setting = setting = "TLS"
### Setup __________________________________________________________________________________________________
#general toggles
fitting = "on"
plotting = "off"; ticket = 0
outbreak_timing = "off" #i.e., no new outbreak if =="after" than new VOC after last vaccine delivery date, if == 'during" new VOC introduced one week from now
vax_strategy_toggle = "off" #no additional vax, use real vax data only
vax_risk_strategy_toggle = "off"
sensitivity_analysis_toggles = list()
waning_toggle_acqusition = TRUE
waning_toggle_severe_outcome = FALSE #let's save some time, this is not used in the modelling scenarios
waning_toggle_rho_acqusition = TRUE
#initial search range of seed dates
if (this_setting == "FJI"){
date_start = as.Date('2021-04-30')
strain_inital = strain_now = 'WT'
covid19_waves = baseline_covid19_waves = data.frame(date = #c(as.Date('2021-06-06'),as.Date('2021-10-21'),as.Date('2022-01-15')), # initial best guess!
c(as.Date('2021-06-09'),as.Date('2021-10-15'),as.Date('2022-02-01')), # previous best guess
strain = c('delta','omicron','omicron'))
} else if (this_setting == "PNG"){
strain_inital = strain_now = 'WT'
baseline_covid19_waves = covid19_waves = data.frame(date = c(as.Date('2021-01-15'),as.Date('2021-09-01'),as.Date('2021-12-01')),
strain = c('WT','delta','omicron'))
date_start = covid19_waves$date[1] - 2
} else if (this_setting == "TLS") {
strain_inital = strain_now = 'WT'
baseline_covid19_waves = covid19_waves = data.frame(
date = c(as.Date('2021-03-01'),as.Date('2021-05-01'),as.Date('2021-11-01')),
strain = c('WT', 'delta', 'omicron'))
date_start = covid19_waves$date[1] - 2
} else if (this_setting == "IDN") {
strain_inital = strain_now = 'WT'
baseline_covid19_waves = covid19_waves = data.frame(date = c(as.Date('2021-04-01'),as.Date('2021-10-15')),
strain = c('delta','omicron'))
date_start = covid19_waves$date[1] - 2
}
model_weeks = as.numeric((Sys.Date()+1-date_start)/7)
#plot standard
plot_standard = theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
#risk group toggles
risk_group_prioritisation_to_date = NA
risk_group_lower_cov_ratio = NA
risk_group_toggle = "on"
risk_group_name = 'adults_with_comorbidities'
RR_estimate = 1.95
### Saving VE for known dates __________________________________________________________________________________
#Load vax history
source(paste(getwd(),"/(function)_VE_time_step.R",sep=""))
source(paste(getwd(),"/(function)_rho_time_step.R",sep=""))
source(paste(getwd(),"/(1)_simulate_setting.R",sep=""))
source(paste(getwd(),"/(3)_disease_characteristics.R",sep=""))
source(paste(getwd(),"/(2)_inital_state.R",sep=""))
#SETUP________________________________________
require('pracma') #contains findpeaks function
#reported_cases remove NA, and within simulation scope
reported_cases = case_history %>% select(date,rolling_average) %>% filter(date > date_start)
reported_cases <- na.omit(reported_cases)
#reported_peaks - peaks in reported daily cases, NB: currently hard coded to FJI
reported_peaks = findpeaks(reported_cases$rolling_average,minpeakheight = 50 ,minpeakdistance = 90, npeaks = 3 )
reported_peaks = reported_cases$date[c(reported_peaks[,2])]
#add third peak
window = reported_cases %>% filter(date>as.Date('2022-05-01'))
third_peak = median(window$date[window$rolling_average == max(window$rolling_average)])
reported_peaks = c(reported_peaks,third_peak)
#fit cutoff dates
if (this_setting == "FJI"){
fit_cutoff_dates = c(as.Date('2021-10-15'),#earliest likely introduction of Omicron
reported_peaks[2] + as.numeric(reported_peaks[3] - reported_peaks[2])/2)
} else if (this_setting == "PNG"){
fit_cutoff_dates = c(as.Date('2021-07-05')) #first good introduction of Delta in PNG
} else if (this_setting == "IDN"){
fit_cutoff_dates =c((sort(reported_peaks)[2]-sort(reported_peaks)[1])/2+sort(reported_peaks)[1],
sort(reported_peaks)[2]+90) #first good introduction of Delta in PNG
}
fit_daily_reported_3 <- function(par){
fitting = "wave_three"
date_start = baseline_covid19_waves$date[3]-28-1
under_reporting_est = par[2]
on.exit(.optim <<- list(par = par, obj = print(returnValue())))
#Load first wave
list_poss_Rdata = list.files(path="1_inputs/fit/",pattern = paste("first_wave_fit",this_setting,"*",sep=""))
list_poss_Rdata_details = double()
for (i in 1:length(list_poss_Rdata)){
list_poss_Rdata_details = rbind(list_poss_Rdata_details,
file.info(paste("1_inputs/fit/",list_poss_Rdata[[i]],sep=''))$mtime)
}
latest_file = list_poss_Rdata[[which.max(list_poss_Rdata_details)]]
load(file = paste('1_inputs/fit/',latest_file,sep=''))
if (this_setting != "TLS"){
#Load second wave
list_poss_Rdata = list.files(path="1_inputs/fit/",pattern = paste("second_wave_fit",this_setting,"*",sep=""))
list_poss_Rdata_details = double()
for (i in 1:length(list_poss_Rdata)){
list_poss_Rdata_details = rbind(list_poss_Rdata_details,
file.info(paste("1_inputs/fit/",list_poss_Rdata[[i]],sep=''))$mtime)
}
latest_file = list_poss_Rdata[[which.max(list_poss_Rdata_details)]]
load(file = paste('1_inputs/fit/',latest_file,sep=''))
#configure scenario
model_weeks = as.numeric((Sys.Date()+1-date_start)/7)
covid19_waves = data.frame(date = c(baseline_covid19_waves$date[1] + round(first_wave_fit$par[1]),
baseline_covid19_waves$date[2] + round(second_wave_fit$par[1]),
baseline_covid19_waves$date[3] + round(par[1])),
strain = c('delta','omicron','omicron'))
fitting_beta= c(first_wave_fit$par[3],
second_wave_fit$par[3],
par[3])
source(paste(getwd(),"/CommandDeck.R",sep=""),local=TRUE)
workshop = case_history %>%
select(date,rolling_average) %>%
mutate(
rolling_average = case_when(
date > fit_cutoff_dates[2] ~ rolling_average * under_reporting_est,
date > fit_cutoff_dates[1] ~ rolling_average * second_wave_fit$par[2],
date <= fit_cutoff_dates[1] ~ rolling_average * first_wave_fit$par[2])) %>%
rename(adjusted_reported = rolling_average) %>%
left_join(incidence_log, by = "date") %>%
mutate(fit_statistic = abs(rolling_average - adjusted_reported)^2)
} else if (this_setting == "TLS"){
#configure scenario
model_weeks = as.numeric((as.Date('2022-07-01')-date_start)/7)
strain_inital = strain_now = 'delta'
fitting_beta= c(first_wave_fit$optim$bestmem[4],
first_wave_fit$optim$bestmem[5],
par[3])
covid19_waves = baseline_covid19_waves
covid19_waves$date[1] = covid19_waves$date[1] + round(first_wave_fit$optim$bestmem[2])
covid19_waves$date[2] = covid19_waves$date[2] + round(first_wave_fit$optim$bestmem[3])
covid19_waves$date[3] = covid19_waves$date[3] + round(par[1])
source(paste(getwd(),"/CommandDeck.R",sep=""),local=TRUE)
workshop = case_history %>%
select(date,rolling_average) %>%
mutate(
rolling_average = case_when(
date>= date_start ~ rolling_average * under_reporting_est,
date > as.Date('2021-08-01') & date < date_start ~ rolling_average * first_wave_fit$optim$bestmem[7],
date <= as.Date('2021-08-01') ~ rolling_average * first_wave_fit$optim$bestmem[6])) %>%
rename(adjusted_reported = rolling_average) %>%
left_join(incidence_log, by = "date") %>%
mutate(fit_statistic = abs(rolling_average - adjusted_reported)^2)
}
fit_statistic = sum(workshop$fit_statistic, #fit only after first wave
na.rm=TRUE)
return(fit_statistic)
}
.optim <- NULL
###Method Two - Differential Evolution
require(DEoptim)
#third_wave_fit CommandDeck = ~21.7 minutes, therefore (3*24*60)/21.7 ~ 200 runs before Sunday
third_wave_fit = DEoptim(fn = fit_daily_reported_3,
lower = c(-21,50,0.95),
upper = c(7,90,1.1),
control = list(NP = 20,
itermax = 10))
save(third_wave_fit, file = paste('1_inputs/fit/third_wave_fit',this_setting,Sys.Date(),'.Rdata',sep=''))
