date_start
model_weeks
grid.arrange(plot1,plot2,plot3,plot4,plot5, layout_matrix = lay)
fitted_incidence_log_tidy
max(fitted_incidence_log_tidy$date)
### Fit without risk group
risk_group_toggle = "off"
source(paste(getwd(),"/CommandDeck.R",sep=""))
grid.arrange(plot1,plot2,plot3,plot4,plot5, layout_matrix = lay)
fitted_incidence_log_tidy = incidence_log_tidy
fitted_incidence_log = incidence_log %>% select(date,daily_cases)
fitted_results[[1]] = list(parameters, next_state,fitted_incidence_log_tidy,fitted_incidence_log)
fit_wout_risk_group = date_now
date_now
### Save fitted results
if (! Sys.Date() == date_now ){
warning('fitted date not equal to current date')
if (Sys.Date() > date_now){stop('fitted date less than current date, may cause problems with real vaccines not being delivered!')}
}
### Save fitted results
if (! Sys.Date() == date_now-1 ){
warning('fitted date not equal to current date')
if (Sys.Date() > date_now){stop('fitted date less than current date, may cause problems with real vaccines not being delivered!')}
}
date_now
### Save fitted results
if (! Sys.Date() == date_now+1 ){
warning('fitted date not equal to current date')
if (Sys.Date() > date_now){stop('fitted date less than current date, may cause problems with real vaccines not being delivered!')}
}
fitted_max_date = date_now - 1 #incidence log always missed in first date
save(fitted_max_date,file = '1_inputs/last_fit_date.Rdata')
save(fitted_results, file = '1_inputs/fitted_results.Rdata')
fitting
fitting = "off"
source("C:/Users/u6044061/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/CommandDeck.R", echo=TRUE)
load(file = '1_inputs/last_fit_date.Rdata')
fitted_max_date
source("C:/Users/u6044061/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/CommandDeck.R", echo=TRUE)
date_start
fitted_max_date
fitting
fitting = "off"
source("C:/Users/u6044061/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/CommandDeck.R", echo=TRUE)
date_now
#this_rho = rho_dn %>% filter(outcome == this_outcome)
this_strain = strain_now
if (this_strain == 'WT'){this_strain = 'delta'}
this_rho = this_rho %>% filter(strain == this_strain)
if (nrow(incidence_log)>0){
workshop = incidence_log %>% select(date,daily_cases)
workshop = rbind(workshop,hist_cases)
} else{
workshop = hist_cases
}
workshop = workshop %>%
filter(date <= date_now & date > (date_now - 1/omega)) %>%
mutate(days = as.numeric(date_now - date))
workshop = workshop %>% mutate(prop_window = daily_cases/sum(workshop$daily_cases))
ggplot(workshop) + geom_line(aes(date,prop_window))
if (nrow(workshop) == 0){
return(this_rho$protection[this_rho$days ==0 & this_rho$outcome == this_outcome])
} #COMEBACK - rho for seroprev ==?
if (round(sum(workshop$prop_window),digits=5) != 1){stop('error in rho_time_step')}
workshop = workshop %>% left_join(this_rho,by='days') %>%
mutate(interim = protection * prop_window)
sum(workshop$interim)
date_now
date_now = as.Date('2022-09-30')
#this_rho = rho_dn %>% filter(outcome == this_outcome)
this_strain = strain_now
if (this_strain == 'WT'){this_strain = 'delta'}
this_rho = this_rho %>% filter(strain == this_strain)
if (nrow(incidence_log)>0){
workshop = incidence_log %>% select(date,daily_cases)
workshop = rbind(workshop,hist_cases)
} else{
workshop = hist_cases
}
workshop = workshop %>%
filter(date <= date_now & date > (date_now - 1/omega)) %>%
mutate(days = as.numeric(date_now - date))
workshop = workshop %>% mutate(prop_window = daily_cases/sum(workshop$daily_cases))
ggplot(workshop) + geom_line(aes(date,prop_window))
if (nrow(workshop) == 0){
return(this_rho$protection[this_rho$days ==0 & this_rho$outcome == this_outcome])
} #COMEBACK - rho for seroprev ==?
if (round(sum(workshop$prop_window),digits=5) != 1){stop('error in rho_time_step')}
workshop = workshop %>% left_join(this_rho,by='days') %>%
mutate(interim = protection * prop_window)
sum(workshop$interim)
date_start
View(workshop)
workshop = incidence_log %>% select(date,daily_cases)
hist_cases_include = hist_cases %>% filter(date<max(incidence_log$date))
workshop = rbind(workshop,hist_cases_include)
#this_rho = rho_dn %>% filter(outcome == this_outcome)
this_strain = strain_now
if (this_strain == 'WT'){this_strain = 'delta'}
this_rho = this_rho %>% filter(strain == this_strain)
if (nrow(incidence_log)>0){
workshop = incidence_log %>% select(date,daily_cases)
hist_cases_include = hist_cases %>% filter(date<max(incidence_log$date))
workshop = rbind(workshop,hist_cases_include)
} else{
workshop = hist_cases
}
workshop = workshop %>%
filter(date <= date_now & date > (date_now - 1/omega)) %>%
mutate(days = as.numeric(date_now - date))
workshop = workshop %>% mutate(prop_window = daily_cases/sum(workshop$daily_cases))
ggplot(workshop) + geom_line(aes(date,prop_window))
if (nrow(workshop) == 0){
return(this_rho$protection[this_rho$days ==0 & this_rho$outcome == this_outcome])
} #COMEBACK - rho for seroprev ==?
if (round(sum(workshop$prop_window),digits=5) != 1){stop('error in rho_time_step')}
workshop = workshop %>% left_join(this_rho,by='days') %>%
mutate(interim = protection * prop_window)
sum(workshop$interim)
source("C:/Users/u6044061/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/CommandDeck.R", echo=TRUE)
date_now = date_start
date_start
date_now = date_start + 1
#this_rho = rho_dn %>% filter(outcome == this_outcome)
this_strain = strain_now
if (this_strain == 'WT'){this_strain = 'delta'}
this_rho = this_rho %>% filter(strain == this_strain)
if (nrow(incidence_log)>0){
workshop = incidence_log %>% select(date,daily_cases)
hist_cases_include = hist_cases %>% filter(date<max(incidence_log$date))
workshop = rbind(workshop,hist_cases_include)
} else{
workshop = hist_cases
}
workshop = workshop %>%
filter(date <= date_now & date > (date_now - 1/omega)) %>%
mutate(days = as.numeric(date_now - date))
workshop = workshop %>% mutate(prop_window = daily_cases/sum(workshop$daily_cases))
ggplot(workshop) + geom_line(aes(date,prop_window))
if (nrow(workshop) == 0){
return(this_rho$protection[this_rho$days ==0 & this_rho$outcome == this_outcome])
} #COMEBACK - rho for seroprev ==?
if (round(sum(workshop$prop_window),digits=5) != 1){stop('error in rho_time_step')}
workshop = workshop %>% left_join(this_rho,by='days') %>%
mutate(interim = protection * prop_window)
sum(workshop$interim)
date_now
nrow(incidence_log)>0
#this_rho = rho_dn %>% filter(outcome == this_outcome)
this_strain = strain_now
if (this_strain == 'WT'){this_strain = 'delta'}
this_rho = this_rho %>% filter(strain == this_strain)
if (nrow(incidence_log)>0){
workshop = incidence_log %>% select(date,daily_cases)
hist_cases_include = hist_cases %>% filter(date<max(incidence_log$date))
workshop = rbind(workshop,hist_cases_include)
} else{
workshop = hist_cases
}
hist_cases_include
incidence_log
date_now
fitted_max_date
fitted_max_date = fitted_max_date + 1
save(fitted_max_date,file = '1_inputs/last_fit_date.Rdata')
fitted_max_date = date_now  #incidence log always missed in first date
fitted_max_date
load(file = '1_inputs/last_fit_date.Rdata')
fitted_max_date
source("C:/Users/u6044061/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/CommandDeck.R", echo=TRUE)
date_now
date_now = as.Date('2022-08-15')
#this_rho = rho_dn %>% filter(outcome == this_outcome)
this_strain = strain_now
if (this_strain == 'WT'){this_strain = 'delta'}
this_rho = this_rho %>% filter(strain == this_strain)
if (nrow(incidence_log)>0){
workshop = incidence_log %>% select(date,daily_cases)
workshop = rbind(workshop,hist_cases)
} else{
workshop = hist_cases
}
workshop = workshop %>%
filter(date <= date_now & date > (date_now - 1/omega)) %>%
mutate(days = as.numeric(date_now - date))
workshop = workshop %>% mutate(prop_window = daily_cases/sum(workshop$daily_cases))
ggplot(workshop) + geom_line(aes(date,prop_window))
if (nrow(workshop) == 0){
return(this_rho$protection[this_rho$days ==0 & this_rho$outcome == this_outcome])
} #COMEBACK - rho for seroprev ==?
if (round(sum(workshop$prop_window),digits=5) != 1){stop('error in rho_time_step')}
workshop = workshop %>% left_join(this_rho,by='days') %>%
mutate(interim = protection * prop_window)
sum(workshop$interim)
date_start
date_now = as.Date('2021-09-01')
#this_rho = rho_dn %>% filter(outcome == this_outcome)
this_strain = strain_now
if (this_strain == 'WT'){this_strain = 'delta'}
this_rho = this_rho %>% filter(strain == this_strain)
if (nrow(incidence_log)>0){
workshop = incidence_log %>% select(date,daily_cases)
workshop = rbind(workshop,hist_cases)
} else{
workshop = hist_cases
}
workshop = workshop %>%
filter(date <= date_now & date > (date_now - 1/omega)) %>%
mutate(days = as.numeric(date_now - date))
workshop = workshop %>% mutate(prop_window = daily_cases/sum(workshop$daily_cases))
ggplot(workshop) + geom_line(aes(date,prop_window))
if (nrow(workshop) == 0){
return(this_rho$protection[this_rho$days ==0 & this_rho$outcome == this_outcome])
} #COMEBACK - rho for seroprev ==?
if (round(sum(workshop$prop_window),digits=5) != 1){stop('error in rho_time_step')}
workshop = workshop %>% left_join(this_rho,by='days') %>%
mutate(interim = protection * prop_window)
sum(workshop$interim)
date_now = as.Date('2022-09-01')
#this_rho = rho_dn %>% filter(outcome == this_outcome)
this_strain = strain_now
if (this_strain == 'WT'){this_strain = 'delta'}
this_rho = this_rho %>% filter(strain == this_strain)
if (nrow(incidence_log)>0){
workshop = incidence_log %>% select(date,daily_cases)
workshop = rbind(workshop,hist_cases)
} else{
workshop = hist_cases
}
workshop = workshop %>%
filter(date <= date_now & date > (date_now - 1/omega)) %>%
mutate(days = as.numeric(date_now - date))
workshop = workshop %>% mutate(prop_window = daily_cases/sum(workshop$daily_cases))
ggplot(workshop) + geom_line(aes(date,prop_window))
if (nrow(workshop) == 0){
return(this_rho$protection[this_rho$days ==0 & this_rho$outcome == this_outcome])
} #COMEBACK - rho for seroprev ==?
if (round(sum(workshop$prop_window),digits=5) != 1){stop('error in rho_time_step')}
workshop = workshop %>% left_join(this_rho,by='days') %>%
mutate(interim = protection * prop_window)
sum(workshop$interim)
source("C:/Users/u6044061/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/CommandDeck.R", echo=TRUE)
fitted_max_date
fitted_max_date
source("C:/Users/u6044061/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/CommandDeck.R", echo=TRUE)
fitting = "on"
fitted_results = list()
#______________________________________________________________________________________________________________
### Default toggles ___________________________________________________________________________________________
setting = "SLE"
date_start = as.Date('2021-03-31')
strain_inital = strain_now = 'WT'
seed_date = c(as.Date('2021-04-25'),c(as.Date('2021-11-07'))) #first is seed date for delta, second is omicron
#model_weeks = as.numeric(ceiling((max('2021-12-01')-date_start)/7))
model_weeks = as.numeric((Sys.Date()+1-date_start)/7)
#model_weeks = model_weeks + 52 #too see expected trajectory
plotting = "on"
outbreak_timing = "off"
vax_strategy_toggle = "off"
vax_risk_strategy_toggle = "off"
waning_toggle_acqusition = TRUE
waning_toggle_severe_outcome = FALSE
waning_toggle_rho_acqusition = TRUE
rho_severe_disease = "on"
#______________________________________________________________________________________________________________
### Fit without risk group
risk_group_toggle = "off"
source(paste(getwd(),"/CommandDeck.R",sep=""))
grid.arrange(plot1,plot2,plot3,plot4,plot5, layout_matrix = lay)
fitted_incidence_log_tidy = incidence_log_tidy
fitted_incidence_log = incidence_log %>% select(date,daily_cases)
fitted_results[[1]] = list(parameters, next_state,fitted_incidence_log_tidy,fitted_incidence_log)
fit_wout_risk_group = date_now
date_now
date_now-1
if (debug == "on" | fitting == "on"){
#number as % of whole population
lay <- rbind(c(1,2),c(3,3))
plot1 <-
ggplot() +
geom_line(data=incidence_log_plot,aes(x=date,y=rolling_average_percentage),na.rm=TRUE) +
geom_point(data=case_history[case_history$date>date_start & case_history$date <max(incidence_log_plot$date),],
aes(x=date,y=rolling_average*5000*underascertainment_est/sum(pop)),na.rm=TRUE) +
xlab("") + #ylim(0,1.0)+
scale_x_date(date_breaks="1 month", date_labels="%b") +
ylab("daily cases % whole pop") +
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
axis.line = element_line(color = 'black'))
plot2 <- ggplot() +
geom_line(data=Reff_tracker,aes(x=date,y=Reff),na.rm=TRUE) +
xlab("") +
scale_x_date(date_breaks="1 month", date_labels="%b") +
#ylim(0,6) +
ylab("Reff") +
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
axis.line = element_line(color = 'black'))
plot3<- ggplot() +
geom_line(data=incidence_log_plot,aes(x=date,y=cumulative_incidence_percentage),na.rm=TRUE) +
xlab("") +
scale_x_date(date_breaks="1 month", date_labels="%b") +
ylab("cumulative cases % whole pop") +
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
axis.line = element_line(color = 'black'))
grid.arrange(plot1, plot2, plot3, layout_matrix = lay)
plot4 = ggplot(rho_tracker_dataframe) + geom_line(aes(x=date,y=rho))
plot5 = ggplot(VE_tracker_dataframe) + geom_line(aes(x=date,y=VE,color=as.factor(dose)))
lay <- rbind(c(1,2),c(3,3),c(4,5))
grid.arrange(plot1,plot2,plot3,plot4,plot5, layout_matrix = lay)
}
date_now
### Save fitted results
if (! Sys.Date() == date_now-1 ){
warning('fitted date not equal to current date')
if (Sys.Date() > date_now){stop('fitted date less than current date, may cause problems with real vaccines not being delivered!')}
}
fitted_max_date = date_now-1  #incidence log always missed in first date
save(fitted_max_date,file = '1_inputs/last_fit_date.Rdata')
save(fitted_results, file = '1_inputs/fitted_results.Rdata')
source("C:/Users/u6044061/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/CommandDeck.R", echo=TRUE)
fitting = "off"
source("C:/Users/u6044061/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/CommandDeck.R", echo=TRUE)
View(rho_tracker_dataframe)
date_start
date_now
parameters$rho
View(VE_tracker_dataframe)
source("C:/Users/u6044061/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/(function)_fitting_model.R", echo=TRUE)
fitting
source("C:/Users/u6044061/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/CommandDeck.R", echo=TRUE)
source("C:/Users/u6044061/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/CommandDeck.R", echo=TRUE)
date_start
View(rho_tracker_dataframe);View(VE_tracker_dataframe);View(Reff_tracker)
seq(date_start+1,date_start+nrow(rho_tracker_dataframe)-1,by="days")
View(incidence_log)
fitting
debug
source("C:/Users/u6044061/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/CommandDeck.R", echo=TRUE)
View(rho_tracker_dataframe)
View(Reff_tracker)
View(incidence_log)
J
pop
pop_setting
### COMEBACK - still need importation
if (setting == "SLE"){setting_long = "Sierra Leone"}
#______________________________________________________________________________________________________________________________________
### (1/5) Age structure of population
##(A/B) Without risk groups
#NOTE: this program has been configured so that the age_groups can be modified on a whim,
# however, some other programs aren't as flexible
age_groups = c(0,4,9,17,29,44,59,69,110)
age_group_labels = c('0 to 4','5 to 9','10 to 17','18 to 29','30 to 44','45 to 59','60 to 69','70 to 100')
num_age_groups = J = length(age_group_labels)
age_group_order = data.frame(age_group = age_group_labels, age_group_num = seq(1:J))
pop_orig <- read.csv(paste(rootpath,"inputs/pop_estimates.csv",sep=''), header=TRUE)
pop_setting_orig <- pop_orig[pop_orig$country == setting,]
pop_setting <- pop_setting_orig %>%
mutate(agegroup = cut(age,breaks = age_groups, include.lowest = T,labels = age_group_labels))
pop_setting <- aggregate(pop_setting$population, by=list(category=pop_setting$agegroup), FUN=sum)
colnames(pop_setting) <-c('age_group','pop')
pop <- pop_setting$pop
pop
pop_setting
fitting = "on"
fitted_results = list()
#______________________________________________________________________________________________________________
### Default toggles ___________________________________________________________________________________________
setting = "SLE"
date_start = as.Date('2021-03-31')
strain_inital = strain_now = 'WT'
seed_date = c(as.Date('2021-04-25'),c(as.Date('2021-11-07'))) #first is seed date for delta, second is omicron
#model_weeks = as.numeric(ceiling((max('2021-12-01')-date_start)/7))
model_weeks = as.numeric((Sys.Date()+1-date_start)/7)
#model_weeks = model_weeks + 52 #too see expected trajectory
plotting = "on"
outbreak_timing = "off"
vax_strategy_toggle = "off"
vax_risk_strategy_toggle = "off"
waning_toggle_acqusition = TRUE
waning_toggle_severe_outcome = FALSE
waning_toggle_rho_acqusition = TRUE
rho_severe_disease = "on"
#______________________________________________________________________________________________________________
### Fit without risk group
risk_group_toggle = "off"
source(paste(getwd(),"/CommandDeck.R",sep=""))
risk_group_toggle
source("C:/Users/u6044061/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/(2)_inital_state.R", echo=TRUE)
initialInfected = seed*AverageSymptomaticPeriod/(AverageSymptomaticPeriod+AverageLatentPeriod)
initialExposed  = seed*AverageLatentPeriod/(AverageSymptomaticPeriod+AverageLatentPeriod)
initialRecovered = seroprev %>% left_join(pop_setting, by = "age_group") %>% mutate(R = seroprev*pop/100) %>%
select(age_group,R)
date = seq(1,lengthInfectionDerivedImmunity)
date = date_start - date
workshop = as.data.frame(date)
workshop$daily_cases = sum(initialRecovered$R)/lengthInfectionDerivedImmunity
hist_cases = workshop
recovered_risk = initialRecovered %>%
left_join(risk_dn, by = "age_group") %>%
mutate(risk_group = risk_group_name,
R = R*prop) %>%
select(risk_group,age_group,R)
recovered_general_public   = initialRecovered %>%
left_join(risk_dn, by = "age_group") %>%
mutate(risk_group = 'general_public',
R = R*(1-prop)) %>%
select(risk_group,age_group,R)
initialRecovered = rbind(recovered_general_public,recovered_risk)
#(C/F): age distribution of cases
#COMEBACK: no data, so assuming uniform across age groups
initialClasses = pop_risk_group_dn %>% ungroup() %>%
mutate(I = initialInfected*pop/sum(pop),
E = initialExposed*pop/sum(pop)) %>%
left_join(initialRecovered, by = c("risk_group", "age_group")) %>%
mutate(S = pop - E - I - R) %>%
select(-pop) %>%
pivot_longer(
cols = I:S,
names_to = 'class',
values_to = 'state_inital'
)
if (round(sum(initialClasses$state_inital)) != sum(pop)){stop('(2) inital state line 248')}
round(sum(initialClasses$state_inital))
sum(pop)
View(initialClasses)
pop_risk_group_dn
initialExposed
initialInfected
initialRecovered
recovered_general_public
risk_dn
initialRecovered
lengthInfectionDerivedImmunity
initialRecovered
risk_dn
seroprev
source("C:/Users/u6044061/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/(mech shop) seroprevalence age distribution.R", echo=TRUE)
SLE_pop <- SLE_pop %>%
mutate(agegroup_SERO = cut(age,breaks = underlying_age_grouping, include.lowest = T, labels = SLE_age$agegroup_SERO),
agegroup_MODEL = cut(age,breaks = age_groups, include.lowest = T, labels = age_group_labels)) %>%
ungroup() %>%
group_by(agegroup_MODEL) %>%
mutate(model_group_percent = population/sum(population))
seroprev
source("C:/Users/u6044061/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/(2)_inital_state.R", echo=TRUE)
warnings()
diag_matrix
J
suscept
seroprev
setting
setting = "SLE"
if (as.numeric(format(date_start, format="%Y")) > 2022){
load(file = "1_inputs/seroprev.Rdata")
seroprev = seroprev[seroprev$setting == setting & seroprev$year ==  2022,]
}
seroprev
setting
load(file = "1_inputs/seroprev.Rdata")
seroprev = seroprev[seroprev$setting == setting & seroprev$year ==  2022,]
seroprev
source("C:/Users/u6044061/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/CommandDeck.R", echo=TRUE)
date_now
fitting
fitting = "off"
source("C:/Users/u6044061/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/CommandDeck.R", echo=TRUE)
workshop = vaccination_history_TRUE %>% filter(risk_group == risk_group_name & vaccine_type == 'Sinopharm')
workshop = aggregate(workshop$doses_delivered_this_date, by=list(workshop$age_group,workshop$risk_group,workshop$dose,workshop$vaccine_type), FUN=sum)
colnames(workshop) = c('age_group','risk_group','dose','vaccine_type','state')
workshop = workshop %>% left_join(pop_risk_group_dn) %>% mutate(cov = state/pop) %>% select(-pop)
print(workshop, row.names = FALSE)
workshop = next_state %>% filter(risk_group == risk_group_name)
workshop = aggregate(workshop$pop, by=list(workshop$age_group,workshop$risk_group,workshop$dose,workshop$vaccine_type), FUN=sum)
colnames(workshop) = c('age_group','risk_group','dose','vaccine_type','state')
workshop = workshop %>% left_join(pop_risk_group_dn) %>% mutate(cov = state/pop) %>% select(-pop)
print(workshop, row.names = FALSE)
source("C:/Users/u6044061/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/CommandDeck.R", echo=TRUE)
source("C:/Users/u6044061/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/(mech shop) prevalence of pregnant women.R", echo=TRUE)
### plot ASFR
#View(ASFR)
ggplot(data=ASFR) +
geom_pointrange(aes(x=ASFR*100,y=AGE,xmin=LCI*100,xmax=UCI*100)) +
# xlim(0,1) +
xlab("Age-specific fertility ratio (%)") +
ylab("") +
labs(title="") +
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
axis.line = element_line(color = 'black'))
### plot ASFR
#View(ASFR)
ggplot(data=ASFR) +
geom_pointrange(aes(x=ASFR*100,y=AGE,xmin=LCI*100,xmax=UCI*100)) +
# xlim(0,1) +
xlab("Age-specific fertility ratio (%)") +
ylab("") +
labs(title="") +
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(color = 'black'))
