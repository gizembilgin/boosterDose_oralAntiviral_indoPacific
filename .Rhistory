theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
axis.line = element_line(color = 'black'))
grid.arrange(plot1, plot2)
View(severe_outcome_FINAL)
pop_orig <- read.csv("C:/Users/gizem/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/inputs/pop_estimates.csv", header=TRUE)
pop_setting_orig <- pop_orig[pop_orig$country == setting,]
pop_setting <- pop_setting_orig %>%
mutate(agegroup = cut(age,breaks = age_groups, include.lowest = T,labels = age_group_labels))
View(pop_setting_orig)
View(pop_setting)
#####(5/6) Calculating YLL from death
#requires average age in age-group and life_expectancy of this study setting
workshop <- pop_setting_orig %>%
mutate(agegroup = cut(age,breaks = age_groups, include.lowest = T,labels = age_group_labels))
View(workshop)
workshop_sum <- aggregate(workshop$population, by=list(category=workshop$agegroup), FUN=sum)
colnames(workshop_sum) <-c('agegroup','pop')
View(workshop)
View(workshop_sum)
workshop <- workshop %>% left_join(workshop_sum)
workshop <- workshop %>% mutate(weight=population/pop)
round(workshop$weight)
round(workshop$weight,digits=2)
workshop <- workshop %>% mutate(weight=population/pop,
age_weight = (age+0.5)*weight)
workshop <- aggregate(workshop$age_weight, by=list(category=workshop$agegroup), FUN=sum)
colnames(workshop_sum) <-c('agegroup','average_age')
lifeExpect <- read.csv('1_inputs/UN_life_expectancy_est.csv')
lifeExpect = [lifeExpect$setting == setting,]
lifeExpect = lifeExpect[lifeExpect$setting == setting,]
lifeExpect <- read.csv('1_inputs/UN_life_expectancy_est.csv')
lifeExpect = lifeExpect[lifeExpect$setting == setting,]
View(lifeExpect)
lifeExpect <- read.csv('1_inputs/UN_life_expectancy_est.csv')
lifeExpect = lifeExpect[lifeExpect$setting == setting,]
colnames(workshop) <-c('agegroup','average_age')
workshop <- workshop %>% mutate(
closest = min(abs(average_age-lifeExpect$age))
)
workshop <- workshop %>% mutate(
closest = min(abs(rep(average_age,nrow(lifeExpect))-lifeExpect$age))
)
min(abs(rep(average_age,nrow(lifeExpect))-lifeExpect$age))
#####(5/6) Calculating YLL from death
#requires average age in age-group and life_expectancy of this study setting
workshop <- pop_setting_orig %>%
mutate(agegroup = cut(age,breaks = age_groups, include.lowest = T,labels = age_group_labels))
library(tidyverse)
library(readr)
library(deSolve)
library(rvest)
library(ggplot2)
library(gridExtra)
#####(5/6) Calculating YLL from death
#requires average age in age-group and life_expectancy of this study setting
workshop <- pop_setting_orig %>%
mutate(agegroup = cut(age,breaks = age_groups, include.lowest = T,labels = age_group_labels))
workshop_sum <- aggregate(workshop$population, by=list(category=workshop$agegroup), FUN=sum)
colnames(workshop_sum) <-c('agegroup','pop')
workshop <- workshop %>% left_join(workshop_sum)
workshop <- workshop %>% mutate(weight=population/pop,
age_weight = (age+0.5)*weight)
workshop <- aggregate(workshop$age_weight, by=list(category=workshop$agegroup), FUN=sum)
colnames(workshop) <-c('agegroup','average_age')
lifeExpect <- read.csv('1_inputs/UN_life_expectancy_est.csv')
lifeExpect = lifeExpect[lifeExpect$setting == setting,]
workshop <- workshop %>% mutate(
closest = which.min(abs(lifeExpect$age-average_age))
)
which.min(abs(lifeExpect$age-workshop$average_age[1]))
which.min(abs(lifeExpect$age-workshop))
which.min(abs(lifeExpect$age-workshop$average_age[1]))
which.min(abs(lifeExpect$age-workshop$average_age[2]))
lifeExpect$age[which.min(abs(lifeExpect$age-workshop$average_age[2]))]
lifeExpect$age[which.min(abs(lifeExpect$age-workshop$average_age[3]))]
lifeExpect$age[which.min(abs(lifeExpect$age-workshop$average_age[5]))]
lifeExpect$age[which.min(abs(lifeExpect$age-workshop$average_age[1]))]
closest_age = data.frame()
for (i in 1:nrow(workshop)){
closest_age = rbind(closest_age,lifeExpect$age[which.min(abs(lifeExpect$age-workshop$average_age[i]))])
}
View(closest_age)
closest_age = data.frame()
for (i in 1:nrow(workshop)){
closest_age = data.frame(closest_age,lifeExpect$age[which.min(abs(lifeExpect$age-workshop$average_age[i]))])
}
colnames(closest_age) = c('closest_age')
workshop = cbind(workshop,closest_age)
closest_age = data.frame()
for (i in 1:nrow(workshop)){
closest_age = rbind(closest_age,lifeExpect$age[which.min(abs(lifeExpect$age-workshop$average_age[i]))])
}
colnames(closest_age) = c('closest_age')
workshop = cbind(workshop,closest_age)
workshop <- pop_setting_orig %>%
mutate(agegroup = cut(age,breaks = age_groups, include.lowest = T,labels = age_group_labels))
workshop_sum <- aggregate(workshop$population, by=list(category=workshop$agegroup), FUN=sum)
colnames(workshop_sum) <-c('agegroup','pop')
workshop <- workshop %>% left_join(workshop_sum)
workshop <- workshop %>% mutate(weight=population/pop,
age_weight = (age+0.5)*weight)
workshop <- aggregate(workshop$age_weight, by=list(category=workshop$agegroup), FUN=sum)
colnames(workshop) <-c('agegroup','average_age')
lifeExpect <- read.csv('1_inputs/UN_life_expectancy_est.csv')
lifeExpect = lifeExpect[lifeExpect$setting == setting,]
closest_age = data.frame()
for (i in 1:nrow(workshop)){
closest_age = rbind(closest_age,lifeExpect$age[which.min(abs(lifeExpect$age-workshop$average_age[i]))])
}
colnames(closest_age) = c('closest_age')
workshop = cbind(workshop,closest_age)
colnames(closest_age) = c('age')
workshop = cbind(workshop,closest_age)
workshop <- workshop %>%
left_join(lifeExpect) %>%
select(agegroup,average_age,age,life_expectancy)
View(outcome_proj)
View(severe_outcome_FINAL)
YLL_FINAL = workshop %>%
select(agegroup,life_expectancy) %>%
mutate(agegroup = gsub("-", " to ", agegroup) ))
YLL_FINAL = workshop %>%
select(agegroup,life_expectancy) %>%
mutate(agegroup = gsub("-", " to ", agegroup))
View(YLL_FINAL)
YLL_FINAL$agegroup[YLL_FINAL$agegroup == '60 to 100'] = '60+'
colnames(YLL_FINAL) = c('age_group','YLL')
death = severe_outcome_FINAL[severe_outcome_FINAL$outcome == 'death',]
View(death)
YLL_row = severe_outcome_FINAL[severe_outcome_FINAL$outcome == 'death',]
YLL_row <- YLL_row %>% left_join(YLL_FINAL)
View(YLL_row)
YLL_row = severe_outcome_FINAL[severe_outcome_FINAL$outcome == 'death',]
YLL_row$outcome = 'YLL'
YLL_row$outcome_long = 'YLL per death in this age_group multiplied by death rate'
YLL_row <- YLL_row %>% left_join(YLL_FINAL)
YLL_row <- YLL_row %>% left_join(YLL_FINAL) %>%
mutate(percentage = percentage*YLL)
YLL_row = YLL_row[,-c(1:4)]
YLL_row = severe_outcome_FINAL[severe_outcome_FINAL$outcome == 'death',]
YLL_row$outcome = 'YLL'
YLL_row$outcome_long = 'YLL per death in this age_group multiplied by death rate'
YLL_row <- YLL_row %>% left_join(YLL_FINAL) %>%
mutate(percentage = percentage*YLL)
YLL_row = YLL_row[,c(1:4)]
severe_outcome_FINAL = rbind(severe_outcome_FINAL,YLL_row)
outcome_proj = incidence_log_unedited[,c('date','daily_cases')]
workshop = subset(incidence_log_unedited, select=-c(time,date,daily_cases))
for (i in 1:length(outcomes_list)){ #do for every outcome
outcome = outcomes_list[i]
workshop_temp = workshop
this_health_outcome = severe_outcome_FINAL[severe_outcome_FINAL$outcome == outcome,c('percentage')]
this_health_outcome = this_health_outcome/100 #from % -> between 0-1
#COMEBACK - would apply VE but for now
this_health_outcome = rep(this_health_outcome,num_vax_classes)
for (i in 1:nrow(workshop)){
#COMEBACK - could be faster!
workshop_temp[i,] = workshop[i,] * this_health_outcome
}
outcome_result = as.data.frame(rowSums(workshop_temp))
colnames(outcome_result) = outcome
outcome_proj = cbind(outcome_proj,outcome_result)
}
outcome_proj_cum = outcome_proj
for (i in 2:ncol(outcome_proj)){
outcome_proj_cum[,i] = round(cumsum(outcome_proj_cum[,i]),digits=4)
}
outcome_proj_cum_long = data.frame()
for (i in 2:ncol(outcome_proj_cum)){
interim = outcome_proj_cum[,c(1,i)]
colnames(interim) = c('date','proj')
interim$outcome = colnames(outcome_proj_cum)[i]
outcome_proj_cum_long = rbind(outcome_proj_cum_long,interim)
}
outcome_proj_long = data.frame()
for (i in 2:ncol(outcome_proj)){
interim = outcome_proj[,c(1,i)]
colnames(interim) = c('date','proj')
interim$outcome = colnames(outcome_proj)[i]
outcome_proj_long = rbind(outcome_proj_long,interim)
}
plot1 <-
ggplot() +
geom_line(data=outcome_proj_long,aes(x=date,y=proj,color=as.factor(outcome)),na.rm=TRUE) +
xlab("") +
scale_x_date(date_breaks="1 month", date_labels="%b") +
#ylim(0,40) +
ylab("incidence") +
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
axis.line = element_line(color = 'black'))
plot2 <- ggplot() +
geom_line(data=outcome_proj_cum_long,aes(x=date,y=proj,color=as.factor(outcome)),na.rm=TRUE) +
xlab("") +
scale_x_date(date_breaks="1 month", date_labels="%b") +
ylab("cumulative incidence") +
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
axis.line = element_line(color = 'black'))
grid.arrange(plot1, plot2)
plot1 <-
ggplot() +
geom_line(data=outcome_proj_long[outcome_proj_long$outcome != 'daily_cases',],aes(x=date,y=proj,color=as.factor(outcome)),na.rm=TRUE) +
xlab("") +
scale_x_date(date_breaks="1 month", date_labels="%b") +
#ylim(0,40) +
ylab("incidence") +
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
axis.line = element_line(color = 'black'))
plot2 <- ggplot() +
geom_line(data=outcome_proj_cum_long[outcome_proj_cum_long$outcome != 'daily_cases',],aes(x=date,y=proj,color=as.factor(outcome)),na.rm=TRUE) +
xlab("") +
scale_x_date(date_breaks="1 month", date_labels="%b") +
ylab("cumulative incidence") +
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
axis.line = element_line(color = 'black'))
grid.arrange(plot1, plot2)
source("~/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/(function)_severe_outcome_proj.R", echo=TRUE)
severe_outcome_proj(incidence_log_unedited)
source("~/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/(function)_severe_outcome_proj.R", echo=TRUE)
unique(vaccination_history_FINAL$vaccine_type)
unique(vaccine_effectiveness$vaccine_type)
unique(VE_full_vaccine_type$vaccine_type)
#####(2/3) Enact strategy ######################################################
###(A/C) Calculate the eligible population
# = % max poss coverage * pop_size - existing vaccine coverage
eligible_pop = pop
eligible_pop
eligible_pop = eligible_pop * vax_strategy_max_expected_cov
vax_strategy_max_expected_cov = 0.8 #between 0-1 % of total age group expected to be vaccinated
#####(2/3) Enact strategy ######################################################
###(A/C) Calculate the eligible population
# = % max poss coverage * pop_size - existing vaccine coverage
eligible_pop = pop
eligible_pop = eligible_pop * vax_strategy_max_expected_cov
eligible_pop
#####(2/3) Enact strategy ######################################################
###(A/C) Calculate the eligible population
# = % max poss coverage * pop_size - existing vaccine coverage
eligible_pop = pop
eligible_pop = round(eligible_pop * vax_strategy_max_expected_cov)
eligible_pop
eligible_pop = data.frame(cbind(eligible_pop,eligible_pop))
eligible_pop
View(vaccination_history_FINAL)
colnames(eligible_pop) = c('dose_1','dose_2')
rownames(eligible_pop) = age_group_labels
eligible_pop
#####(2/3) Enact strategy ######################################################
###(A/C) Calculate the eligible population
# = % max poss coverage * pop_size - existing vaccine coverage
eligible_pop = pop
eligible_pop = round(eligible_pop * vax_strategy_max_expected_cov)
#make long by dose
workshop = data.frame()
for (i in 1:num_vax_doses){
this_dose = as.data.frame(eligible_pop) %>% mutate(dose = i)
workshop = rbind(workshop,this_dose)
}
eligible_pop= workshop
eligible_pop
eligible_pop = pop
eligible_pop = round(eligible_pop * vax_strategy_max_expected_cov)
colnames(eligible_pop) = c('individuals')
rownames(eligible_pop) = age_group_labels
#make long by dose
workshop = data.frame()
for (i in 1:num_vax_doses){
this_dose = as.data.frame(eligible_pop) %>% mutate(dose = i)
workshop = rbind(workshop,this_dose)
}
eligible_pop= workshop
#####(2/3) Enact strategy ######################################################
###(A/C) Calculate the eligible population
# = % max poss coverage * pop_size - existing vaccine coverage
eligible_pop = pop
eligible_pop = round(eligible_pop * vax_strategy_max_expected_cov)
colnames(eligible_pop) = c('individuals')
#####(2/3) Enact strategy ######################################################
###(A/C) Calculate the eligible population
# = % max poss coverage * pop_size - existing vaccine coverage
eligible_pop = data.frame(pop)
eligible_pop = round(eligible_pop * vax_strategy_max_expected_cov)
colnames(eligible_pop) = c('individuals')
rownames(eligible_pop) = age_group_labels
#make long by dose
workshop = data.frame()
for (i in 1:num_vax_doses){
this_dose = as.data.frame(eligible_pop) %>% mutate(dose = i)
workshop = rbind(workshop,this_dose)
}
eligible_pop= workshop
eligible_pop
pop_setting
pop_orig
pop_setting
pop_setting
pop_orig <- read.csv("C:/Users/gizem/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/inputs/pop_estimates.csv", header=TRUE)
pop_setting_orig <- pop_orig[pop_orig$country == setting,]
pop_setting <- pop_setting_orig %>%
mutate(agegroup = cut(age,breaks = age_groups, include.lowest = T,labels = age_group_labels))
pop_setting <- aggregate(pop_setting$population, by=list(category=pop_setting$agegroup), FUN=sum)
colnames(pop_setting) <-c('agegroup','pop')
pop <- pop_setting$pop
pop_setting
#####(2/3) Enact strategy ######################################################
###(A/C) Calculate the eligible population
# = % max poss coverage * pop_size - existing vaccine coverage
eligible_pop = data.frame(pop_setting)
eligible_pop$pop = round(eligible_pop$pop * vax_strategy_max_expected_cov)
colnames(eligible_pop) = c('age_group','individuals')
eligible_pop
colnames(eligible_pop) = c('age_group','eligible_individuals')
#make long by dose
workshop = data.frame()
#make long by dose
workshop = data.frame()
for (i in 1:num_vax_doses){
this_dose = as.data.frame(eligible_pop) %>% mutate(dose = i)
workshop = rbind(workshop,this_dose)
}
eligible_pop= workshop
for (i in 1:unqiue(vaccination_history_FINAL$vaccine_type)){
for (j in 1:unique(vaccination_history_FINAL$dose)){
}
}
eligible_pop
vaccine_coverage
num_vax_doses
num_vax_types
num_age_groups
eligible_pop
#remove already vaccinated individuals
existing_coverage = cbind(eligible_pop$age_group,eligible_pop$dose,rep(0,num_age_groups*num_vax_doses))
existing_coverage
eligible_pop
#remove already vaccinated individuals
existing_coverage = data.frame(eligible_pop$age_group,eligible_pop$dose,rep(0,num_age_groups*num_vax_doses))
existing_coverage
colnames(exiting_coverage) = c('age_group','dose','cov_to_date')
colnames(existing_coverage) = c('age_group','dose','cov_to_date')
existing_coverage
for (i in 1:num_vax_types){
for (j in 1:num_vax_doses){
#need to sum across vaccine_coverage (as this is vaccination_history_FINAL split across age groups)
existing_coverage[existing_coverage$dose == j,] =
existing_coverage[existing_coverage$dose == j,] + vaccine_coverage[(J*(t+(d-1)*T) - J):(J*(t+(d-1)*T))]
}
}
(J*(t+(d-1)*T)
- J)
vaccine_coverage[(J*(t+(d-1)*T) - J):(J*(t+(d-1)*T))]
vaccine_coverage
existing_coverage[existing_coverage$dose == j,]
#remove already vaccinated individuals
existing_coverage = data.frame(eligible_pop$age_group,eligible_pop$dose,rep(0,num_age_groups*num_vax_doses))
colnames(existing_coverage) = c('age_group','dose','cov_to_date')
for (i in 1:num_vax_types){
for (j in 1:num_vax_doses){
#need to sum across vaccine_coverage (as this is vaccination_history_FINAL split across age groups)
existing_coverage[existing_coverage$dose == j,] =
existing_coverage[existing_coverage$dose == j,] + vaccine_coverage[(J*(t+(d-1)*T) - J):(J*(t+(d-1)*T))]
}
}
#remove already vaccinated individuals
existing_coverage = data.frame(eligible_pop$age_group,eligible_pop$dose,rep(0,num_age_groups*num_vax_doses))
colnames(existing_coverage) = c('age_group','dose','cov_to_date')
existing_coverage
j
existing_coverage[existing_coverage$dose == j,]
#remove already vaccinated individuals
existing_coverage = data.frame(eligible_pop$age_group,eligible_pop$dose,rep(0,num_age_groups*num_vax_doses))
colnames(existing_coverage) = c('age_group','dose','cov_to_date')
for (i in 1:num_vax_types){
for (j in 1:num_vax_doses){
#need to sum across vaccine_coverage (as this is vaccination_history_FINAL split across age groups)
existing_coverage$cov_to_date[existing_coverage$dose == j] =
existing_coverage$cov_to_date[existing_coverage$dose == j] + vaccine_coverage[(J*(t+(d-1)*T) - J):(J*(t+(d-1)*T))]
}
}
warnings()
existing_coverage
i=1
j=1
#remove already vaccinated individuals
existing_coverage = data.frame(eligible_pop$age_group,eligible_pop$dose,rep(0,num_age_groups*num_vax_doses))
colnames(existing_coverage) = c('age_group','dose','cov_to_date')
existing_coverage$cov_to_date[existing_coverage$dose == j]
vaccine_coverage[(J*(t+(d-1)*T) - J):(J*(t+(d-1)*T))]
for (t in 1:num_vax_types){
for (d in 1:num_vax_doses){
#need to sum across vaccine_coverage (as this is vaccination_history_FINAL split across age groups)
existing_coverage$cov_to_date[existing_coverage$dose == d] =
existing_coverage$cov_to_date[existing_coverage$dose == d] + vaccine_coverage[(J*(t+(d-1)*T) - J):(J*(t+(d-1)*T))]
}
}
#remove already vaccinated individuals
existing_coverage = data.frame(eligible_pop$age_group,eligible_pop$dose,rep(0,num_age_groups*num_vax_doses))
colnames(existing_coverage) = c('age_group','dose','cov_to_date')
t=1
d=1
existing_coverage$cov_to_date[existing_coverage$dose == d]
vaccine_coverage[(J*(t+(d-1)*T) - J):(J*(t+(d-1)*T))]
vaccine_coverage
#need to sum across vaccine_coverage (as this is vaccination_history_FINAL split across age groups)
existing_coverage$cov_to_date[existing_coverage$dose == d] =
existing_coverage$cov_to_date[existing_coverage$dose == d] + vaccine_coverage[(J*(t+(d-1)*T) - J):(J*(t+(d-1)*T))]
existing_coverage
d=2
#need to sum across vaccine_coverage (as this is vaccination_history_FINAL split across age groups)
existing_coverage$cov_to_date[existing_coverage$dose == d] =
existing_coverage$cov_to_date[existing_coverage$dose == d] + vaccine_coverage[(J*(t+(d-1)*T) - J):(J*(t+(d-1)*T))]
existing_coverage
existing_coverage$cov_to_date[existing_coverage$dose == d]
vaccine_coverage[(J*(t+(d-1)*T) - J):(J*(t+(d-1)*T))]
T
num_vax_doses
num_vax_types
(J*(t+(d-1)*T) - J)
(J*(t+(d-1)*T))
t
d
d=1
(J*(t+(d-1)*T) - J):(J*(t+(d-1)*T))
(J*(t+(d-1)*T) - J+1):(J*(t+(d-1)*T))
d=2
(J*(t+(d-1)*T) - J+1):(J*(t+(d-1)*T))
#remove already vaccinated individuals
existing_coverage = data.frame(eligible_pop$age_group,eligible_pop$dose,rep(0,num_age_groups*num_vax_doses))
colnames(existing_coverage) = c('age_group','dose','cov_to_date')
for (t in 1:num_vax_types){
for (d in 1:num_vax_doses){
#need to sum across vaccine_coverage (as this is vaccination_history_FINAL split across age groups)
existing_coverage$cov_to_date[existing_coverage$dose == d] =
existing_coverage$cov_to_date[existing_coverage$dose == d] + vaccine_coverage[(J*(t+(d-1)*T) - J+1):(J*(t+(d-1)*T))]
}
}
existing_coverage
vaccine_coverage_end_history = rep(0, num_age_groups * num_vax_types * num_vax_doses)
for (i in 1:J){ # age
for (t in 1:T){  # vaccine type
for (d in 1:D){ # vaccine dose
C = i + J*(t+(d-1)*T) - J
if (vax_type_list[t] == "Johnson & Johnson" & d == 2){
#avoid J&J dose 2, otherwise NA and stuffs up vax_type order
} else{
vaccine_coverage_end_history[C] = vaccination_history_FINAL$coverage_this_date[
vaccination_history_FINAL$date == max(vaccination_history_FINAL$date)
& vaccination_history_FINAL$dose == d
& vaccination_history_FINAL$vaccine_type == vax_type_list[t]]/100 * multiplier[i]
}
}
}
}
vaccine_coverage_end_history
#remove already vaccinated individuals
existing_coverage = data.frame(eligible_pop$age_group,eligible_pop$dose,rep(0,num_age_groups*num_vax_doses))
colnames(existing_coverage) = c('age_group','dose','cov_to_date')
for (t in 1:num_vax_types){
for (d in 1:num_vax_doses){
#need to sum across vaccine_coverage (as this is vaccination_history_FINAL split across age groups)
existing_coverage$cov_to_date[existing_coverage$dose == d] =
existing_coverage$cov_to_date[existing_coverage$dose == d] + vaccine_coverage_end_history[(J*(t+(d-1)*T) - J+1):(J*(t+(d-1)*T))]
}
}
existing_coverage
setting
eligible_pop
eligible_pop <- eligible_pop %>% left_join(existing_coverage)
eligible_pop
eligible_pop <- eligible_pop %>% left_join(existing_coverage) %>%
mutate(test = eligible_inidividuals*(1-cov_to_date))
eligible_pop <- eligible_pop %>% left_join(existing_coverage) %>%
mutate(test = eligible_individuals *(1-cov_to_date))
eligible_pop
eligible_pop = data.frame(pop_setting)
#set max poss coverage
eligible_pop$pop = round(eligible_pop$pop * vax_strategy_max_expected_cov)
colnames(eligible_pop) = c('age_group','eligible_individuals')
#make long by dose
workshop = data.frame()
for (i in 1:num_vax_doses){
this_dose = as.data.frame(eligible_pop) %>% mutate(dose = i)
workshop = rbind(workshop,this_dose)
}
eligible_pop= workshop
#remove already vaccinated individuals
existing_coverage = data.frame(eligible_pop$age_group,eligible_pop$dose,rep(0,num_age_groups*num_vax_doses))
colnames(existing_coverage) = c('age_group','dose','cov_to_date')
for (t in 1:num_vax_types){
for (d in 1:num_vax_doses){
#need to sum across vaccine_coverage (as this is vaccination_history_FINAL split across age groups)
existing_coverage$cov_to_date[existing_coverage$dose == d] =
existing_coverage$cov_to_date[existing_coverage$dose == d] + vaccine_coverage_end_history[(J*(t+(d-1)*T) - J+1):(J*(t+(d-1)*T))]
}
}
eligible_pop <- eligible_pop %>% left_join(existing_coverage) %>%
mutate(eligible_individuals = round(eligible_individuals *(1-cov_to_date))) %>%
select(age_group,dose,eligible_individuals)
eligible_pop
