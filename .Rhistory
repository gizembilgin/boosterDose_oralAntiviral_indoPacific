#<fin>
# vaccination_history_2 <- vaccination_history %>%
#   left_join(setting_vaccine_2, by = "dose") %>%
#   select(date, vaccine_type, dose, num, prop) %>%
#   mutate(coverage_this_date_num = round(num*prop),
#          coverage_this_date = 100 * coverage_this_date_num / sum(pop)) %>%
#   group_by(dose,vaccine_type) %>%
#   arrange(date) %>%
#   mutate(doses_delivered_this_date = coverage_this_date_num - lag(coverage_this_date_num))
vaccination_history_3 <- vaccination_history_2 %>%
mutate(vaccine_mode = case_when(
vaccine_type == 'Pfizer' ~ 'mRNA',
vaccine_type == 'Moderna' ~ 'mRNA',
vaccine_type == 'AstraZeneca' ~ 'viral',
vaccine_type == 'Sinopharm' ~ 'viral',
vaccine_type == 'Sinovac' ~ 'viral',
vaccine_type == 'Johnson & Johnson' ~ 'viral'
))
vaccination_history_3 <- na.omit(vaccination_history_3) # nrows = 1365-5 = 1360
vaccination_history_POP <- vaccination_history_3 %>%
select(date,vaccine_type,vaccine_mode,dose,coverage_this_date,doses_delivered_this_date) %>%
arrange(date,vaccine_type,dose)
##_____________________________________________________________________________
##(ii/iii) Split daily doses by age and risk_____________________________________
#LIMITATION - only one risk group at a time!
vaccination_history_TRUE = data.frame()
if (risk_group_toggle == "off"){
#ASSUMPTION uniform distribution in ages 18+
age_split =  pop_setting  %>%
mutate(adult_pop = case_when(
age_group %in% c('0 to 4','5 to 9','10 to 17') ~ 0,
TRUE ~ pop)) %>%
mutate(split = adult_pop/sum(adult_pop)) %>%
select(-adult_pop)
for (j in 1:num_age_groups){
workshop = vaccination_history_POP %>%
ungroup() %>%
mutate(age_group = age_group_labels[j],
doses_delivered_this_date = doses_delivered_this_date*age_split$split[j])
vaccination_history_TRUE = rbind(vaccination_history_TRUE,workshop)
}
vaccination_history_TRUE$risk_group = "general_public"
} else if (risk_group_toggle == "on"){
if (is.na(risk_group_lower_cov_ratio)){
age_risk_split =  pop_risk_group_dn %>%
mutate(adult_pop = case_when(
age_group %in% c('0 to 4','5 to 9','10 to 17') ~ 0,
TRUE ~ pop)) %>%
mutate(split = adult_pop/sum(adult_pop)) %>%
select(-adult_pop)
if (is.na(risk_group_prioritisation_to_date) == FALSE){
workshop = age_risk_split
age_list = unique(workshop$age_group)[!(unique(workshop$age_group) %in% workshop$age_group[workshop$split == 0])]
for (i in 1:length(age_list)){
age_risk_split$split[ age_risk_split$risk_group == risk_group_name &  age_risk_split$age_group == age_list[i]] =
sum(workshop$split[ age_risk_split$age_group == age_list[i]]) * risk_group_prioritisation_to_date
age_risk_split$split[ age_risk_split$risk_group == 'general_public' &  age_risk_split$age_group == age_list[i]] =
sum(workshop$split[ age_risk_split$age_group == age_list[i]]) * (1-risk_group_prioritisation_to_date)
}
}
if (sum(age_risk_split$split) != 1){stop('(1) simulate setting line 290: dn of doses >1')}
for (r in 1:num_risk_groups){
for (j in 1:num_age_groups){
workshop = vaccination_history_POP %>% mutate(
age_group = age_group_labels[j],
risk_group = risk_group_labels[r],
doses_delivered_this_date = doses_delivered_this_date*age_risk_split$split[age_risk_split$age_group == age_group_labels[j] & age_risk_split$risk_group == risk_group_labels[r]])
vaccination_history_TRUE = rbind(vaccination_history_TRUE,workshop)
}
}
if (sum(vaccination_history_POP$doses_delivered_this_date) != sum(vaccination_history_TRUE$doses_delivered_this_date)){
stop('vaccine doses in vaccination_history_POP != total vaccine doses in vaccination_history_TRUE')
}
} else{
#calculate if lower initial coverage in risk group due to vaccine hesitancy
workshop_ratio = sum(pop_high_risk$pop[!pop_high_risk$age_group %in% c('0 to 4','5 to 9','10 to 17')])/sum(pop_general_public$pop[!pop_general_public$age_group %in% c('0 to 4','5 to 9','10 to 17')])
apply_cov_ratio = 1+risk_group_lower_cov_ratio*workshop_ratio
apply_cov_ratio = (1/apply_cov_ratio)
age_risk_split =  pop_risk_group_dn %>%
mutate(adult_pop = case_when(
age_group %in% c('0 to 4','5 to 9','10 to 17') ~ 0,
TRUE ~ pop)) %>%
group_by(risk_group) %>%
mutate(split = adult_pop/sum(adult_pop)) %>%
select(-adult_pop)
if (sum(age_risk_split$split) != 2){stop('(1) simulate setting line ~350: dn of doses >100%')}
for (r in 1:num_risk_groups){
for (j in 1:num_age_groups){
workshop = vaccination_history_POP %>% mutate(
age_group = age_group_labels[j],
risk_group = risk_group_labels[r],
doses_delivered_this_date = case_when(
risk_group_labels[r] == risk_group_name ~ doses_delivered_this_date*(1-apply_cov_ratio)*age_risk_split$split[age_risk_split$age_group == age_group_labels[j] & age_risk_split$risk_group == risk_group_labels[r]],
TRUE ~ doses_delivered_this_date*apply_cov_ratio*age_risk_split$split[age_risk_split$age_group == age_group_labels[j] & age_risk_split$risk_group == risk_group_labels[r]]))
vaccination_history_TRUE = rbind(vaccination_history_TRUE,workshop)
}
}
if (sum(vaccination_history_POP$doses_delivered_this_date) != sum(vaccination_history_TRUE$doses_delivered_this_date)){stop('(1) simulate setting line 371')}
}
}
#Let's recalculate coverage_this_date here
vaccination_history_TRUE = vaccination_history_TRUE %>%
left_join(pop_risk_group_dn, by = c("age_group", "risk_group")) %>%
group_by(risk_group,age_group,vaccine_type,dose) %>%
mutate(coverage_this_date = case_when(
pop > 0 ~ cumsum(doses_delivered_this_date)/pop,
TRUE ~ 0)) %>%
select(date,vaccine_type,vaccine_mode,dose,coverage_this_date,doses_delivered_this_date,age_group,risk_group)
#CHECK
workshop_dose1 = vaccination_history_TRUE %>% filter(dose == 1) %>%
mutate(cum_doses = cumsum(doses_delivered_this_date)) %>%
select(-doses_delivered_this_date,-coverage_this_date)
workshop_dose2 = vaccination_history_TRUE %>% filter(dose == 2) %>%
mutate(cum_doses = cumsum(doses_delivered_this_date)) %>%
select(-doses_delivered_this_date,-coverage_this_date)
timing_check = workshop_dose1 %>%
mutate(dose = 2,
date = date+vaxCovDelay$delay[vaxCovDelay$dose == 1])  %>%
rename(dose1_avaliable = cum_doses)
timing_check = workshop_dose2 %>%
left_join(timing_check) %>%
filter(cum_doses>0)
timing_check = timing_check %>%
filter(dose1_avaliable < cum_doses)
if(length(unique(timing_check$date))>0){stop('Vaccine doses 2 delivered before vaccine doses 1')}
vaccination_history_POP %>%
filter(date == max(vaccination_history_POP$date))
View(vaccination_history_2)
orkshop_dose1 = vaccination_history %>% filter(dose == 1) %>%
rename(cum_doses = num)
workshop_dose2 = vaccination_history %>% filter(dose == 2) %>%
rename(cum_doses = num)
timing_check = workshop_dose2 %>%
mutate(dose = 1,
date = date-vaxCovDelay$delay[vaxCovDelay$dose == 1])  %>%
rename(dose2_required= cum_doses)
timing_check = workshop_dose1 %>%
left_join(timing_check)
if (nrow(timing_check[is.na(timing_check$dose2_required),]) == vaxCovDelay$delay[vaxCovDelay$dose == 1]){
timing_check$dose2_required[is.na(timing_check$dose2_required)] = max(timing_check$dose2_required)
} else{
warning('issue with NA in timing_check')
}
setting_vaccine_part_one = setting_vaccine_2 %>% filter(dose == 2 & prop>0) %>% mutate(dose = 1)
part_one = timing_check %>%
rename(num=dose2_required)
workshop_dose1 = vaccination_history %>% filter(dose == 1) %>%
rename(cum_doses = num)
workshop_dose2 = vaccination_history %>% filter(dose == 2) %>%
rename(cum_doses = num)
timing_check = workshop_dose2 %>%
mutate(dose = 1,
date = date-vaxCovDelay$delay[vaxCovDelay$dose == 1])  %>%
rename(dose2_required= cum_doses)
timing_check = workshop_dose1 %>%
left_join(timing_check)
if (nrow(timing_check[is.na(timing_check$dose2_required),]) == vaxCovDelay$delay[vaxCovDelay$dose == 1]){
timing_check$dose2_required[is.na(timing_check$dose2_required)] = max(timing_check$dose2_required)
} else{
warning('issue with NA in timing_check')
}
setting_vaccine_part_one = setting_vaccine_2 %>% filter(dose == 2 & prop>0) %>% mutate(dose = 1)
part_one = timing_check %>%
rename(num=dose2_required)
part_one = timing_check
workshop_dose1 = vaccination_history %>% filter(dose == 1) %>%
rename(cum_doses = num)
workshop_dose2 = vaccination_history %>% filter(dose == 2) %>%
rename(cum_doses = num)
timing_check = workshop_dose2 %>%
mutate(dose = 1,
date = date-vaxCovDelay$delay[vaxCovDelay$dose == 1])  %>%
rename(dose2_required= cum_doses)
timing_check = workshop_dose1 %>%
left_join(timing_check)
if (nrow(timing_check[is.na(timing_check$dose2_required),]) == vaxCovDelay$delay[vaxCovDelay$dose == 1]){
timing_check$dose2_required[is.na(timing_check$dose2_required)] = max(timing_check$dose2_required,na.rm=TRUE)
} else{
warning('issue with NA in timing_check')
}
setting_vaccine_part_one = setting_vaccine_2 %>% filter(dose == 2 & prop>0) %>% mutate(dose = 1)
part_one = timing_check %>%
rename(num=dose2_required) %>%
select(-cum_doses) %>%
left_join(setting_vaccine_part_one, by = 'dose')  %>%
select(date, vaccine_type, dose, num, prop) %>%
mutate(coverage_this_date_num = round(num*prop),
coverage_this_date = 100 * coverage_this_date_num / sum(pop)) %>%
group_by(dose,vaccine_type) %>%
arrange(date) %>%
mutate(doses_delivered_this_date = coverage_this_date_num - lag(coverage_this_date_num))
#Part two: dose 1 for single-dose vaccines
setting_vaccine_part_two = setting_vaccine_2 %>% filter(prop == 0 & dose == 2) %>% mutate(dose = 1,prop = 1)
part_two = timing_check %>%
mutate(num = cum_doses - dose2_required) %>%
select(-cum_doses,-dose2_required) %>%
left_join(setting_vaccine_part_two, by = 'dose')  %>%
select(date, vaccine_type, dose, num, prop) %>%
mutate(coverage_this_date_num = round(num*prop),
coverage_this_date = 100 * coverage_this_date_num / sum(pop)) %>%
group_by(dose,vaccine_type) %>%
arrange(date) %>%
mutate(doses_delivered_this_date = coverage_this_date_num - lag(coverage_this_date_num))
#Part three: dose 2 for double-dose vaccines
part_three = vaccination_history %>%
filter(dose == 2) %>%
left_join(setting_vaccine_2, by = 'dose')  %>%
select(date, vaccine_type, dose, num, prop) %>%
mutate(coverage_this_date_num = round(num*prop),
coverage_this_date = 100 * coverage_this_date_num / sum(pop)) %>%
group_by(dose,vaccine_type) %>%
arrange(date) %>%
mutate(doses_delivered_this_date = coverage_this_date_num - lag(coverage_this_date_num))
vaccination_history_2 = rbind(part_one,part_two,part_three)
if(sum(vaccination_history_2$doses_delivered_this_date,na.rm=TRUE) != sum(vaccination_history$num[vaccination_history$date == max(vaccination_history$date)])){
stop('doses dont align between vaccination_history and vaccination_history_2')
}
#<fin>
# vaccination_history_2 <- vaccination_history %>%
#   left_join(setting_vaccine_2, by = "dose") %>%
#   select(date, vaccine_type, dose, num, prop) %>%
#   mutate(coverage_this_date_num = round(num*prop),
#          coverage_this_date = 100 * coverage_this_date_num / sum(pop)) %>%
#   group_by(dose,vaccine_type) %>%
#   arrange(date) %>%
#   mutate(doses_delivered_this_date = coverage_this_date_num - lag(coverage_this_date_num))
vaccination_history_3 <- vaccination_history_2 %>%
mutate(vaccine_mode = case_when(
vaccine_type == 'Pfizer' ~ 'mRNA',
vaccine_type == 'Moderna' ~ 'mRNA',
vaccine_type == 'AstraZeneca' ~ 'viral',
vaccine_type == 'Sinopharm' ~ 'viral',
vaccine_type == 'Sinovac' ~ 'viral',
vaccine_type == 'Johnson & Johnson' ~ 'viral'
))
vaccination_history_3 <- na.omit(vaccination_history_3) # nrows = 1365-5 = 1360
vaccination_history_POP <- vaccination_history_3 %>%
select(date,vaccine_type,vaccine_mode,dose,coverage_this_date,doses_delivered_this_date) %>%
arrange(date,vaccine_type,dose)
vaccination_history_POP %>%
filter(date == max(vaccination_history_POP$date))
vaccination_history_POP %>%
filter(date == max(vaccination_history_POP$date)) %>%
group_by(dose) %>%
summarise(sum=sum(coverage_this_date))
vaccination_history_POP %>%
filter(date == max(vaccination_history_POP$date)) %>%
mutate(vaccination_status = case_when(
vaccine_type = 'Johnson & Johnson' ~ 'full',
dose == 2 ~ 'full',
TRUE ~ 'partial'
))
vaccination_history_POP %>%
filter(date == max(vaccination_history_POP$date)) %>%
mutate(vaccination_status = case_when(
vaccine_type == 'Johnson & Johnson' ~ 'full',
dose == 2 ~ 'full',
TRUE ~ 'partial'
))
vaccination_history_POP %>%
filter(date == max(vaccination_history_POP$date)) %>%
mutate(vaccination_status = case_when(
vaccine_type == 'Johnson & Johnson' ~ 'full',
dose == 2 ~ 'full',
TRUE ~ 'partial'
)) %>%
group_by(vaccination_status) %>%
summarise(sum=sum(coverage_this_date))
vaccination_history_POP %>%
filter(date == max(vaccination_history_POP$date)) %>%
group_by(vaccine_type) %>%
summarise(prop=sum(coverage_this_date)) %>%
mutate(prop = prop/sum(vaccination_history_POP$coverage_this_date))
vaccination_history_POP %>%
filter(date == max(vaccination_history_POP$date)) %>%
group_by(vaccine_type) %>%
summarise(prop=sum(coverage_this_date))
total_doses = vaccination_history_POP %>%
group_by(vaccine_type) %>%
summarise(doses=sum(doses_delivered_this_date))
total_doses
total_doses = total_doses %>%
mutate(prop_doses doses/sum(doses))
total_doses %>%
mutate(prop_doses = doses/sum(doses))
setting_vaccine
setting_vaccine %>% select(vaccine_type,doses) %>%
mutate(prop_doses = doses/sum(doses))
total_doses = vaccination_history_POP %>%
group_by(vaccine_type) %>%
summarise(doses=sum(doses_delivered_this_date))
total_doses %>%
mutate(prop_doses = doses/sum(doses))
setting_vaccine %>% select(vaccine_type,doses) %>%
mutate(prop_doses = doses/sum(doses))
vaccination_history_POP %>%
filter(date == max(vaccination_history_POP$date)) %>%
group_by(dose) %>%
summarise(sum=sum(coverage_this_date))
vaccination_history_POP %>%
filter(date == max(vaccination_history_POP$date)) %>%
mutate(vaccination_status = case_when(
vaccine_type == 'Johnson & Johnson' ~ 'full',
dose == 2 ~ 'full',
TRUE ~ 'partial'
)) %>%
group_by(vaccination_status) %>%
summarise(sum=sum(coverage_this_date))
max(setting_vaccine$last_update)
setting_vaccine_2
part_two %>% filter(date  == max(part_two$date))
#PART TWO: dose 2 for double-dose vaccines (companion doses to part one)
part_two = vaccination_history %>%
filter(dose == 2) %>%
left_join(setting_vaccine_2, by = 'dose')  %>%
select(date, vaccine_type, dose, num, prop) %>%
mutate(coverage_this_date_num = round(num*prop),
coverage_this_date = 100 * coverage_this_date_num / sum(pop)) %>%
group_by(dose,vaccine_type) %>%
arrange(date) %>%
mutate(doses_delivered_this_date = coverage_this_date_num - lag(coverage_this_date_num))
part_two %>% filter(date  == max(part_two$date))
full_cov_part_two = sum(part_two$coverage_this_date[part_two$date == max(part_two_date)])
full_cov_part_two = sum(part_two$coverage_this_date[part_two$date == max(part_two$date)])
full_cov_part_two
full_cov_part_three = full_cov - full_cov_part_two
partial_cov_part_three = partial_cov - full_cov
#PART THREE: dose 1 for individuals who will NOT recieve a second dose
#CAUTION - hard coded as drawn from African CDC Dashboard (last update 28/09/2022)
partial_cov = 34.1
full_cov = 25.6
full_cov_part_two = sum(part_two$coverage_this_date[part_two$date == max(part_two$date)])
full_cov_part_three = full_cov - full_cov_part_two
partial_cov_part_three = partial_cov - full_cov
full_cov_part_three
partial_cov_part_three
single_dose_vaccine_ratio = full_cov_part_three/(full_cov_part_three+partial_cov_part_three)
single_dose_vaccine_ratio
setting_vaccine_part_three_pt1 = setting_vaccine_2 %>% filter(prop > 0 & dose == 2)  %>% mutate(dose = 1, prop = prop * (1-single_dose_vaccine_ratio) )
setting_vaccine_part_three_pt2 = setting_vaccine_2 %>% filter(prop == 0 & dose == 2) %>% mutate(dose = 1, prop = single_dose_vaccine_ratio)
setting_vaccine_part_three = rbind(setting_vaccine_part_three_pt1,setting_vaccine_part_three_pt2)
setting_vaccine_part_three
if(round(sum(setting_vaccine_part_three$prop),digits=4) != 1){stop('setting_vaccine_part_three total > 100%')}
workshop_dose1 = vaccination_history %>% filter(dose == 1) %>% rename(cum_doses = num)
workshop_dose2 = vaccination_history %>% filter(dose == 2) %>% rename(cum_doses = num)
timing_check = workshop_dose2 %>%
mutate(dose = 1,
date = date-vaxCovDelay$delay[vaxCovDelay$dose == 1])  %>%
rename(dose2_required= cum_doses)
timing_check = workshop_dose1 %>%
left_join(timing_check)
#correct where no dose 2 21 days after to compare to
if (nrow(timing_check[is.na(timing_check$dose2_required),]) == vaxCovDelay$delay[vaxCovDelay$dose == 1]){
timing_check$dose2_required[is.na(timing_check$dose2_required)] = max(timing_check$dose2_required,na.rm=TRUE)
} else{
warning('issue with NA in timing_check')
}
setting_vaccine_part_one = setting_vaccine_2 %>% filter(dose == 2 & prop > 0) %>% mutate(dose = 1)
part_one = timing_check %>%
rename(num=dose2_required) %>%
select(-cum_doses) %>%
left_join(setting_vaccine_part_one, by = 'dose')  %>%
select(date, vaccine_type, dose, num, prop) %>%
mutate(coverage_this_date_num = round(num*prop),
coverage_this_date = 100 * coverage_this_date_num / sum(pop)) %>%
group_by(dose,vaccine_type) %>%
arrange(date) %>%
mutate(doses_delivered_this_date = coverage_this_date_num - lag(coverage_this_date_num))
#PART TWO: dose 2 for double-dose vaccines (companion doses to part one)
part_two = vaccination_history %>%
filter(dose == 2) %>%
left_join(setting_vaccine_2, by = 'dose')  %>%
select(date, vaccine_type, dose, num, prop) %>%
mutate(coverage_this_date_num = round(num*prop),
coverage_this_date = 100 * coverage_this_date_num / sum(pop)) %>%
group_by(dose,vaccine_type) %>%
arrange(date) %>%
mutate(doses_delivered_this_date = coverage_this_date_num - lag(coverage_this_date_num))
#PART THREE: dose 1 for individuals who will NOT recieve a second dose
#CAUTION - hard coded as drawn from African CDC Dashboard (last update 28/09/2022)
partial_cov = 34.1
full_cov = 25.6
full_cov_part_two = sum(part_two$coverage_this_date[part_two$date == max(part_two$date)])
full_cov_part_three = full_cov - full_cov_part_two
partial_cov_part_three = partial_cov - full_cov
single_dose_vaccine_ratio = full_cov_part_three/(full_cov_part_three+partial_cov_part_three)
setting_vaccine_part_three_pt1 = setting_vaccine_2 %>% filter(prop > 0 & dose == 2)  %>% mutate(dose = 1, prop = prop * (1-single_dose_vaccine_ratio) )
setting_vaccine_part_three_pt2 = setting_vaccine_2 %>% filter(prop == 0 & dose == 2) %>% mutate(dose = 1, prop = single_dose_vaccine_ratio)
setting_vaccine_part_three = rbind(setting_vaccine_part_three_pt1,setting_vaccine_part_three_pt2)
if(round(sum(setting_vaccine_part_three$prop),digits=4) != 1){stop('setting_vaccine_part_three total > 100%')}
part_three = timing_check %>%
mutate(num = cum_doses - dose2_required) %>%
select(-cum_doses,-dose2_required) %>%
left_join(setting_vaccine_part_three, by = 'dose')  %>%
select(date, vaccine_type, dose, num, prop) %>%
mutate(coverage_this_date_num = round(num*prop),
coverage_this_date = 100 * coverage_this_date_num / sum(pop)) %>%
group_by(dose,vaccine_type) %>%
arrange(date) %>%
mutate(doses_delivered_this_date = coverage_this_date_num - lag(coverage_this_date_num))
vaccination_history_2 = rbind(part_one,part_two,part_three)
if(sum(vaccination_history_2$doses_delivered_this_date,na.rm=TRUE) != sum(vaccination_history$num[vaccination_history$date == max(vaccination_history$date)])){
stop('doses dont align between vaccination_history and vaccination_history_2')
}
# vaccination_history_2 <- vaccination_history %>%
#   left_join(setting_vaccine_2, by = "dose") %>%
#   select(date, vaccine_type, dose, num, prop) %>%
#   mutate(coverage_this_date_num = round(num*prop),
#          coverage_this_date = 100 * coverage_this_date_num / sum(pop)) %>%
#   group_by(dose,vaccine_type) %>%
#   arrange(date) %>%
#   mutate(doses_delivered_this_date = coverage_this_date_num - lag(coverage_this_date_num))
vaccination_history_3 <- vaccination_history_2 %>%
mutate(vaccine_mode = case_when(
vaccine_type == 'Pfizer' ~ 'mRNA',
vaccine_type == 'Moderna' ~ 'mRNA',
vaccine_type == 'AstraZeneca' ~ 'viral',
vaccine_type == 'Sinopharm' ~ 'viral',
vaccine_type == 'Sinovac' ~ 'viral',
vaccine_type == 'Johnson & Johnson' ~ 'viral'
))
vaccination_history_3 <- na.omit(vaccination_history_3) # nrows = 1365-5 = 1360
vaccination_history_POP <- vaccination_history_3 %>%
select(date,vaccine_type,vaccine_mode,dose,coverage_this_date,doses_delivered_this_date) %>%
arrange(date,vaccine_type,dose)
vaccination_history_POP %>%
filter(date == max(vaccination_history_POP$date)) %>%
group_by(dose) %>%
summarise(sum=sum(coverage_this_date))
vaccination_history_POP %>%
filter(date == max(vaccination_history_POP$date)) %>%
mutate(vaccination_status = case_when(
vaccine_type == 'Johnson & Johnson' ~ 'full',
dose == 2 ~ 'full',
TRUE ~ 'partial'
)) %>%
group_by(vaccination_status) %>%
summarise(sum=sum(coverage_this_date))
vaccination_history_POP %>%
filter(date == max(vaccination_history_POP$date)) %>%
mutate(full = case_when(
vaccine_type == 'Johnson & Johnson' ~ 'full',
dose == 2 ~ 'full'
)) %>%
group_by(vaccination_status) %>%
summarise(sum=sum(coverage_this_date))
vaccination_history_POP %>%
filter(date == max(vaccination_history_POP$date)) %>%
mutate(full = case_when(
vaccine_type == 'Johnson & Johnson' ~ 'full',
dose == 2 ~ 'full',
TRUE ~ 'partial'
)) %>%
group_by(full) %>%
summarise(sum=sum(coverage_this_date))
vaccination_history_POP %>%
filter(date == max(vaccination_history_POP$date)) %>%
mutate(full = case_when(
vaccine_type == 'Johnson & Johnson' ~ 'full',
dose == 2 ~ 'full'
)) %>%
group_by(full) %>%
summarise(sum=sum(coverage_this_date))
vaccination_history_POP %>%
filter(date == max(vaccination_history_POP$date)) %>%
mutate(vaccination_status = case_when(
vaccine_type == 'Johnson & Johnson' ~ 'full',
dose == 2 ~ 'full',
TRUE ~ 'partial'
)) %>%
group_by(vaccination_status) %>%
summarise(sum=sum(coverage_this_date))
vaccination_history_POP %>%
filter(date == max(vaccination_history_POP$date)) %>%
group_by(dose) %>%
summarise(sum=sum(coverage_this_date))
vaccination_history_POP %>%
filter(date == max(vaccination_history_POP$date)) %>%
mutate(vaccination_status = case_when(
vaccine_type == 'Johnson & Johnson' ~ 'full',
dose == 2 ~ 'full',
TRUE ~ 'partial'
)) %>%
group_by(vaccination_status) %>%
summarise(sum=sum(coverage_this_date))
vaccination_history_POP %>%
filter(date == max(vaccination_history_POP$date)) %>%
group_by(dose) %>%
summarise(sum=sum(coverage_this_date))
vaccination_history_POP %>%
filter(date == max(vaccination_history_POP$date)) %>%
mutate(vaccination_status = case_when(
vaccine_type == 'Johnson & Johnson' ~ 'full',
dose == 2 ~ 'full',
TRUE ~ 'not complete'
)) %>%
group_by(vaccination_status) %>%
summarise(sum=sum(coverage_this_date))
vaccination_history_POP %>%
filter(date == max(vaccination_history_POP$date)) %>%
group_by(dose) %>%
summarise(sum=sum(coverage_this_date))
total_doses = vaccination_history_POP %>%
group_by(vaccine_type) %>%
summarise(doses=sum(doses_delivered_this_date))
total_doses %>%
mutate(prop_doses = doses/sum(doses))
setting_vaccine %>% select(vaccine_type,doses) %>%
mutate(prop_doses = doses/sum(doses))
source("C:/Users/u6044061/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/(0)_fitting_model.R", echo=TRUE)
source("C:/Users/u6044061/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/(0)_fitting_model.R", echo=TRUE)
warnings()
