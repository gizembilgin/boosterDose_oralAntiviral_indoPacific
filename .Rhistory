),variant=VOC)
source("~/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/(function)_severe_outcome_proj.R", echo=TRUE)
source("~/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/(function)_severe_outcome_proj.R", echo=TRUE)
source("~/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/(function)_severe_outcome_proj.R", echo=TRUE)
VOC != 'WT'
VOC = 'WT'
if (VOC != 'WT'){
#####(2/?) Load variant-specific multipliers
#these multipliers are WT to VOC
workshop <- read.csv('1_inputs/severe_outcome_variant_multiplier.csv')
## if stochastic then multiplier = rand in uniform(lower_est,upper_est)
#<interlude for omicron>
workshop2 <- read.csv('1_inputs/severe_outcome_variant_multiplier_complex.csv') #omicron vs delta
omicron_basis = workshop[workshop$variant == 'delta',]
omicron_basis$variant = 'omicron'
omicron_basis$source = paste(omicron_basis$source,'/',workshop2$source)
omicron_basis <- omicron_basis %>%
mutate(multiplier = case_when(
outcome == 'hosp' ~ multiplier*workshop2$multiplier[workshop2$outcome == 'hosp'],
outcome %in% c('ICU','death') ~ multiplier*workshop2$multiplier[workshop2$outcome == 'hosp_long']))
#NOTE: assumption here that hosp_long proportional to ICU and death
#NOTE: upper and lower limits not adjusted as assumed used above
workshop = rbind(workshop,omicron_basis)
#<fin>
workshop = workshop[workshop$variant == VOC,c('outcome','multiplier')]
#_______________________________________________________________________________
#####(3/?) Calculating population-level variant-specific estimate of severe outcomes
#could be made faster, but assumptions less obvious, by including a var that is var_proxy to join on
severe_outcome_1 <- severe_outcome_0 %>%
mutate(percentage = case_when(
outcome == 'IFR' ~ percentage * workshop$multiplier[workshop$outcome == 'death'],
outcome == 'ISR' ~ percentage * workshop$multiplier[workshop$outcome == 'ICU'], #assumption
outcome == 'hosp' ~ percentage * workshop$multiplier[workshop$outcome == 'hosp']
),variant=VOC)
} else if (VOC == 'WT'){
severe_outcome_1 = severe_outcome_0 %>% mutate(variant = VOC)
}
source("~/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/(function)_severe_outcome_proj.R", echo=TRUE)
source("~/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/(function)_severe_outcome_proj.R", echo=TRUE)
source("~/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/(function)_severe_outcome_proj.R", echo=TRUE)
source("~/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/(function)_severe_outcome_proj.R", echo=TRUE)
severe_outcome_0 <- severe_outcome_0[severe_outcome_0$outcome %in% c('IFR','ISR','hosp') &
country == setting
,-c(5)]
severe_outcome_0 <- severe_outcome_0[severe_outcome_0$outcome %in% c('IFR','ISR','hosp') &
severe_outcome_0$country == setting
,-c(5)]
severe_outcome_0 <- severe_outcome_0[severe_outcome_0$outcome %in% c('IFR','ISR','hosp') &
severe_outcome_0$country == setting
,-c(1,5)]
source("~/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/(function)_severe_outcome_proj.R", echo=TRUE)
source("~/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/(function)_severe_outcome_proj.R", echo=TRUE)
#####(4/?) Calculating age-specific estimates of severe outcomes
# COMEBACK - these are dummy values, and NOT country-specific
workshop <- read.csv('1_inputs/severe_outcome_age_distribution.csv')
#####(4/?) Calculating age-specific estimates of severe outcomes
# COMEBACK - these are dummy values, and NOT country-specific
workshop <- read.csv('1_inputs/severe_outcome_age_distribution.csv')
workshop <- workshop[,c(1,2,3)]
severe_outcome_2 <- severe_outcome_1 %>%
left_join(workshop)
View(severe_outcome_2)
severe_outcome_2 <- severe_outcome_2 %>% mutate(test=percentage*RR)
severe_outcome_2 <- severe_outcome_2 %>% mutate(percentage=percentage*RR)
severe_outcome_2 <- severe_outcome_2 %>%
select(outcome,outcome_long,age_group,percentage)
rm(severe_outcome_0,severe_outcome_1)
View(incidence_log_unedited)
View(incidence_log_unedited)
colnames(incidence_log_unedited)
workshop = incidence_log_unedited[,-c('time','date','daily_cases')]
workshop = subset(incidence_log_unedited, select=-c('time','date','daily_cases'))
workshop = subset(incidence_log_unedited, select=-c(time,date,daily_cases))
View(VR_this_step)
View(workshop)
colnames(incidence_log_unedited)
colnames(workshop)
save = incidence_log_unedited$date
save = incidence_log_unedited[,c(date,daily_cases)]
save = incidence_log_unedited[,c('date','daily_cases')]
View(save)
outcomes_list <- unique(severe_outcome_2$outcome)
outcomes_list
workshop <- read.csv('1_inputs/severe_outcome_age_distribution.csv')
workshop <- workshop[,c(1,2,3)] #remove source and explanation columns
severe_outcome_2 <- severe_outcome_1 %>%  left_join(workshop)
severe_outcome_2 <- severe_outcome_2 %>% mutate(percentage=percentage*RR)
severe_outcome_FINAL <- severe_outcome_2 %>%
select(outcome,outcome_long,age_group,percentage)
outcomes_list <- unique(severe_outcome_FINAL$outcome)
rm(severe_outcome_0,severe_outcome_1,severe_outcome_2)
save = incidence_log_unedited[,c('date','daily_cases')]
workshop = subset(incidence_log_unedited, select=-c(time,date,daily_cases))
for (i in 1:length(outcomes_list)){ #do for every outcome
outcome = outcomes_list[i]
this_health_outcome = severe_outcome_FINAL[severe_outcome_FINAL$outcome == outcome,c('percentage')]
}
this_health_outcome
num_vax_classes
#COMEBACK - would apply VE but for now
this_health_outcome = rep(this_health_outcome,num_vax_classes)
this_health_outcome
test = workshop * this_health_outcome
test
View(test)
this_health_outcome = severe_outcome_FINAL[severe_outcome_FINAL$outcome == outcome,c('percentage')]
this_health_outcome = this_health_outcome/100 #from % -> between 0-1
this_health_outcome
#COMEBACK - would apply VE but for now
this_health_outcome = rep(this_health_outcome,num_vax_classes)
this_health_outcome
round(test,digits=2)
#COMEBACK - would apply VE but for now
this_health_outcome = rep(this_health_outcome,num_vax_classes)
test = workshop * this_health_outcome
test = round(workshop * this_health_outcome,digits=2)
test = sweep(workshop, MARGIN=2, this_health_outcome, `*`)
test = sweep(workshop, this_health_outcome, `*`)
ncol(workshop)
ncol(this_health_outcome)
this_health_outcome
outcome = outcomes_list[i]
this_health_outcome = severe_outcome_FINAL[severe_outcome_FINAL$outcome == outcome,c('percentage')]
this_health_outcome = this_health_outcome/100 #from % -> between 0-1
#COMEBACK - would apply VE but for now
this_health_outcome = rep(this_health_outcome,num_vax_classes)
this_health_outcome
test = sweep(workshop, this_health_outcome, `*`)
workshop[1,]
workshop[1,] * this_health_outcome
this_health_outcome
for (i in 1:nrow(workshop)){
#COMEBACK - could be faster!
test[i,] = workshop[i,] * this_health_outcome
}
test = rowSums(workshop)
for (i in 1:nrow(workshop)){
#COMEBACK - could be faster!
workshop[i,] = workshop[i,] * this_health_outcome
}
test = rowSums(workshop)
colnames(test) = outcome
test = as.data.frame(rowSums(workshop))
colnames(test) = outcome
severe_outcome_proj = incidence_log_unedited[,c('date','daily_cases')]
workshop = subset(incidence_log_unedited, select=-c(time,date,daily_cases))
for (i in 1:length(outcomes_list)){ #do for every outcome
outcome = outcomes_list[i]
this_health_outcome = severe_outcome_FINAL[severe_outcome_FINAL$outcome == outcome,c('percentage')]
this_health_outcome = this_health_outcome/100 #from % -> between 0-1
#COMEBACK - would apply VE but for now
this_health_outcome = rep(this_health_outcome,num_vax_classes)
for (i in 1:nrow(workshop)){
#COMEBACK - could be faster!
workshop[i,] = workshop[i,] * this_health_outcome
}
outcome_result = as.data.frame(rowSums(workshop))
colnames(test) = outcome_result
severe_outcome_proj = cbind(severe_outcome_proj,outcome_result)
}
View(severe_outcome_proj)
outcome_proj = incidence_log_unedited[,c('date','daily_cases')]
workshop = subset(incidence_log_unedited, select=-c(time,date,daily_cases))
for (i in 1:length(outcomes_list)){ #do for every outcome
outcome = outcomes_list[i]
this_health_outcome = severe_outcome_FINAL[severe_outcome_FINAL$outcome == outcome,c('percentage')]
this_health_outcome = this_health_outcome/100 #from % -> between 0-1
#COMEBACK - would apply VE but for now
this_health_outcome = rep(this_health_outcome,num_vax_classes)
for (i in 1:nrow(workshop)){
#COMEBACK - could be faster!
workshop[i,] = workshop[i,] * this_health_outcome
}
outcome_result = as.data.frame(rowSums(workshop))
colnames(outcome_result) = outcome_result
outcome_proj = cbind(outcome_proj,outcome_result)
}
View(outcome_proj)
outcome_result = as.data.frame(rowSums(workshop))
View(outcome_result)
colnames(outcome_result) = outcome_result
colnames(outcome_result) = outcome
outcome_proj = incidence_log_unedited[,c('date','daily_cases')]
workshop = subset(incidence_log_unedited, select=-c(time,date,daily_cases))
for (i in 1:length(outcomes_list)){ #do for every outcome
outcome = outcomes_list[i]
this_health_outcome = severe_outcome_FINAL[severe_outcome_FINAL$outcome == outcome,c('percentage')]
this_health_outcome = this_health_outcome/100 #from % -> between 0-1
#COMEBACK - would apply VE but for now
this_health_outcome = rep(this_health_outcome,num_vax_classes)
for (i in 1:nrow(workshop)){
#COMEBACK - could be faster!
workshop[i,] = workshop[i,] * this_health_outcome
}
outcome_result = as.data.frame(rowSums(workshop))
colnames(outcome_result) = outcome
outcome_proj = cbind(outcome_proj,outcome_result)
}
View(severe_outcome_FINAL)
source("~/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/(function)_severe_outcome_proj.R", echo=TRUE)
View(severe_outcome_1)
outcomes_list
View(severe_outcome_FINAL)
outcome_proj = incidence_log_unedited[,c('date','daily_cases')]
workshop = subset(incidence_log_unedited, select=-c(time,date,daily_cases))
for (i in 1:length(outcomes_list)){ #do for every outcome
outcome = outcomes_list[i]
this_health_outcome = severe_outcome_FINAL[severe_outcome_FINAL$outcome == outcome,c('percentage')]
this_health_outcome = this_health_outcome/100 #from % -> between 0-1
#COMEBACK - would apply VE but for now
this_health_outcome = rep(this_health_outcome,num_vax_classes)
for (i in 1:nrow(workshop)){
#COMEBACK - could be faster!
workshop_2[i,] = workshop[i,] * this_health_outcome
}
outcome_result = as.data.frame(rowSums(workshop_2))
colnames(outcome_result) = outcome
outcome_proj = cbind(outcome_proj,outcome_result)
}
outcome_proj = incidence_log_unedited[,c('date','daily_cases')]
workshop = subset(incidence_log_unedited, select=-c(time,date,daily_cases))
for (i in 1:length(outcomes_list)){ #do for every outcome
outcome = outcomes_list[i]
workshop_temp = workshop
this_health_outcome = severe_outcome_FINAL[severe_outcome_FINAL$outcome == outcome,c('percentage')]
this_health_outcome = this_health_outcome/100 #from % -> between 0-1
#COMEBACK - would apply VE but for now
this_health_outcome = rep(this_health_outcome,num_vax_classes)
for (i in 1:nrow(workshop)){
#COMEBACK - could be faster!
workshop_temp[i,] = workshop[i,] * this_health_outcome
}
outcome_result = as.data.frame(rowSums(workshop_temp))
colnames(outcome_result) = outcome
outcome_proj = cbind(outcome_proj,outcome_result)
}
outcome_proj_cum = outcome_proj
for (i in 2:ncol(outcome_proj)){
outcome_proj_cum[,i] = cumsum(outcome_proj_cum[,i])
}
View(outcome_proj_cum)
outcome_proj_cum = outcome_proj
for (i in 2:ncol(outcome_proj)){
outcome_proj_cum[,i] = round(cumsum(outcome_proj_cum[,i]),digits=4)
}
grid.arrange(plot1, plot2, plot3, layout_matrix = lay)
##### (1/?) Load population-level wild-type estimate of severe outcomes
severe_outcome_0 <- read.csv('1_inputs/severe_outcome_country_level.csv')
View(severe_outcome_0)
severe_outcome_0 <- severe_outcome_0[severe_outcome_0$outcome %in% c('death','severe_disease','hosp') &
severe_outcome_0$country == setting
,-c(1,5)]
source("~/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/(function)_severe_outcome_proj.R", echo=TRUE)
outcome_proj = incidence_log_unedited[,c('date','daily_cases')]
workshop = subset(incidence_log_unedited, select=-c(time,date,daily_cases))
for (i in 1:length(outcomes_list)){ #do for every outcome
outcome = outcomes_list[i]
workshop_temp = workshop
this_health_outcome = severe_outcome_FINAL[severe_outcome_FINAL$outcome == outcome,c('percentage')]
this_health_outcome = this_health_outcome/100 #from % -> between 0-1
#COMEBACK - would apply VE but for now
this_health_outcome = rep(this_health_outcome,num_vax_classes)
for (i in 1:nrow(workshop)){
#COMEBACK - could be faster!
workshop_temp[i,] = workshop[i,] * this_health_outcome
}
outcome_result = as.data.frame(rowSums(workshop_temp))
colnames(outcome_result) = outcome
outcome_proj = cbind(outcome_proj,outcome_result)
}
outcome_proj_cum = outcome_proj
for (i in 2:ncol(outcome_proj)){
outcome_proj_cum[,i] = round(cumsum(outcome_proj_cum[,i]),digits=4)
}
severe_outcome_proj <- function(incidence_log_unedited){
outcome_proj = incidence_log_unedited[,c('date','daily_cases')]
workshop = subset(incidence_log_unedited, select=-c(time,date,daily_cases))
for (i in 1:length(outcomes_list)){ #do for every outcome
outcome = outcomes_list[i]
workshop_temp = workshop
this_health_outcome = severe_outcome_FINAL[severe_outcome_FINAL$outcome == outcome,c('percentage')]
this_health_outcome = this_health_outcome/100 #from % -> between 0-1
#COMEBACK - would apply VE but for now
this_health_outcome = rep(this_health_outcome,num_vax_classes)
for (i in 1:nrow(workshop)){
#COMEBACK - could be faster!
workshop_temp[i,] = workshop[i,] * this_health_outcome
}
outcome_result = as.data.frame(rowSums(workshop_temp))
colnames(outcome_result) = outcome
outcome_proj = cbind(outcome_proj,outcome_result)
}
outcome_proj_cum = outcome_proj
for (i in 2:ncol(outcome_proj)){
outcome_proj_cum[,i] = round(cumsum(outcome_proj_cum[,i]),digits=4)
}
}
source("~/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/(function)_severe_outcome_proj.R", echo=TRUE)
outcome_proj = incidence_log_unedited[,c('date','daily_cases')]
workshop = subset(incidence_log_unedited, select=-c(time,date,daily_cases))
for (i in 1:length(outcomes_list)){ #do for every outcome
outcome = outcomes_list[i]
workshop_temp = workshop
this_health_outcome = severe_outcome_FINAL[severe_outcome_FINAL$outcome == outcome,c('percentage')]
this_health_outcome = this_health_outcome/100 #from % -> between 0-1
#COMEBACK - would apply VE but for now
this_health_outcome = rep(this_health_outcome,num_vax_classes)
for (i in 1:nrow(workshop)){
#COMEBACK - could be faster!
workshop_temp[i,] = workshop[i,] * this_health_outcome
}
outcome_result = as.data.frame(rowSums(workshop_temp))
colnames(outcome_result) = outcome
outcome_proj = cbind(outcome_proj,outcome_result)
}
outcome_proj_cum = outcome_proj
for (i in 2:ncol(outcome_proj)){
outcome_proj_cum[,i] = round(cumsum(outcome_proj_cum[,i]),digits=4)
}
outcome_proj_cum_long = rbind(outcome_proj_cum[,c(1,2)],
outcome_proj_cum[,c(1,3)],
outcome_proj_cum[,c(1,4)],
outcome_proj_cum[,c(1,5)])
outcome_proj_cum_long = data.frame()
outcome_proj_cum_long = data.frame()
for (i in 2:ncol(outcome_proj_cum)){
interim = outcome_proj_cum[,c(1,i)]
colnames(interim) = c('date','proj')
interim$outcome = colnames(outcome_proj_cum)[i]
outcome_proj_cum_long = rbind(outcome_proj_cum_long,interim)
}
View(outcome_proj_cum)
View(outcome_proj_cum_long)
outcome_proj_long = data.frame()
ggplot() +
geom_line(data=outcome_proj_long,aes(x=date,y=proj,color=outcome),na.rm=TRUE) +
xlab("") +
scale_x_date(date_breaks="1 month", date_labels="%b") +
#ylim(0,40) +
ylab("daily cases % whole pop") +
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
axis.line = element_line(color = 'black'))
ggplot() +
geom_line(data=outcome_proj_long,aes(x=date,y=proj,color=outcome),na.rm=TRUE)
ggplot() +
geom_line(data=outcome_proj_long,aes(x=date,y=proj,color=as.factor(outcome)),na.rm=TRUE)
source("~/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/(plot)_incid by age and vax status.R", echo=TRUE)
ggplot() +
geom_line(data=age_plot,aes(x=date,y=incidence_rate,color=as.factor(age_group)),na.rm=TRUE)
View(age_plot)
View(outcome_proj_long)
outcome_proj_long = data.frame()
for (i in 2:ncol(outcome_proj)){
interim = outcome_proj[,c(1,i)]
colnames(interim) = c('date','proj')
interim$outcome = colnames(outcome_proj)[i]
outcome_proj_long = rbind(outcome_proj_long,interim)
}
interim = outcome_proj[,c(1,i)]
View(interim)
colnames(interim) = c('date','proj')
interim$outcome = colnames(outcome_proj)[i]
outcome_proj_long = rbind(outcome_proj_long,interim)
outcome_proj_long = data.frame()
View(outcome_proj_long)
interim = outcome_proj[,c(1,i)]
colnames(interim) = c('date','proj')
interim$outcome = colnames(outcome_proj)[i]
outcome_proj_long = rbind(outcome_proj_long,interim)
ggplot() +
geom_line(data=outcome_proj_long_cum,aes(x=date,y=proj,color=as.factor(outcome)),na.rm=TRUE)
ggplot() +
geom_line(data=outcome_proj_cum_long,aes(x=date,y=proj,color=as.factor(outcome)),na.rm=TRUE) +
xlab("") +
scale_x_date(date_breaks="1 month", date_labels="%b") +
#ylim(0,6) +
ylab("Reff") +
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
axis.line = element_line(color = 'black'))
ggplot() +
geom_line(data=outcome_proj_cum_long,aes(x=date,y=proj,color=as.factor(outcome)),na.rm=TRUE) +
xlab("") +
scale_x_date(date_breaks="1 month", date_labels="%b") +
ylab("incidence") +
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
axis.line = element_line(color = 'black'))
outcome_proj_long = data.frame()
for (i in 2:ncol(outcome_proj)){
interim = outcome_proj[,c(1,i)]
colnames(interim) = c('date','proj')
interim$outcome = colnames(outcome_proj)[i]
outcome_proj_long = rbind(outcome_proj_long,interim)
}
View(outcome_proj_long)
plot1 <-
ggplot() +
geom_line(data=outcome_proj_long,aes(x=date,y=proj,color=as.factor(outcome)),na.rm=TRUE) +
xlab("") +
scale_x_date(date_breaks="1 month", date_labels="%b") +
#ylim(0,40) +
ylab("daily cases % whole pop") +
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
axis.line = element_line(color = 'black'))
plot2 <- ggplot() +
geom_line(data=outcome_proj_cum_long,aes(x=date,y=proj,color=as.factor(outcome)),na.rm=TRUE) +
xlab("") +
scale_x_date(date_breaks="1 month", date_labels="%b") +
ylab("incidence") +
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
axis.line = element_line(color = 'black'))
grid.arrange(plot1, plot2)
plot1 <-
ggplot() +
geom_line(data=outcome_proj_long,aes(x=date,y=proj,color=as.factor(outcome)),na.rm=TRUE) +
xlab("") +
scale_x_date(date_breaks="1 month", date_labels="%b") +
#ylim(0,40) +
ylab("incidence") +
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
axis.line = element_line(color = 'black'))
plot2 <- ggplot() +
geom_line(data=outcome_proj_cum_long,aes(x=date,y=proj,color=as.factor(outcome)),na.rm=TRUE) +
xlab("") +
scale_x_date(date_breaks="1 month", date_labels="%b") +
ylab("cumulative incidence") +
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
axis.line = element_line(color = 'black'))
grid.arrange(plot1, plot2)
plot1 <-
ggplot() +
geom_line(data=outcome_proj_long[outcome_proj_long$outcome != 'daily_cases',],aes(x=date,y=proj,color=as.factor(outcome)),na.rm=TRUE) +
xlab("") +
scale_x_date(date_breaks="1 month", date_labels="%b") +
#ylim(0,40) +
ylab("incidence") +
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
axis.line = element_line(color = 'black'))
plot2 <- ggplot() +
geom_line(data=outcome_proj_cum_long[outcome_proj_cum_long$outcome != 'daily_cases',],aes(x=date,y=proj,color=as.factor(outcome)),na.rm=TRUE) +
xlab("") +
scale_x_date(date_breaks="1 month", date_labels="%b") +
ylab("cumulative incidence") +
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
axis.line = element_line(color = 'black'))
grid.arrange(plot1, plot2)
View(severe_outcome_FINAL)
pop_orig <- read.csv("C:/Users/gizem/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/inputs/pop_estimates.csv", header=TRUE)
pop_setting_orig <- pop_orig[pop_orig$country == setting,]
pop_setting <- pop_setting_orig %>%
mutate(agegroup = cut(age,breaks = age_groups, include.lowest = T,labels = age_group_labels))
View(pop_setting_orig)
View(pop_setting)
#####(5/6) Calculating YLL from death
#requires average age in age-group and life_expectancy of this study setting
workshop <- pop_setting_orig %>%
mutate(agegroup = cut(age,breaks = age_groups, include.lowest = T,labels = age_group_labels))
View(workshop)
workshop_sum <- aggregate(workshop$population, by=list(category=workshop$agegroup), FUN=sum)
colnames(workshop_sum) <-c('agegroup','pop')
View(workshop)
View(workshop_sum)
workshop <- workshop %>% left_join(workshop_sum)
workshop <- workshop %>% mutate(weight=population/pop)
round(workshop$weight)
round(workshop$weight,digits=2)
workshop <- workshop %>% mutate(weight=population/pop,
age_weight = (age+0.5)*weight)
workshop <- aggregate(workshop$age_weight, by=list(category=workshop$agegroup), FUN=sum)
colnames(workshop_sum) <-c('agegroup','average_age')
lifeExpect <- read.csv('1_inputs/UN_life_expectancy_est.csv')
lifeExpect = [lifeExpect$setting == setting,]
lifeExpect = lifeExpect[lifeExpect$setting == setting,]
lifeExpect <- read.csv('1_inputs/UN_life_expectancy_est.csv')
lifeExpect = lifeExpect[lifeExpect$setting == setting,]
View(lifeExpect)
lifeExpect <- read.csv('1_inputs/UN_life_expectancy_est.csv')
lifeExpect = lifeExpect[lifeExpect$setting == setting,]
colnames(workshop) <-c('agegroup','average_age')
workshop <- workshop %>% mutate(
closest = min(abs(average_age-lifeExpect$age))
)
workshop <- workshop %>% mutate(
closest = min(abs(rep(average_age,nrow(lifeExpect))-lifeExpect$age))
)
min(abs(rep(average_age,nrow(lifeExpect))-lifeExpect$age))
