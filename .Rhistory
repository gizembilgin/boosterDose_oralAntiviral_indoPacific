#these multipliers are WT to VOC
workshop <- read.csv('1_inputs/severe_outcome_variant_multiplier.csv')
## if stochastic then multiplier = rand in uniform(lower_est,upper_est)
#<interlude for omicron>
workshop2 <- read.csv('1_inputs/severe_outcome_variant_multiplier_complex.csv') #omicron vs delta
omicron_basis = workshop[workshop$variant == 'delta',]
omicron_basis$variant = 'omicron'
omicron_basis$source = paste(omicron_basis$source,'/',workshop2$source)
omicron_basis <- omicron_basis %>%
mutate(multiplier = case_when(
outcome == 'hosp' ~ multiplier*workshop2$multiplier[workshop2$outcome == 'hosp'],
outcome %in% c('ICU','death') ~ multiplier*workshop2$multiplier[workshop2$outcome == 'hosp_long']))
#NOTE: assumption here that hosp_long proportional to ICU and death
#NOTE: upper and lower limits not adjusted as assumed used above
workshop = rbind(workshop,omicron_basis)
#<fin>
workshop = workshop[workshop$variant == VOC,c('outcome','multiplier')]
#_______________________________________________________________________________
#####(3/6) Calculating population-level variant-specific estimate of severe outcomes
#could be made faster, but assumptions less obvious, by including a var that is var_proxy to join on
severe_outcome_1 <- severe_outcome_0 %>%
mutate(percentage = case_when(
outcome == 'death' ~ percentage * workshop$multiplier[workshop$outcome == 'death'],
outcome == 'severe_disease' ~ percentage * workshop$multiplier[workshop$outcome == 'ICU'], #assumption
outcome == 'hosp' ~ percentage * workshop$multiplier[workshop$outcome == 'hosp']
),variant=VOC)
rm (omicron_basis,workshop2)
} else if (VOC == 'WT'){
severe_outcome_1 = severe_outcome_0 %>% mutate(variant = VOC)
}
#_______________________________________________________________________________
#####(4/6) Calculating age-specific estimates of severe outcomes
# COMEBACK - these are dummy values, and NOT country-specific
workshop <- read.csv('1_inputs/severe_outcome_age_distribution.csv')
workshop <- workshop[,c(1,2,3)] #remove source and explanation columns
severe_outcome_2 <- severe_outcome_1 %>%  left_join(workshop)
severe_outcome_2 <- severe_outcome_2 %>% mutate(percentage=percentage*RR)
severe_outcome_FINAL <- severe_outcome_2 %>%
select(outcome,outcome_long,age_group,percentage) %>%
mutate(age_group = gsub(" to ", "-", age_group))
severe_outcome_FINAL$age_group[severe_outcome_FINAL$age_group == '60+'] = '60-100'
rm(severe_outcome_0,severe_outcome_2)
#_______________________________________________________________________________
#####(5/6) Calculating YLL from death
#requires average age in age-group and life_expectancy of this study setting
workshop <- pop_setting_orig %>%
mutate(agegroup = cut(age,breaks = age_groups, include.lowest = T,labels = age_group_labels))
workshop_sum <- aggregate(workshop$population, by=list(category=workshop$agegroup), FUN=sum)
colnames(workshop_sum) <-c('agegroup','pop')
workshop <- workshop %>% left_join(workshop_sum)
workshop <- workshop %>% mutate(weight=population/pop,
age_weight = (age+0.5)*weight)
workshop <- aggregate(workshop$age_weight, by=list(category=workshop$agegroup), FUN=sum)
colnames(workshop) <-c('agegroup','average_age')
lifeExpect <- read.csv('1_inputs/UN_life_expectancy_est.csv')
lifeExpect = lifeExpect[lifeExpect$setting == setting,]
closest_age = data.frame()
for (i in 1:nrow(workshop)){
closest_age = rbind(closest_age,lifeExpect$age[which.min(abs(lifeExpect$age-workshop$average_age[i]))])
}
colnames(closest_age) = c('age')
workshop = cbind(workshop,closest_age)
workshop <- workshop %>%
left_join(lifeExpect) %>%
select(agegroup,average_age,age,life_expectancy)
#"The average number of remaining years of life expected by a hypothetical cohort of individuals alive at age x
# who would be subject during the remaining of their lives to the mortality rates of a given period."
# https://population.un.org/wpp/Download/Standard/Mortality/
YLL_FINAL = workshop %>%
select(agegroup,life_expectancy)
colnames(YLL_FINAL) = c('age_group','YLL')
YLL_row = severe_outcome_FINAL[severe_outcome_FINAL$outcome == 'death',]
YLL_row$outcome = 'YLL'
YLL_row$outcome_long = 'YLL per death in this age_group multiplied by death rate'
YLL_row <- YLL_row %>% left_join(YLL_FINAL) %>%
mutate(percentage = percentage*YLL)
YLL_row = YLL_row[,c(1:4)]
severe_outcome_FINAL = rbind(severe_outcome_FINAL,YLL_row)
severe_outcome_FINAL = severe_outcome_FINAL %>%
mutate(outcome_VE = case_when(
outcome %in% c('death','YLL') ~ 'death',
outcome %in% c('hosp','severe_disease') ~ 'hospitalisation'
))
#_______________________________________________________________________________
###<interim> workshop - calculation VE against severe outcomes by day
VE_tracker = data.frame()
for (outcome in c('death','hospitalisation')){
for (day in 1:(model_weeks*7) ){
workshop = VE_time_step(strain_inital,date_start+day,outcome)
workshop = workshop %>% mutate(date=day,
outcome_VE=outcome)
VE_tracker = rbind(VE_tracker,workshop)
}
}
VE_tracker$date = date_start + VE_tracker$date
workshop = crossing(dose = 0,
vaccine_type = "unvaccinated",
age_group = age_group_labels,
VE = 0,
date = unique(VE_tracker$date),
outcome_VE=unique(VE_tracker$outcome))
VE_tracker = rbind(VE_tracker,workshop)
severe_outcome_FINAL = severe_outcome_FINAL %>%
left_join(VE_tracker)
severe_outcome_FINAL = severe_outcome_FINAL %>%
mutate(percentage = percentage*(1-VE)) %>%
select(date,outcome,outcome_long,age_group,vaccine_type,dose,percentage)
source("~/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/workshop - incidence log 'tidy'.R", echo=TRUE)
severe_outcome_FINAL[severe_outcome_FINAL$date == as.Date('2022-04-02')]
severe_outcome_FINAL[severe_outcome_FINAL$date == as.Date('2022-04-02'),]
severe_outcome_FINAL[severe_outcome_FINAL$date == as.Date('2022-04-02') & severe_outcome_FINAL$age_group == '5-19',]
severe_outcome_FINAL[severe_outcome_FINAL$date == as.Date('2022-04-02') & severe_outcome_FINAL$age_group == '60-100',]
##### (1/6) Load population-level wild-type estimate of severe outcomes
severe_outcome_0 <- read.csv('1_inputs/severe_outcome_country_level.csv')
View(severe_outcome_0)
VOC = strain_inital
##### (1/6) Load population-level wild-type estimate of severe outcomes
severe_outcome_0 <- read.csv('1_inputs/severe_outcome_country_level.csv')
severe_outcome_0$percentage = severe_outcome_0$percentage/100 #make it between 0-1
severe_outcome_0 <- severe_outcome_0[severe_outcome_0$outcome %in% c('death','severe_disease','hosp') &
severe_outcome_0$country == setting
,-c(1,5)]
#dropping ICU and ICR as we won't use them, removing source and country column
#_______________________________________________________________________________
if (VOC != 'WT'){
#####(2/6) Load variant-specific multipliers
#these multipliers are WT to VOC
workshop <- read.csv('1_inputs/severe_outcome_variant_multiplier.csv')
## if stochastic then multiplier = rand in uniform(lower_est,upper_est)
#<interlude for omicron>
workshop2 <- read.csv('1_inputs/severe_outcome_variant_multiplier_complex.csv') #omicron vs delta
omicron_basis = workshop[workshop$variant == 'delta',]
omicron_basis$variant = 'omicron'
omicron_basis$source = paste(omicron_basis$source,'/',workshop2$source)
omicron_basis <- omicron_basis %>%
mutate(multiplier = case_when(
outcome == 'hosp' ~ multiplier*workshop2$multiplier[workshop2$outcome == 'hosp'],
outcome %in% c('ICU','death') ~ multiplier*workshop2$multiplier[workshop2$outcome == 'hosp_long']))
#NOTE: assumption here that hosp_long proportional to ICU and death
#NOTE: upper and lower limits not adjusted as assumed used above
workshop = rbind(workshop,omicron_basis)
#<fin>
workshop = workshop[workshop$variant == VOC,c('outcome','multiplier')]
#_______________________________________________________________________________
#####(3/6) Calculating population-level variant-specific estimate of severe outcomes
#could be made faster, but assumptions less obvious, by including a var that is var_proxy to join on
severe_outcome_1 <- severe_outcome_0 %>%
mutate(percentage = case_when(
outcome == 'death' ~ percentage * workshop$multiplier[workshop$outcome == 'death'],
outcome == 'severe_disease' ~ percentage * workshop$multiplier[workshop$outcome == 'ICU'], #assumption
outcome == 'hosp' ~ percentage * workshop$multiplier[workshop$outcome == 'hosp']
),variant=VOC)
rm (omicron_basis,workshop2)
} else if (VOC == 'WT'){
severe_outcome_1 = severe_outcome_0 %>% mutate(variant = VOC)
}
#_______________________________________________________________________________
#####(4/6) Calculating age-specific estimates of severe outcomes
# COMEBACK - these are dummy values, and NOT country-specific
workshop <- read.csv('1_inputs/severe_outcome_age_distribution.csv')
workshop <- workshop[,c(1,2,3)] #remove source and explanation columns
severe_outcome_2 <- severe_outcome_1 %>%  left_join(workshop)
severe_outcome_2 <- severe_outcome_2 %>% mutate(percentage=percentage*RR)
severe_outcome_FINAL <- severe_outcome_2 %>%
select(outcome,outcome_long,age_group,percentage) %>%
mutate(age_group = gsub(" to ", "-", age_group))
severe_outcome_FINAL$age_group[severe_outcome_FINAL$age_group == '60+'] = '60-100'
rm(severe_outcome_0,severe_outcome_2)
#_______________________________________________________________________________
#####(5/6) Calculating YLL from death
#requires average age in age-group and life_expectancy of this study setting
workshop <- pop_setting_orig %>%
mutate(agegroup = cut(age,breaks = age_groups, include.lowest = T,labels = age_group_labels))
workshop_sum <- aggregate(workshop$population, by=list(category=workshop$agegroup), FUN=sum)
colnames(workshop_sum) <-c('agegroup','pop')
workshop <- workshop %>% left_join(workshop_sum)
workshop <- workshop %>% mutate(weight=population/pop,
age_weight = (age+0.5)*weight)
workshop <- aggregate(workshop$age_weight, by=list(category=workshop$agegroup), FUN=sum)
colnames(workshop) <-c('agegroup','average_age')
lifeExpect <- read.csv('1_inputs/UN_life_expectancy_est.csv')
lifeExpect = lifeExpect[lifeExpect$setting == setting,]
closest_age = data.frame()
for (i in 1:nrow(workshop)){
closest_age = rbind(closest_age,lifeExpect$age[which.min(abs(lifeExpect$age-workshop$average_age[i]))])
}
colnames(closest_age) = c('age')
workshop = cbind(workshop,closest_age)
workshop <- workshop %>%
left_join(lifeExpect) %>%
select(agegroup,average_age,age,life_expectancy)
#"The average number of remaining years of life expected by a hypothetical cohort of individuals alive at age x
# who would be subject during the remaining of their lives to the mortality rates of a given period."
# https://population.un.org/wpp/Download/Standard/Mortality/
YLL_FINAL = workshop %>%
select(agegroup,life_expectancy)
colnames(YLL_FINAL) = c('age_group','YLL')
YLL_row = severe_outcome_FINAL[severe_outcome_FINAL$outcome == 'death',]
YLL_row$outcome = 'YLL'
YLL_row$outcome_long = 'YLL per death in this age_group multiplied by death rate'
YLL_row <- YLL_row %>% left_join(YLL_FINAL) %>%
mutate(percentage = percentage*YLL)
YLL_row = YLL_row[,c(1:4)]
severe_outcome_FINAL = rbind(severe_outcome_FINAL,YLL_row)
severe_outcome_FINAL = severe_outcome_FINAL %>%
mutate(outcome_VE = case_when(
outcome %in% c('death','YLL') ~ 'death',
outcome %in% c('hosp','severe_disease') ~ 'hospitalisation'
))
#_______________________________________________________________________________
###<interim> workshop - calculation VE against severe outcomes by day
VE_tracker = data.frame()
for (outcome in c('death','hospitalisation')){
for (day in 1:(model_weeks*7) ){
workshop = VE_time_step(strain_inital,date_start+day,outcome)
workshop = workshop %>% mutate(date=day,
outcome_VE=outcome)
VE_tracker = rbind(VE_tracker,workshop)
}
}
VE_tracker$date = date_start + VE_tracker$date
workshop = crossing(dose = 0,
vaccine_type = "unvaccinated",
age_group = age_group_labels,
VE = 0,
date = unique(VE_tracker$date),
outcome_VE=unique(VE_tracker$outcome))
VE_tracker = rbind(VE_tracker,workshop)
severe_outcome_FINAL = severe_outcome_FINAL %>%
left_join(VE_tracker)
severe_outcome_FINAL = severe_outcome_FINAL %>%
mutate(percentage = percentage*(1-VE)) %>%
select(date,outcome,outcome_long,age_group,vaccine_type,dose,percentage)
View(outcome_proj)
View(outcome_proj_long)
outcome_proj = incidence_log_unedited[,c('date','daily_cases')] #start with date, daily_cases, then add other outcomes
workshop = subset(incidence_log_unedited, select=-c(time,date,daily_cases))
for (i in 1:length(outcomes_list)){ #do for every outcome
outcome = outcomes_list[i]
workshop_temp = workshop
this_health_outcome = severe_outcome_FINAL[severe_outcome_FINAL$outcome == outcome,c('percentage')]
this_health_outcome = this_health_outcome/100 #from % -> between 0-1
#COMEBACK - would apply VE but for now
this_health_outcome = rep(this_health_outcome,num_vax_classes)
for (i in 1:nrow(workshop)){
#COMEBACK - could be faster!
workshop_temp[i,] = workshop[i,] * this_health_outcome
}
outcome_result = as.data.frame(rowSums(workshop_temp))
colnames(outcome_result) = outcome
outcome_proj = cbind(outcome_proj,outcome_result)
}
outcome_proj_cum = outcome_proj
for (i in 2:ncol(outcome_proj)){
outcome_proj_cum[,i] = round(cumsum(outcome_proj_cum[,i]),digits=4)
}
workshop = incidence_log_tidy %>%
left_join(severe_outcome_FINAL)
View(workshop)
if(!nrow(severe_outcome_FINAL) == nrow(workshop)){stop('something has gone amiss')}
!nrow(severe_outcome_FINAL) == nrow(workshop)
workshop = incidence_log_tidy %>%
left_join(severe_outcome_FINAL) %>%
mutate(proj = incidence*percentage)
severe_outcome_table
row = vax_strategy_name
for (i in 1:length(unique(outcome_proj_cum_long$outcome))){
outcome = unique(outcome_proj_cum_long$outcome)[i]
row = cbind(row,
round(outcome_proj_cum_long$proj[outcome_proj_cum_long$outcome == outcome &
outcome_proj_cum_long$date == max(outcome_proj_cum_long$date)]))
}
colnames(row) = c('vaccination strategy',unique(outcome_proj_cum_long$outcome))
severe_outcome_table = rbind(severe_outcome_table,row)
severe_outcome_table
aggregate
workshop = workshop %>%
group_by(date,outcome) %>%
summarise(n=sum(proj))
workshop = incidence_log_tidy %>%
left_join(severe_outcome_FINAL) %>%
mutate(proj = incidence*percentage)
if(!nrow(severe_outcome_FINAL) == nrow(workshop)){stop('something has gone amiss')}
workshop = workshop %>%
group_by(date,outcome) %>%
summarise(proj=sum(proj))
workshop_incid =  incidence_log_unedited[,c('date','daily_cases')] %>%
mutate(outcome ='cases')
View(workshop_incid)
workshop_incid =  incidence_log_unedited[,c('date','daily_cases')] %>%
mutate(outcome ='cases',proj = daily_cases) %>%
select(date,outcome,proj)
View(outcome_proj)
workshop_cum = workshop %>%
group_by(outcome) %>%
mutate(proj_cum = cum(proj))
workshop_cum = workshop %>%
group_by(outcome) %>%
mutate(proj_cum = cumsum(proj))
View(workshop_cum)
workshop = workshop %>%
group_by(outcome) %>%
mutate(proj_cum = cumsum(proj))
workshop = rbind(workshop,workshop_incid)
workshop = workshop %>%
group_by(outcome) %>%
mutate(proj_cum = cumsum(proj))
View(outcome_proj_cum)
View(outcome_proj_cum_long)
plot1 <-
ggplot() +
geom_line(data=workshop[workshop$outcome != 'cases',],aes(x=date,y=proj,color=as.factor(outcome)),na.rm=TRUE) +
xlab("") +
scale_x_date(date_breaks="1 month", date_labels="%b") +
#ylim(0,40) +
ylab("incidence") +
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
axis.line = element_line(color = 'black'))
plot2 <- ggplot() +
geom_line(data=workshop[workshop$outcome != 'cases',],aes(x=date,y=proj_cum,color=as.factor(outcome)),na.rm=TRUE) +
xlab("") +
scale_x_date(date_breaks="1 month", date_labels="%b") +
ylab("cumulative incidence") +
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
axis.line = element_line(color = 'black'))
grid.arrange(plot1, plot2)
vax_strategy_name
severe_outcome_table
severe_outcome_projections = workshop %>%
group_by(outcome) %>%
mutate(proj_cum = cumsum(proj))
plot1 <-
ggplot() +
geom_line(data=severe_outcome_projections[severe_outcome_projections$outcome != 'cases',],aes(x=date,y=proj,color=as.factor(outcome)),na.rm=TRUE) +
xlab("") +
scale_x_date(date_breaks="1 month", date_labels="%b") +
#ylim(0,40) +
ylab("incidence") +
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
axis.line = element_line(color = 'black'))
plot2 <- ggplot() +
geom_line(data=severe_outcome_projections[severe_outcome_projections$outcome != 'cases',],aes(x=date,y=proj_cum,color=as.factor(outcome)),na.rm=TRUE) +
xlab("") +
scale_x_date(date_breaks="1 month", date_labels="%b") +
ylab("cumulative incidence") +
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
axis.line = element_line(color = 'black'))
grid.arrange(plot1, plot2)
View(severe_outcome_projections)
workshop = severe_outcome_projections %>%
filter(date == max(severe_outcome_projections$date)
)
workshop = severe_outcome_projections %>%
filter(date == max(severe_outcome_projections$date)) %>%
select(-c(proj))
workshop = severe_outcome_projections %>%
filter(date == max(severe_outcome_projections$date)) %>%
select(-c(proj,date))
workshop = severe_outcome_projections %>%
filter(date == max(severe_outcome_projections$date)) %>%
select(-c(proj,date)) %>%
pivot_wider(id_cols=outcome,
values_from=proj)
workshop = severe_outcome_projections %>%
filter(date == max(severe_outcome_projections$date)) %>%
select(-c(proj,date)) %>%
pivot_wider(id_cols=outcome,
values_from=proj_cum)
workshop = severe_outcome_projections %>%
filter(date == max(severe_outcome_projections$date)) %>%
select(-c(proj,date))
workshop = severe_outcome_projections %>%
filter(date == max(severe_outcome_projections$date)) %>%
select(-c(proj,date)) %>%
pivot_wider(names_from=outcome,
values_from=proj_cum)
row = severe_outcome_projections %>%
filter(date == max(severe_outcome_projections$date)) %>%
select(-c(proj,date)) %>%
pivot_wider(names_from=outcome,
values_from=proj_cum)
source("~/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/(function)_severe_outcome_proj.R", echo=TRUE)
View(severe_outcome_table)
View(row)
###LOOP
#COMEBACK, is this really a function?
source(paste(getwd(),"/(function)_severe_outcome_proj.R",sep=""))
View(VE_full_vaccine_type)
View(VE_together)
source("~/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/workshop - VE distribution by type.R", echo=TRUE)
VE_together[VE_together$days == 14,]
VE_together[VE_together$days == 14 & VE_together$outcome %in% c('death','hospitalisation'),]
VE_together[VE_together$days == 14 & VE_together$outcome %in% c('death','hospitalisation'),] %>% arrange(strain,outcome,vaccine_type,dose_one)
VE_together[VE_together$days == 14 & VE_together$outcome %in% c('death','hospitalisation'),] %>% sort(strain,outcome,vaccine_type,dose_one)
VE_together[VE_together$days == 14 & VE_together$outcome %in% c('death','hospitalisation'),] %>% group_by(strain,outcome,vaccine_type,dose_one)
VE_together[VE_together$days == 14 & VE_together$outcome %in% c('death','hospitalisation'),] %>% arrange(strain,outcome,vaccine_type,dose)
View(VE_waning_distribution)
#(1) VE_distribution
VE_distribution <- VE_waning_distribution[VE_waning_distribution$outcome == outcome &
VE_waning_distribution$strain == strain_now,]
#(2) doses delivered to this date
vax_to_this_date <- vaccination_history_FINAL[vaccination_history_FINAL$date <= date_now,]
VE_together[VE_together$days == 14 & VE_together$outcome %in% c('death','hospitalisation'),] %>% arrange(strain,outcome,vaccine_type,dose)``
strain_now = 'delta'
#(1) VE_distribution
VE_distribution <- VE_waning_distribution[VE_waning_distribution$outcome == outcome &
VE_waning_distribution$strain == strain_now,]
#(2) doses delivered to this date
vax_to_this_date <- vaccination_history_FINAL[vaccination_history_FINAL$date <= date_now,]
vax_to_this_date <- vax_to_this_date %>% # rearrange AIR dataset
select(vaccine_type,dose,date,age_group,doses_delivered_this_date)
colnames(vax_to_this_date) <- c('vaccine_type','dose','date','age_group','doses')
total_doses_up_to_this_date <- aggregate(vax_to_this_date$doses,
by=list(Category=vax_to_this_date$vaccine_type, vax_to_this_date$dose,vax_to_this_date$age_group)
, FUN=sum)
colnames(total_doses_up_to_this_date) <- c('vaccine_type','dose','age_group','total_delivered')
vax_to_this_date <- vax_to_this_date %>%
left_join(total_doses_up_to_this_date) %>%
mutate(prop = case_when(
total_delivered >0 ~ doses/total_delivered,
total_delivered == 0 ~ 0
),
days = as.numeric(date_now - date ))
#<interlude> to add together all days >365 to 365
meddling <- vax_to_this_date[vax_to_this_date$days > 364,]
if(length(unique(meddling$days))>1){
meddling <- aggregate(meddling$prop,
by=list(Category=meddling$vaccine_type, meddling$dose,meddling$age_group)
, FUN=sum)
colnames(meddling)  = c('vaccine_type','dose','age_group','prop')
meddling = meddling %>% mutate(days=365)
vax_to_this_date <- rbind(vax_to_this_date[vax_to_this_date$days<365,c(colnames(meddling))],
meddling)
}
#(3) Bring VE d'n and AIR history together
workshop <- vax_to_this_date %>%
left_join(VE_distribution) %>%
select(vaccine_type,dose,days,age_group,VE_days,prop) %>%
mutate(VE_weighted = VE_days*prop)
source("~/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/CommandDeck.R", echo=TRUE)
VE_inital
VE_Parameters
VE
parameters$VE
#(1) VE_distribution
VE_distribution <- VE_waning_distribution[VE_waning_distribution$outcome == outcome &
VE_waning_distribution$strain == strain_now,]
#(2) doses delivered to this date
vax_to_this_date <- vaccination_history_FINAL[vaccination_history_FINAL$date <= date_now,]
vax_to_this_date <- vax_to_this_date %>% # rearrange AIR dataset
select(vaccine_type,dose,date,age_group,doses_delivered_this_date)
colnames(vax_to_this_date) <- c('vaccine_type','dose','date','age_group','doses')
total_doses_up_to_this_date <- aggregate(vax_to_this_date$doses,
by=list(Category=vax_to_this_date$vaccine_type, vax_to_this_date$dose,vax_to_this_date$age_group)
, FUN=sum)
colnames(total_doses_up_to_this_date) <- c('vaccine_type','dose','age_group','total_delivered')
vax_to_this_date <- vax_to_this_date %>%
left_join(total_doses_up_to_this_date) %>%
mutate(prop = case_when(
total_delivered >0 ~ doses/total_delivered,
total_delivered == 0 ~ 0
),
days = as.numeric(date_now - date ))
#<interlude> to add together all days >365 to 365
meddling <- vax_to_this_date[vax_to_this_date$days > 364,]
if(length(unique(meddling$days))>1){
meddling <- aggregate(meddling$prop,
by=list(Category=meddling$vaccine_type, meddling$dose,meddling$age_group)
, FUN=sum)
colnames(meddling)  = c('vaccine_type','dose','age_group','prop')
meddling = meddling %>% mutate(days=365)
vax_to_this_date <- rbind(vax_to_this_date[vax_to_this_date$days<365,c(colnames(meddling))],
meddling)
}
#(3) Bring VE d'n and AIR history together
workshop <- vax_to_this_date %>%
left_join(VE_distribution) %>%
select(vaccine_type,dose,days,age_group,VE_days,prop) %>%
mutate(VE_weighted = VE_days*prop)
#(4) Aggregate to estimate population VE for doses
workshop <- aggregate(workshop$VE_weighted,
by=list(Category=workshop$dose,workshop$vaccine_type,workshop$age_group)
, FUN=sum)
colnames(workshop) <- c('dose','vaccine_type','age_group','VE')
#<interim> add none covered vaccines
for (i in 1:num_vax_types){
this_vax = vax_type_list[i]
if (!( this_vax %in% unique(workshop$vaccine_type))){
workshop2 = crossing(dose = c(1:num_vax_doses),
vaccine_type = this_vax,
age_group = age_group_labels,
VE =0)
workshop = rbind(workshop,workshop2)
}
}
##instead retain tidy form
VE_tidy = workshop
#(1) VE_distribution
VE_distribution <- VE_waning_distribution[VE_waning_distribution$outcome == outcome &
VE_waning_distribution$strain == strain_now,]
