if (!nrow(workshop) == sum(antiviral_target_individuals$symptomatic)) {
stop('split to individuals has lost individuals')
}
antiviral_target_individuals = workshop %>% select(-symptomatic)
antiviral_target_individuals$ID <-
seq.int(nrow(antiviral_target_individuals)) #helpful for checking
total_target = nrow(antiviral_target_individuals)
#____________________________________________________________________________
if (local_pathway_to_care == 'realistic') {
### PATHWAY TO CARE STEP ONE: Does this individual seek care? ################
healthcare_seeking = function(age_group) {
#COMEBACK: need real data to estimate
if (age_group %in% c("0 to 4",    "5 to 9",    "10 to 17")) {
sample = rbinom(1, 1, 0.5) #rbinom(number of observations,number of trials,probability of success on each trial)
} else{
sample = rbinom(1, 1, 0.25)
}
return(sample)
}
workshop <-
as.data.frame(sapply(
antiviral_target_individuals$age_group,
healthcare_seeking
))
colnames(workshop) = c('healthcare_seeking')
workshop = cbind(antiviral_target_individuals, workshop)
antiviral_target_individuals_run = workshop %>%
filter(healthcare_seeking == 1) %>% #retain those who seek care
select(-healthcare_seeking)
rm(workshop)
#____________________________________________________________________________
### PATHWAY TO CARE STEP TWO: How many days after symptom onset can the individual access care?#######
#ASSUMPTION: incidence is day 0 of symptom onset
healthcare_access = function(age_group) {
#COMEBACK: need real data to estimate
if (age_group %in% c("0 to 4",    "5 to 9",    "10 to 17")) {
sample = round(runif(1, min = 0, max = 7))
} else{
sample = round(runif(1, min = 0, max = 7))
}
return(sample)
}
workshop <-
as.data.frame(sapply(
antiviral_target_individuals_run$age_group,
healthcare_access
))
colnames(workshop) = c('healthcare_access')
workshop = cbind(antiviral_target_individuals_run, workshop)
antiviral_target_individuals_run = workshop %>%
filter(healthcare_access < 6) %>% #retain those who access care within 5 days
mutate(min_date_access = date + healthcare_access,
max_date_access = date + 5) %>%
select(-healthcare_access)
rm(workshop)
#____________________________________________________________________________
### PATHWAY TO CARE STEP THREE: Is the individual allocated antivirals?#######
#ASSUMPTION: allocated at random
antiviral_delivery_tracker = data.frame()
for (day in 0:antiviral_delivery_length) {
this_date =  toggle_antiviral_start_date + day
#include all presenting within
presentations_this_date = antiviral_target_individuals_run %>%
filter(this_date >= min_date_access &
this_date <= max_date_access) %>%
filter(!ID %in% antiviral_delivery_tracker$ID) #make sure previous recipients removed from future decisions
num_to_sample = min(nrow(presentations_this_date),
local_antiviral_delivery_capacity) #making sure number of doses delivered <= number of available recipients
antiviral_recipients_this_date = data.frame(ID = sample(presentations_this_date$ID, num_to_sample, replace =
FALSE))
antiviral_recipients_this_date = antiviral_recipients_this_date %>% mutate(date = this_date)
antiviral_delivery_tracker = rbind(antiviral_delivery_tracker,
antiviral_recipients_this_date)
}
antiviral_target_individuals_run = antiviral_delivery_tracker %>%
select(-date) %>%
left_join(antiviral_target_individuals_run, by = 'ID') #remove all not selected for antivirals
rm(antiviral_delivery_tracker)
#____________________________________________________________________________
} else if (local_pathway_to_care == 'fixed') {
#randomly sample the fixed proportion from the target population
num_to_sample = total_target * local_fixed_antiviral_coverage
antiviral_recipients = data.frame(ID = sample(antiviral_target_individuals$ID, num_to_sample, replace = FALSE))
antiviral_target_individuals_run = antiviral_recipients %>%
left_join(antiviral_target_individuals, by = 'ID') #remove all not selected for antivirals
} else{
stop('select a valid pathway_to_care!')
}
length_antiviral_delivery_tracker = nrow(antiviral_target_individuals_run)
### PATHWAY TO CARE STEP FOUR: How many cases of severe disease are prevented?#######
workshop = antiviral_target_individuals_run %>%
left_join(
likelihood_severe_outcome,
by = c("date", "risk_group", "age_group", "dose", "vaccine_type")
) %>%
left_join(toggle_antiviral_effectiveness, by = 'outcome') %>%
mutate(percentage = percentage * AE)
workshop = na.omit(workshop)
prevented_by_antivirals_this_date = workshop %>%
group_by(outcome) %>%
summarise(n = sum(percentage)) %>%
mutate(antiviral_start_date = toggle_antiviral_start_date) %>%
mutate(intervention = paste('antiviral',toggle_antiviral_start_date),
evaluation_group = 'overall',
intervention_doses_delivered = length_antiviral_delivery_tracker)
#____________________________________________________________________________
prevented_by_antivirals = rbind(prevented_by_antivirals,prevented_by_antivirals_this_date)
} #end loop over different antiviral start dates
### ESTIMATE ISOLATED EFFECT OF VACCINE #####################################
if (local_compare_to_vaccine_effect == "on" & toggle_vax_scenario != 'all willing adults vaccinated with a primary schedule'){
#Step One: load outcomes_without_antivirals (OWA) of no booster dose scenario
workshop = OWA_no_booster_doses %>%
select(-vax_scenario,-vax_scenario_risk_group) %>%
rename(no_booster_overall = overall,
no_booster_high_risk = high_risk)
#Step Two: compare OWA between booster and no-booster scenario
vax_effect_comparison = OWA_with_booster_doses %>%
select(-vax_scenario,-vax_scenario_risk_group) %>%
left_join(workshop, by = c('outcome')) %>%
mutate(overall = no_booster_overall - overall,
high_risk = no_booster_high_risk - high_risk) %>%
select(-no_booster_high_risk, -no_booster_overall) %>%
pivot_longer(
cols = c('overall','high_risk') ,
names_to = 'evaluation_group',
values_to = 'n'
) %>%
mutate(intervention = 'vaccine')
workshop = vax_effect_comparison %>% filter(outcome == 'booster_doses_delivered') %>% group_by(intervention,evaluation_group) %>% summarise(intervention_doses_delivered = abs(mean(n)),.groups = "keep")
vax_effect_comparison = vax_effect_comparison %>%
filter(outcome != 'booster_doses_deliverd') %>%
left_join(workshop, by = c("evaluation_group", "intervention"))
prevented_by_antivirals = bind_rows(prevented_by_antivirals,vax_effect_comparison)
}
#____________________________________________________________________________
### create row output #################################################
#select dataset to be used as comparison to calculate percentage
#if comparing vaccine effect to antiviral effect than compare to no vax no antiviral
if (local_compare_to_vaccine_effect == "on" ){
#NOTE: if comparing vax and antiviral, then baseline is no booster and no antiviral; otherwise, baseline is only no antiviral
outcomes_without_antivirals = OWA_no_booster_doses %>%
pivot_longer(
cols = c('overall','high_risk') ,
names_to = 'evaluation_group',
values_to = 'overall'
) %>%
select(outcome,evaluation_group,overall)
#if comparing between antiviral effects than compare to same vaccine scenario no antiviral
} else if (local_compare_to_vaccine_effect != "on"){
outcomes_without_antivirals = OWA_with_booster_doses %>%
pivot_longer(
cols = c('overall','high_risk') ,
names_to = 'evaluation_group',
values_to = 'overall'
) %>%
select(outcome,evaluation_group,overall)
}
one_complete_run <-
prevented_by_antivirals %>%
left_join(outcomes_without_antivirals, by = c("outcome",'evaluation_group')) %>%
mutate(
percentage = n / overall * 100
) %>%
select(outcome, intervention,evaluation_group, intervention_doses_delivered, n,
percentage) %>%
mutate(antiviral_target_group = toggle_antiviral_target,
vax_scenario = toggle_vax_scenario,
vax_scenario_risk_group = toggle_vax_scenario_risk_group)
this_worker_result = rbind(one_complete_run, this_worker_result)
}
return(this_worker_result)
}
this_worker_result
View(this_worker_result )
options(scipen = 1000)
View(this_worker_result )
source("C:/Users/u6044061/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/workshop - new plot for vax vs antiviral.R", echo=TRUE)
source("C:/Users/u6044061/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/workshop - new plot for vax vs antiviral.R", echo=TRUE)
antiviral_effectiveness
load(file = '1_inputs/antiviral_effectiveness.Rdata' )
antiviral_effectiveness
### SETUP  ################################################################
#load libraries
library(readr)
library(ggplot2)
library(gridExtra)
library(ggpubr)
library(tidyverse)
library(doParallel)
library(parallel)
library(foreach)
### MINIMISE FUNCTIONS #########################################################
fit_normal <- function(mean,LB,UB){
minimise_this_normal <- function(sd) {
LB_estimate = mean - qnorm(0.975) * sd
UB_estimate = mean - qnorm(0.025) * sd
return((LB - LB_estimate)^2 + (UB - UB_estimate)^2) #squared residuals
}
sd_est = optimize(minimise_this_normal, interval=c(0,mean*2))
return(sd_est$minimum)
}
fit_lognormal <- function(mean,LB,UB){
minimise_this_lognormal <- function(sd) {
mean_sq = mean^2
sd_sq = sd^2
a = log(mean_sq/sqrt(mean_sq+sd_sq))
b = log(1+sd_sq/mean_sq)
Z= rlnorm(10000000, meanlog = a,sdlog = b)
LB_estimate <- as.numeric(quantile(Z,.025))
UB_estimate <- as.numeric(quantile(Z,.975))
return((LB - LB_estimate)^2 + (UB - UB_estimate)^2) #squared residuals
}
sd_est = optimize(minimise_this_lognormal, interval=c(0,mean*2))
sd_est = sd_est$minimum
mean_sq = mean^2
sd_sq = sd_est^2
a = log(mean_sq/sqrt(mean_sq+sd_sq))
b = log(1+sd_sq/mean_sq)
return(data.frame(lognorm_a=a,lognorm_b=b))
}
fit_beta <- function(mean,LB,UB){
minimise_this_beta <- function(X) {
a = mean * X
b = (1-mean) * X
Z= rbeta(10000000, a, b)
LB_estimate <- as.numeric(quantile(Z,.025,na.rm=TRUE))
UB_estimate <- as.numeric(quantile(Z,.975,na.rm=TRUE))
return((LB - LB_estimate)^2 + (UB - UB_estimate)^2) #squared residuals
}
X_estimate = optimize(minimise_this_beta, interval=c(0,100))
X = X_estimate$minimum
a = mean * X
b = (1-mean) * X
return(data.frame(beta_a=a,beta_b=b))
}
fit_gamma <- function(mean,LB,UB){
minimise_this_gamma <- function(param) {
shape=param[1]
scale=param[2]
Z= rgamma(10000000, shape, scale=scale)
return((LB - quantile(Z,.025,na.rm=TRUE))^2 + (mean(Z))^2 + (UB - as.numeric(quantile(Z,.975,na.rm=TRUE))^2))
}
X_estimate = optim(c(1,1),minimise_this_gamma)
shape_estimate = X_estimate$par[1]
scale_estimate = X_estimate$par[1]
return(data.frame(gamma_shape=shape_estimate,gamma_scale=scale_estimate))
}
#_______________________________________________________________________________
workshop = read.csv("1_inputs/VE_WHO_forest_plot.csv",header=TRUE)
workshop = workshop %>% mutate(
VE = VE/100,
lower_est = lower_est/100,
upper_est = upper_est/100
)
workshop = workshop[is.na(workshop$VE) == FALSE,]
beta_param = mapply(fit_beta, workshop$VE, workshop$lower_est, workshop$upper_est)
warnings()
VE_WHO_est = cbind(workshop,t(beta_param))
View(VE_WHO_est)
# check
sampled_value = mapply(rbeta,10000000,VE_WHO_est$beta_a, VE_WHO_est$beta_b)
sampled_value2 = mapply(runif,10000000,VE_WHO_est$lower_est, VE_WHO_est$upper_est)
plot(density(sampled_value[,1])); lines(density(sampled_value2[,1])); mean(sampled_value[,1]); mean(sampled_value2[,1])
plot(density(sampled_value[,2])); lines(density(sampled_value2[,2])); mean(sampled_value[,2]); mean(sampled_value2[,2])
plot(density(sampled_value[,3])); lines(density(sampled_value2[,3])); mean(sampled_value[,3]); mean(sampled_value2[,3])
plot(density(sampled_value[,4])); lines(density(sampled_value2[,4])); mean(sampled_value[,4]); mean(sampled_value2[,4])
plot(density(sampled_value[,5])); lines(density(sampled_value2[,5])); mean(sampled_value[,5]); mean(sampled_value2[,5])
fit_beta <- function(mean,LB,UB){
minimise_this_beta <- function(X) {
a = mean * X
b = (1-mean) * X
Z= rbeta(10000000, a, b)
LB_estimate <- as.numeric(quantile(Z,.025,na.rm=TRUE))
UB_estimate <- as.numeric(quantile(Z,.975,na.rm=TRUE))
return((LB - LB_estimate)^2 + (UB - UB_estimate)^2) #squared residuals
}
X_estimate = optimize(minimise_this_beta, interval=c(0,10))
X = X_estimate$minimum
a = mean * X
b = (1-mean) * X
return(data.frame(beta_a=a,beta_b=b))
}
workshop = read.csv("1_inputs/VE_WHO_forest_plot.csv",header=TRUE)
workshop = workshop %>% mutate(
VE = VE/100,
lower_est = lower_est/100,
upper_est = upper_est/100
)
workshop = workshop[is.na(workshop$VE) == FALSE,]
beta_param = mapply(fit_beta, workshop$VE, workshop$lower_est, workshop$upper_est)
VE_WHO_est = cbind(workshop,t(beta_param))
# check
sampled_value = mapply(rbeta,10000000,VE_WHO_est$beta_a, VE_WHO_est$beta_b)
sampled_value2 = mapply(runif,10000000,min=VE_WHO_est$lower_est, max=VE_WHO_est$upper_est)
plot(density(sampled_value[,1])); lines(density(sampled_value2[,1])); mean(sampled_value[,1]); mean(sampled_value2[,1])
rm()
rm(ls())
rm(list())
rm(sampled_value)
rm(sampled_value2)
### SETUP  ################################################################
#load libraries
library(readr)
library(ggplot2)
library(gridExtra)
library(ggpubr)
library(tidyverse)
library(doParallel)
library(parallel)
library(foreach)
View(VE_WHO_est)
plot(density(sampled_value[,1])); lines(density(sampled_value2[,1])); mean(sampled_value[,1]); mean(sampled_value2[,1])
plot(density(sampled_value[,3])); lines(density(sampled_value2[,3])); mean(sampled_value[,3]); mean(sampled_value2[,3])
rm(sampled_value)
rm(sampled_value2)
workshop = read.csv("1_inputs/VE_WHO_forest_plot.csv",header=TRUE)
workshop = workshop %>% mutate(
VE = VE/100,
lower_est = lower_est/100,
upper_est = upper_est/100
)
workshop = workshop[is.na(workshop$VE) == FALSE,]
VE_WHO_est_norm = VE_WHO_est
# check
sampled_value = mapply(rbeta,100000,VE_WHO_est_norm $beta_a, VE_WHO_est$beta_b)
plot(density(sampled_value[,1]))
workshop
norm_param = mapply(fit_normal, workshop$VE, workshop$lower_est, workshop$upper_est)
warnings()
norm_param
VE_WHO_est = cbind(workshop,sd = param_est)
# check
sampled_value_beta = mapply(rbeta,100000,VE_WHO_est_norm $beta_a, VE_WHO_est_norm$beta_b)
sampled_value_norm = mapply(rnorm,100000,VE_WHO_est $VE, VE_WHO_est$sd)
sampled_value_unif = mapply(runif,100000,min=VE_WHO_est$lower_est, max=VE_WHO_est$upper_est)
plot(density(sampled_value_unif[,1])); lines(density(sampled_value_norm[,1])); lines(density(sampled_value_beta[,1]));mean(sampled_value_beta[,1]); mean(sampled_value_norm[,1])
sampled_value_norm
sampled_value_norm = mapply(rnorm,100000,VE_WHO_est$VE, VE_WHO_est$sd)
sampled_value_unif = mapply(runif,100000,min=VE_WHO_est$lower_est, max=VE_WHO_est$upper_est)
plot(density(sampled_value_unif[,1])); lines(density(sampled_value_norm[,1])); lines(density(sampled_value_beta[,1]));mean(sampled_value_beta[,1]); mean(sampled_value_norm[,1])
sampled_value_norm
sampled_value_norm = mapply(rnorm,100000,VE_WHO_est$VE, VE_WHO_est$sd)
sampled_value_norm
VE_WHO_est
VE_WHO_est = cbind(workshop,sd = norm_param)
# check
sampled_value_beta = mapply(rbeta,100000,VE_WHO_est_norm $beta_a, VE_WHO_est_norm$beta_b)
sampled_value_norm = mapply(rnorm,100000,VE_WHO_est$VE, VE_WHO_est$sd)
sampled_value_unif = mapply(runif,100000,min=VE_WHO_est$lower_est, max=VE_WHO_est$upper_est)
plot(density(sampled_value_unif[,1])); lines(density(sampled_value_norm[,1])); lines(density(sampled_value_beta[,1]));mean(sampled_value_beta[,1]); mean(sampled_value_norm[,1])
plot(density(sampled_value_norm[,1])); lines(density(sampled_value_beta[,1])); lines(density(sampled_value_unif[,1]));mean(sampled_value_beta[,1]); mean(sampled_value_norm[,1])
plot(density(sampled_value_norm[,2])); lines(density(sampled_value_beta[,2])); lines(density(sampled_value_unif[,1]));mean(sampled_value_beta[,2]); mean(sampled_value_norm[,2])
plot(density(sampled_value_norm[,1])); lines(density(sampled_value_beta[,1])); lines(density(sampled_value_unif[,1]));mean(sampled_value_beta[,1]); mean(sampled_value_norm[,1])
plot(density(sampled_value_norm[,2])); lines(density(sampled_value_beta[,2])); lines(density(sampled_value_unif[,2]));mean(sampled_value_beta[,2]); mean(sampled_value_norm[,2])
plot(density(sampled_value_norm[,3])); lines(density(sampled_value_beta[,3])); lines(density(sampled_value_unif[,3]));mean(sampled_value_beta[,3]); mean(sampled_value_norm[,3])
plot(density(sampled_value_norm[,4])); lines(density(sampled_value_beta[,4])); lines(density(sampled_value_unif[,4]));mean(sampled_value_beta[,4]); mean(sampled_value_norm[,4])
plot(density(sampled_value_norm[,4])); lines(density(sampled_value_beta[,4])); lines(density(sampled_value_unif[,4]));mean(sampled_value_beta[,4]); mean(sampled_value_norm[,4])
plot(density(sampled_value_norm[,5])); lines(density(sampled_value_beta[,5])); lines(density(sampled_value_unif[,5]));mean(sampled_value_beta[,5]); mean(sampled_value_norm[,5])
### PART NINE: raw_VE_severe_outcomes (dn to fit) ______________________________
workshop = read.csv(file = '1_inputs/VE_severe_outcomes.csv',header=TRUE)
workshop
VE_WHO_est
VE_WHO_est_norm
workshop = read.csv(file = '1_inputs/VE_severe_outcomes.csv',header=TRUE)
beta_param = mapply(fit_beta, workshop$VE, workshop$LB, workshop$UB)
SO_pt_est_beta = cbind(workshop,t(beta_param))
norm_param = mapply(fit_normal, workshop$VE, workshop$LB, workshop$UB)
SO_pt_est_norm = cbind(workshop,sd = norm_param)
sampled_value_beta = mapply(rbeta,100000,SO_pt_est_beta $beta_a, SO_pt_est_beta$beta_b)
sampled_value_norm = mapply(rnorm,100000,SO_pt_est_norm$VE, SO_pt_est_norm$sd)
sampled_value_unif = mapply(runif,100000,min=SO_pt_est_norm$lower_est, max=SO_pt_est_norm$upper_est)
plot(density(sampled_value_norm[,1])); lines(density(sampled_value_beta[,1])); lines(density(sampled_value_unif[,1]));mean(sampled_value_beta[,1]); mean(sampled_value_norm[,1])
sampled_value_norm
plot(density(sampled_value_norm[,1])); lines(density(sampled_value_beta[,1])); lines(density(sampled_value_unif[,1]));mean(sampled_value_beta[,1]); mean(sampled_value_norm[,1])
lines(density(sampled_value_unif[,1]))
sampled_value_unif[,1]
sampled_value_unif
sampled_value_unif
sampled_value_unif = mapply(runif,100000,min=SO_pt_est_norm$lower_est, max=SO_pt_est_norm$upper_est)
sampled_value_unif
SO_pt_est_norm
sampled_value_unif = mapply(runif,100000,min=SO_pt_est_norm$LB, max=SO_pt_est_norm$UB)
plot(density(sampled_value_norm[,1])); lines(density(sampled_value_beta[,1])); lines(density(sampled_value_unif[,1]));mean(sampled_value_beta[,1]); mean(sampled_value_norm[,1])
plot(density(sampled_value_norm[,2])); lines(density(sampled_value_beta[,2])); lines(density(sampled_value_unif[,2]));mean(sampled_value_beta[,2]); mean(sampled_value_norm[,2])
plot(density(sampled_value_norm[,3])); lines(density(sampled_value_beta[,3])); lines(density(sampled_value_unif[,3]));mean(sampled_value_beta[,3]); mean(sampled_value_norm[,3])
plot(density(sampled_value_norm[,4])); lines(density(sampled_value_beta[,4])); lines(density(sampled_value_unif[,4]));mean(sampled_value_beta[,4]); mean(sampled_value_norm[,4])
plot(density(sampled_value_norm[,5])); lines(density(sampled_value_beta[,5])); lines(density(sampled_value_unif[,5]));mean(sampled_value_beta[,5]); mean(sampled_value_norm[,5])
workshop
# check
sampled_value_beta = mapply(rbeta,100000,VE_WHO_est_norm $beta_a, VE_WHO_est_norm$beta_b)
sampled_value_norm = mapply(rnorm,100000,VE_WHO_est$VE, VE_WHO_est$sd)
sampled_value_unif = mapply(runif,100000,min=VE_WHO_est$lower_est, max=VE_WHO_est$upper_est)
plot(density(sampled_value_norm[,1])); lines(density(sampled_value_beta[,1])); lines(density(sampled_value_unif[,1]));mean(sampled_value_beta[,1]); mean(sampled_value_norm[,1])
plot(density(sampled_value_norm[,2])); lines(density(sampled_value_beta[,2])); lines(density(sampled_value_unif[,2]));mean(sampled_value_beta[,2]); mean(sampled_value_norm[,2])
plot(density(sampled_value_norm[,3])); lines(density(sampled_value_beta[,3])); lines(density(sampled_value_unif[,3]));mean(sampled_value_beta[,3]); mean(sampled_value_norm[,3])
plot(density(sampled_value_norm[,4])); lines(density(sampled_value_beta[,4])); lines(density(sampled_value_unif[,4]));mean(sampled_value_beta[,4]); mean(sampled_value_norm[,4])
plot(density(sampled_value_norm[,5])); lines(density(sampled_value_beta[,5])); lines(density(sampled_value_unif[,5]));mean(sampled_value_beta[,5]); mean(sampled_value_norm[,5])
# check
sampled_value_beta = mapply(rbeta,100000,VE_WHO_est_norm $beta_a, VE_WHO_est_norm$beta_b)
sampled_value_norm = mapply(rnorm,100000,VE_WHO_est$VE, VE_WHO_est$sd)
sampled_value_unif = mapply(runif,100000,min=VE_WHO_est$lower_est, max=VE_WHO_est$upper_est)
plot(density(sampled_value_norm[,1])); lines(density(sampled_value_beta[,1])); lines(density(sampled_value_unif[,1]));mean(sampled_value_beta[,1]); mean(sampled_value_norm[,1])
plot(density(sampled_value_norm[,2])); lines(density(sampled_value_beta[,2])); lines(density(sampled_value_unif[,2]));mean(sampled_value_beta[,2]); mean(sampled_value_norm[,2])
plot(density(sampled_value_norm[,3])); lines(density(sampled_value_beta[,3])); lines(density(sampled_value_unif[,3]));mean(sampled_value_beta[,3]); mean(sampled_value_norm[,3])
plot(density(sampled_value_norm[,4])); lines(density(sampled_value_beta[,4])); lines(density(sampled_value_unif[,4]));mean(sampled_value_beta[,4]); mean(sampled_value_norm[,4])
plot(density(sampled_value_norm[,5])); lines(density(sampled_value_beta[,5])); lines(density(sampled_value_unif[,5]));mean(sampled_value_beta[,5]); mean(sampled_value_norm[,5])
save(VE_WHO_est,file = '1_inputs/VE_WHO_est.Rdata')
SO_pt_est_norm
save(VE_severe_outcomes_waning_pt_est,file = '1_inputs/VE_severe_outcomes_waning_pt_est.Rdata')
VE_severe_outcomes_waning_pt_est = SO_pt_est_norm
save(VE_severe_outcomes_waning_pt_est,file = '1_inputs/VE_severe_outcomes_waning_pt_est.Rdata')
##### PART ONE: point estimates of primary schedule ####################################################################################
### (1/2) Inital estimates from IVAC living systematic review
raw_VE_point_est <- VE_WHO_est
### PART SEVEN: raw_VE_point_est (dose 1 and 2) ________________________________
workshop = read.csv("1_inputs/VE_WHO_forest_plot.csv",header=TRUE)
workshop = workshop %>% mutate(
VE = VE/100,
lower_est = lower_est/100,
upper_est = upper_est/100
)
workshop = workshop[is.na(workshop$VE) == FALSE,]
VE_WHO_est = VE_WHO_est %>% select(strain,vaccine_type,primary_if_booster,dose,outcome,actual.measure,reference,sd)
VE_WHO_est = workshop %>% left_join(VE_WHO_est)
### PART SEVEN: raw_VE_point_est (dose 1 and 2) ________________________________
raw = read.csv("1_inputs/VE_WHO_forest_plot.csv",header=TRUE)
### PART SEVEN: raw_VE_point_est (dose 1 and 2) ________________________________
raw = read.csv("1_inputs/VE_WHO_forest_plot.csv",header=TRUE)
workshop = raw %>% mutate(
VE = VE/100,
lower_est = lower_est/100,
upper_est = upper_est/100
)
workshop = workshop[is.na(workshop$VE) == FALSE,]
### PART SEVEN: raw_VE_point_est (dose 1 and 2) ________________________________
raw = read.csv("1_inputs/VE_WHO_forest_plot.csv",header=TRUE)
workshop = raw %>% mutate(
VE = VE/100,
lower_est = lower_est/100,
upper_est = upper_est/100
)
workshop = workshop[is.na(workshop$VE) == FALSE,]
norm_param = mapply(fit_normal, workshop$VE, workshop$lower_est, workshop$upper_est)
VE_WHO_est = cbind(workshop,sd = norm_param)
VE_WHO_est = VE_WHO_est %>% select(strain,vaccine_type,primary_if_booster,dose,outcome,actual.measure,reference,sd)
VE_WHO_est = raw %>% left_join(VE_WHO_est)
save(VE_WHO_est,file = '1_inputs/VE_WHO_est.Rdata')
##### PART ONE: point estimates of primary schedule ####################################################################################
### (1/2) Inital estimates from IVAC living systematic review
raw_VE_point_est <- VE_WHO_est
raw_VE_severe_outcomes <- VE_severe_outcomes_waning_pt_est
raw = read.csv("1_inputs/VE_WHO_forest_plot.csv",header=TRUE)
raw = raw %>% mutate(
VE = VE/100,
lower_est = lower_est/100,
upper_est = upper_est/100
)
workshop = raw[is.na(raw$VE) == FALSE,]
# beta_param = mapply(fit_beta, workshop$VE, workshop$lower_est, workshop$upper_est)
# VE_WHO_est_norm = cbind(workshop,t(beta_param))
norm_param = mapply(fit_normal, workshop$VE, workshop$lower_est, workshop$upper_est)
VE_WHO_est = cbind(workshop,sd = norm_param)
VE_WHO_est = VE_WHO_est %>% select(strain,vaccine_type,primary_if_booster,dose,outcome,actual.measure,reference,sd)
VE_WHO_est = raw %>% left_join(VE_WHO_est)
save(VE_WHO_est,file = '1_inputs/VE_WHO_est.Rdata')
##### PART ONE: point estimates of primary schedule ####################################################################################
### (1/2) Inital estimates from IVAC living systematic review
raw_VE_point_est <- VE_WHO_est
raw_VE_severe_outcomes <- VE_severe_outcomes_waning_pt_est
sampled_value = mapply(rnorm,1,raw_VE_point_est$VE, raw_VE_point_est$sd)
sampled_value
options(warn = -1 )
sampled_value = mapply(rnorm,1,raw_VE_point_est$VE, raw_VE_point_est$sd)
options(warn = 0)
sampled_value[is.nan(sampled_value)] = NA
VE_estimates = cbind(raw_VE_point_est,sampled_value)
VE_estimates$VE = VE_estimates$sampled_value
VE_estimates
sampled_value
raw_VE_point_est <- VE_WHO_est
raw_VE_severe_outcomes <- VE_severe_outcomes_waning_pt_est
######SAMPLE HERE
options(warn = -1 )
sampled_value = mapply(rnorm,1,raw_VE_point_est$VE, raw_VE_point_est$sd)
options(warn = 0)
sampled_value[is.nan(sampled_value)] = NA
sampled_value[sampled_value>1] = 1
sampled_value[sampled_value<0] = 0
VE_estimates = cbind(raw_VE_point_est,sampled_value)
VE_estimates$VE = VE_estimates$sampled_value
View(VE_estimates)
# check
sampled_value_beta = mapply(rbeta,100,VE_WHO_est_norm $beta_a, VE_WHO_est_norm$beta_b)
sampled_value_norm = mapply(rnorm,100,VE_WHO_est$VE, VE_WHO_est$sd)
sampled_value_unif = mapply(runif,100,min=VE_WHO_est$lower_est, max=VE_WHO_est$upper_est)
#
plot(density(sampled_value_norm[,1])); lines(density(sampled_value_beta[,1])); lines(density(sampled_value_unif[,1]));mean(sampled_value_beta[,1]); mean(sampled_value_norm[,1])
#
plot(density(sampled_value_norm[,1]));  lines(density(sampled_value_unif[,1]));mean(sampled_value_beta[,1]); mean(sampled_value_norm[,1])
plot(density(sampled_value_norm[,1]));
plot(density(sampled_value_norm[,2])); lines(density(sampled_value_beta[,2])); lines(density(sampled_value_unif[,2]));mean(sampled_value_beta[,2]); mean(sampled_value_norm[,2])
plot(density(sampled_value_norm[,3])); lines(density(sampled_value_beta[,3])); lines(density(sampled_value_unif[,3]));mean(sampled_value_beta[,3]); mean(sampled_value_norm[,3])
#
plot(density(sampled_value_norm[,1]));  lines(density(sampled_value_unif[,1]));mean(sampled_value_beta[,1]); mean(sampled_value_norm[,1])
plot(density(sampled_value_norm[,2])); lines(density(sampled_value_beta[,2])); lines(density(sampled_value_unif[,2]));mean(sampled_value_beta[,2]); mean(sampled_value_norm[,2])
plot(density(sampled_value_norm[,3])); lines(density(sampled_value_beta[,3])); lines(density(sampled_value_unif[,3]));mean(sampled_value_beta[,3]); mean(sampled_value_norm[,3])
source("C:/Users/u6044061/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/(antiviral)(function) stochastic_VE.R", echo=TRUE)
stochastic_VE()
source("C:/Users/u6044061/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/(antiviral)(function) stochastic_VE.R", echo=TRUE)
stochastic_VE()
source("C:/Users/u6044061/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/(antiviral)(function) stochastic_VE.R", echo=TRUE)
stochastic_VE ()
