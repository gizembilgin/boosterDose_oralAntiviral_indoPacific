for (i in 1:J){             # age
for (t in 1:T){           # vaccine type
for (d in 1:D){         # vaccine dose
workshop_type =  unique(vaccination_history_FINAL$vaccine_type)[t]
workshop_age  = age_group_labels[i]
workshop_risk = risk_group_labels[r]
this_vax_max_date = max(vaccination_history_FINAL$date[vaccination_history_FINAL$vaccine_type == workshop_type])
if ((date_start - vaxCovDelay$delay[vaxCovDelay$dose == d])<= this_vax_max_date &
(date_start - vaxCovDelay$delay[vaxCovDelay$dose == d])>= min(vaccination_history_FINAL$date)){
workshop_value =  vaccination_history_FINAL$coverage_this_date[
vaccination_history_FINAL$date == date_start - vaxCovDelay$delay[vaxCovDelay$dose == d]
& vaccination_history_FINAL$age_group == workshop_age
& vaccination_history_FINAL$risk_group == workshop_risk
& vaccination_history_FINAL$dose == d
& vaccination_history_FINAL$vaccine_type == workshop_type] / 100
vaccine_coverage$cov[
vaccine_coverage$dose == d &
vaccine_coverage$vaccine_type == workshop_type &
vaccine_coverage$age_group == workshop_age &
vaccine_coverage$risk_group == workshop_risk
] = max(workshop_value,0)
} else if ((date_start -vaxCovDelay$delay[vaxCovDelay$dose == d])> this_vax_max_date){
workshop_value =
vaccination_history_FINAL$coverage_this_date[
vaccination_history_FINAL$date == this_vax_max_date
& vaccination_history_FINAL$dose == d
& vaccination_history_FINAL$age_group == workshop_age
& vaccination_history_FINAL$risk_group == workshop_risk
& vaccination_history_FINAL$vaccine_type == workshop_type]/100
vaccine_coverage$cov[
vaccine_coverage$dose == d &
vaccine_coverage$vaccine_type == workshop_type &
vaccine_coverage$age_group == workshop_age &
vaccine_coverage$risk_group == workshop_risk
] =  max(workshop_value,0)
}
}
}
}
}
vaccine_coverage$cov[is.na(vaccine_coverage$cov)] = 0
#CHECK
check =  vaccine_coverage %>% group_by(dose,age_group,risk_group) %>% summarise(check = sum(cov),.groups = "keep") %>% filter(check>1)
if(nrow(check)>1){stop('inital vaccine coverage > 100%')}
vaccine_coverage
#(B/B) Vaccine Effectiveness (VE)
load( file = '1_inputs/VE_waning_distribution.Rdata')
VE_waning_distribution = VE_waning_distribution %>%
filter(waning == waning_toggle_acqusition) %>%
mutate(outcome = 'any_infection')
#ASSUMPTION - averaging across heterogeneous combinations of VE dose 3
workshop = VE_waning_distribution %>%
filter(dose == 3 & strain == strain_now) %>%
group_by(strain,outcome,vaccine_type,dose,days,waning,.add = TRUE) %>%
summarise(VE_days = mean(VE_days),.groups = "keep")
VE_waning_distribution = VE_waning_distribution %>%
filter(! dose == 3) %>%
select(-primary_if_booster)
VE_waning_distribution = rbind(VE_waning_distribution,workshop)
if ((date_start - vaxCovDelay$delay[vaxCovDelay$dose == d])>= min(vaccination_history_POP$date)){
VE = VE_inital = VE_time_step(strain_inital,date_start,'any_infection')
#VE_onwards_inital <- VE_time_step(strain_inital,date_start,'transmission')
}
if (fitting == "off"){
waning_shape_plot_list = list()
waning_to_plot = VE_waning_distribution %>%
filter(dose < 3 &
vaccine_type %in% vax_type_list &
strain == strain_now) %>%
mutate(immunity = paste(vaccine_type,dose))
for (o in 1:length(unique(waning_to_plot$outcome))){
waning_shape_plot_list[[o]] = ggplot() +
geom_line(data=waning_to_plot[waning_to_plot$outcome == unique(waning_to_plot$outcome)[o],],
aes(x=days,y=VE_days,color=as.factor(immunity)),na.rm=TRUE) +
labs(title=(paste("Waning of VE against",paste(unique(waning_to_plot$outcome)[o]),"(",strain_now,")"))) +
xlab("days since vaccination") +
ylab("% max protection") +
ylim(0,1)+
theme_bw() +
theme(panel.grid.major = element_blank(),panel.grid.minor = element_blank())
}
}
###### (2/5) Seroprevalence
load(file = "1_inputs/seroprev.Rdata")
seroprev = seroprev %>%
filter(setting == setting &
year == as.numeric(format(date_start, format="%Y")))
if (as.numeric(format(date_start, format="%Y")) > 2022){
load(file = "1_inputs/seroprev.Rdata")
seroprev = seroprev[seroprev$setting == setting & seroprev$year ==  2022,]
}
###### (3/5) NPI
if(date_start <= max(NPI_estimates$date)){ #if date within known NPI range
NPI_inital = NPI_estimates$NPI[NPI_estimates$date==date_start]
} else {  #take average of last month on record
NPI_inital = NPI_estimates %>%
filter(date>(max(NPI_estimates$date)-30))
NPI_inital = mean(NPI_inital$NPI)
}
NPI = NPI_inital = 1 - as.numeric(NPI_inital)/100 #effective NPI is (1-NPI), calculate here so we don't have to repeatedly calculate
###### (4/5) Hence, initial state
J=num_age_groups
T=num_vax_types
D=num_vax_doses
RISK=num_risk_groups
count=J*(T*D+1)*RISK # +1 is unvax
seed = 0.001*sum(pop) #seed of outbreak at seed_dates (introduction of delta and omicron)
initialInfected = seed*AverageSymptomaticPeriod/(AverageSymptomaticPeriod+AverageLatentPeriod)
initialExposed  = seed*AverageLatentPeriod/(AverageSymptomaticPeriod+AverageLatentPeriod)
initialRecovered = seroprev %>%
left_join(pop_setting, by = "age_group") %>%
mutate(R = seroprev*pop/100) %>%
select(age_group,R)
date = seq(1,lengthInfectionDerivedImmunity)
date = date_start - date
workshop = as.data.frame(date)
workshop$daily_cases = sum(initialRecovered$R)/lengthInfectionDerivedImmunity
hist_cases = workshop
S_inital=E_inital=I_inital=R_inital=(rep(0,count))
#number of active infected/recovered cases
if (risk_group_toggle == "on"){
recovered_risk = initialRecovered %>%
left_join(risk_dn, by = "age_group") %>%
mutate(risk_group = risk_group_name,
R = R*prop) %>%
select(risk_group,age_group,R)
recovered_general_public   = initialRecovered %>%
left_join(risk_dn, by = "age_group") %>%
mutate(risk_group = 'general_public',
R = R*(1-prop)) %>%
select(risk_group,age_group,R)
initialRecovered = rbind(recovered_general_public,recovered_risk)
} else{
initialRecovered = initialRecovered %>%
mutate(risk_group = 'general_public')
}
#age distribution of cases
#LIMITATION: no data so assuming uniform across age groups
initialClasses = pop_risk_group_dn %>% ungroup() %>%
mutate(I = initialInfected*pop/sum(pop),
E = initialExposed*pop/sum(pop)) %>%
left_join(initialRecovered, by = c("risk_group", "age_group")) %>%
mutate(S = pop - E - I - R) %>%
select(-pop) %>%
pivot_longer(
cols = I:S,
names_to = 'class',
values_to = 'state_inital'
)
if (round(sum(initialClasses$state_inital)) != sum(pop)){stop('size of inital state != size of population')}
# distribute across vaccine classes
# LIMITATION: no data so assuming infections are spread equally across vax classes
empty_unvaccinated = crossing(class = disease_class_list,
risk_group = risk_group_labels,
dose = 0,
vaccine_type = 'unvaccinated',
age_group = age_group_labels,
state_inital = 0)
empty_vaccinated = crossing(class = disease_class_list,
risk_group = risk_group_labels,
dose = seq(1,num_vax_doses),
vaccine_type = vax_type_list,
age_group = age_group_labels,
state_inital = 0)
state_tidy = rbind(empty_unvaccinated,empty_vaccinated)
for (num in 1:num_disease_classes){
workshop = initialClasses %>% filter(class ==  disease_class_list[num] )
for (r in 1:RISK){
for (i in 1:J){ # age
#pop*(1-cov1A-cov1B-cov1C)
#unvaccinated
state_tidy$state_inital[state_tidy$dose == 0 &
state_tidy$age_group == age_group_labels[i] &
state_tidy$risk_group == risk_group_labels[r] &
state_tidy$class == disease_class_list[num]] =
workshop$state_inital[workshop$risk_group ==  risk_group_labels[r] & workshop$age_group == age_group_labels[i]]*
(1-sum(vaccine_coverage$cov[vaccine_coverage$dose == 1 &
vaccine_coverage$age_group == age_group_labels[i] &
vaccine_coverage$risk_group == risk_group_labels[r]]))
for (t in 1:T){  # vaccine type
for (d in 1:D){ # vaccine dose
if (d != D){
#pop*(cov1A-cov2A)
state_tidy$state_inital[state_tidy$dose == d  & state_tidy$vaccine_type == vax_type_list[t]&
state_tidy$age_group == age_group_labels[i] &
state_tidy$risk_group == risk_group_labels[r] &
state_tidy$class == disease_class_list[num]] =
workshop$state_inital[workshop$risk_group ==  risk_group_labels[r] & workshop$age_group == age_group_labels[i]]*
(vaccine_coverage$cov[vaccine_coverage$dose == d &
vaccine_coverage$vaccine_type == vax_type_list[t] &
vaccine_coverage$age_group == age_group_labels[i] &
vaccine_coverage$risk_group == risk_group_labels[r]] -
vaccine_coverage$cov[vaccine_coverage$dose == d+1 &
vaccine_coverage$vaccine_type == vax_type_list[t] &
vaccine_coverage$age_group == age_group_labels[i] &
vaccine_coverage$risk_group == risk_group_labels[r]])
}
if (d == D){
#pop*cov2A
state_tidy$state_inital[state_tidy$dose == d & state_tidy$vaccine_type == vax_type_list[t] &
state_tidy$age_group == age_group_labels[i] &
state_tidy$risk_group == risk_group_labels[r] &
state_tidy$class == disease_class_list[num]] =
workshop$state_inital[workshop$risk_group ==  risk_group_labels[r] & workshop$age_group == age_group_labels[i]]*
(vaccine_coverage$cov[vaccine_coverage$dose == d &
vaccine_coverage$vaccine_type == vax_type_list[t]&
vaccine_coverage$age_group == age_group_labels[i]&
vaccine_coverage$risk_group == risk_group_labels[r]])
}
}
}
}
}
}
state_tidy$class      = factor(state_tidy$class, levels = disease_class_list)
state_tidy$risk_group = factor(state_tidy$risk_group, levels = risk_group_labels)
state_tidy$age_group  = factor(state_tidy$age_group, levels = age_group_labels)
state_tidy = state_tidy %>% arrange(class,risk_group,dose,vaccine_type,age_group)
state_tidy$state_inital[is.na(state_tidy$state_inital)] = 0
View(state_tidy)
#construct long array that ODE solver requires
Incidence_inital=(rep(0,J*(T*D+1)*RISK))
Exposed_incidence_inital = rep(0,J*2)
state=c(state_tidy$state_inital,Incidence_inital,Exposed_incidence_inital)
min(vaccination_history_TRUE$date)
date_start
min(vaccination_history_TRUE$date[vaccination_history_TRUE$doses_delivered_this_date>0])
date_start - 21
vaccination_history_TRUE[vaccination_history_TRUE$date ==  min(vaccination_history_TRUE$date[vaccination_history_TRUE$doses_delivered_this_date>0]),]
vaccination_history_TRUE[vaccination_history_TRUE$date ==  min(vaccination_history_TRUE$date[vaccination_history_TRUE$doses_delivered_this_date>0]) & vaccination_history_TRUE$doses_delivered_this_date>0,]
date_start
###CHECK why not aliginging with vaccination_history_TRUE
vaccination_history_TRUE %>% filter(risk_group == risk_group_name)
###CHECK why not aliginging with vaccination_history_TRUE (use dose 1)
vaccination_history_TRUE %>%
mutate(date = date - vaxCovDelay$delay[vaxCovDelay$dose == 1])
vaccination_history_TRUE %>%
mutate(date = date - vaxCovDelay$delay[vaxCovDelay$dose == 1]) %>%
filter(risk_group == risk_group_name & date == date_now & dose == 1)
###CHECK why not aliginging with vaccination_history_TRUE (use dose 1)
total_dose1_expected = vaccination_history_TRUE %>%
mutate(date = date - vaxCovDelay$delay[vaxCovDelay$dose == 1]) %>%
filter(risk_group == risk_group_name & date == date_now & dose == 1) %>%
summarise(sum=sum(doses_delivered_this_date))
total_dose1_expected
###CHECK why not aliginging with vaccination_history_TRUE (use dose 1)
total_dose1_expected = vaccination_history_TRUE %>%
mutate(date = date - vaxCovDelay$delay[vaxCovDelay$dose == 1]) %>%
filter(risk_group == risk_group_name & date == date_now & dose == 1) %>%
ungroup() %>%
summarise(sum=sum(doses_delivered_this_date))
total_dose1_expected
next_state %>%
filter(dose == 1)
###CHECK why not aliginging with vaccination_history_TRUE (use dose 1)
if (fitting == "on"){
dose1_expected = vaccination_history_TRUE %>%
mutate(date = date - vaxCovDelay$delay[vaxCovDelay$dose == 1]) %>%
filter(risk_group == risk_group_name & date == date_now & dose == 1)
dose1_existing = next_state %>%
filter(dose == 1)
if (sum(dose1_expected$doses_delivered_this_date) != sum(dose1_existing$pop)){stop('dose coverage does not align!')}
}
sum(dose1_expected$doses_delivered_this_date)
um(dose1_existing$pop)
sum(dose1_existing$pop)
source("C:/Users/u6044061/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/(4)_time_step.R", echo=TRUE)
###CHECK why not aliginging with vaccination_history_TRUE (use dose 1)
if (fitting == "on"){
dose1_expected = vaccination_history_TRUE %>%
mutate(date = date - vaxCovDelay$delay[vaxCovDelay$dose == 1]) %>%
filter(risk_group == risk_group_name & date == date_now & dose == 1)
dose1_existing = next_state %>%
filter(dose == 1)
if (sum(dose1_expected$doses_delivered_this_date) != sum(dose1_existing$pop)){stop('dose coverage does not align!')}
}
###CHECK why not aliginging with vaccination_history_TRUE (use dose 1)
if (fitting == "on"){
dose1_expected = vaccination_history_TRUE %>%
mutate(date = date - vaxCovDelay$delay[vaxCovDelay$dose == 1]) %>%
filter(risk_group == risk_group_name & date == date_now & dose == 1)
dose1_existing = next_state %>%
filter(dose == 1)
if (sum(dose1_expected$doses_delivered_this_date) != sum(dose1_existing$pop)){stop('dose coverage does not align!')}
}
source(paste(getwd(),"/CommandDeck.R",sep=""))
date_now
dose1_expected
dose1_existing
sum(dose1_expected$doses_delivered_this_date)
sum(dose1_existing$pop)
VR_this_step
this_vax_history
this_vax_history
VR_this_step
vaccination_history_TRUE %>%
mutate(date = date - vaxCovDelay$delay[vaxCovDelay$dose == 1]) %>%
filter(risk_group == risk_group_name & date == date_now & dose == 1)
dose1_expected = vaccination_history_TRUE %>%
mutate(date = date - vaxCovDelay$delay[vaxCovDelay$dose == 1]) %>%
filter(risk_group == risk_group_name & date == date_now & dose == 1)
dose1_delivered = vaccination_history_FINAL %>%
mutate(date = date - vaxCovDelay$delay[vaxCovDelay$dose == 1]) %>%
filter(risk_group == risk_group_name & date == date_now & dose == 1)
dose1_existing = next_state %>%
filter(dose == 1)
dose1_delivered = vaccination_history_FINAL %>%
mutate(date = date - vaxCovDelay$delay[vaxCovDelay$dose == 1]) %>%
filter(risk_group == risk_group_name & date == date_now & dose == 1)
dose1_existing = next_state %>%
filter(dose == 1)
sum(dose1_expected$doses_delivered_this_date)
sum(dose1_delivered$doses_delivered_this_date)
sum(dose1_existing$pop)
sum(dose1_expected$doses_delivered_this_date)
sum(dose1_existing$pop)
risk_group_labels
num_vax_types
r
t
this_vax = vax_type_list[t]
this_vax_history = vaccination_history_FINAL[vaccination_history_FINAL$vaccine_type == this_vax & vaccination_history_FINAL$risk_group == this_risk_group,]
dose1_expected = this_vax_history %>%
mutate(date = date - vaxCovDelay$delay[vaxCovDelay$dose == 1]) %>%
filter(risk_group == risk_group_name & date == date_now & dose == 1)
sum(dose1_expected$doses_delivered_this_date)
View(this_vax_history)
View(dose1_expected)
this_vax_history = vaccination_history_FINAL[vaccination_history_FINAL$vaccine_type == this_vax & vaccination_history_FINAL$risk_group == this_risk_group,]
# (1/3) recorded vax
VR_this_step = crossing(dose = seq(1:D),
age_group = age_group_labels,
doses = 0)
for (d in 1:D){
for (i in 2:J){ #ASSUMPTION that don't vaccinate 0-4
if (nrow(this_vax_history[this_vax_history$dose == d & this_vax_history$date == as.Date(date_now) - vaxCovDelay$delay[vaxCovDelay$dose == d],]) >0){
VR_this_step$doses[VR_this_step$dose == d & VR_this_step$age_group == age_group_labels[i]] =
this_vax_history$doses_delivered_this_date[this_vax_history$date ==  as.Date(date_now) - vaxCovDelay$delay[vaxCovDelay$dose == d] &
this_vax_history$dose==d &
this_vax_history$age_group == age_group_labels[i]]
}
}
}
VR_this_step
d=1
this_vax_history$doses_delivered_this_date[this_vax_history$date ==  as.Date(date_now) - vaxCovDelay$delay[vaxCovDelay$dose == d] &
this_vax_history$dose==d &
this_vax_history$age_group == age_group_labels[i]]
date_now
dose1_expected = this_vax_history %>%
mutate(date = date - vaxCovDelay$delay[vaxCovDelay$dose == 1]) %>%
filter(risk_group == risk_group_name & date == date_now & dose == 1)
sum(dose1_expected$doses_delivered_this_date)
this_vax_history$doses_delivered_this_date[this_vax_history$date ==  as.Date(date_now) - vaxCovDelay$delay[vaxCovDelay$dose == d] &
this_vax_history$dose==d &
this_vax_history$age_group == age_group_labels[i]]
this_vax_history[this_vax_history$date ==  as.Date(date_now) - vaxCovDelay$delay[vaxCovDelay$dose == d] &
this_vax_history$dose==d &
this_vax_history$age_group == age_group_labels[i],]
this_vax_history[this_vax_history$date ==  as.Date(date_now) - vaxCovDelay$delay[vaxCovDelay$dose == d] &
this_vax_history$dose==d ,]
this_vax_history[this_vax_history$date ==  as.Date(date_now) - vaxCovDelay$delay[vaxCovDelay$dose == d] &
this_vax_history$dose==d ,]
d
as.Date(date_now) - vaxCovDelay$delay[vaxCovDelay$dose == d]
date_now
dose1_expected = vaccination_history_TRUE %>%
mutate(date = date + vaxCovDelay$delay[vaxCovDelay$dose == 1]) %>%
filter(risk_group == risk_group_name & date == date_now & dose == 1)
dose1_existing = next_state %>%
filter(dose == 1)
if (sum(dose1_expected$doses_delivered_this_date) != sum(dose1_existing$pop)){stop('dose coverage does not align!')}
sum(dose1_expected$doses_delivered_this_date)
sum(dose1_existing$pop)
source("C:/Users/u6044061/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/(4)_time_step.R", echo=TRUE)
date_now
sum(dose1_expected$doses_delivered_this_date)
sum(dose1_existing$pop)
VR_this_step
View(dose1_expected)
dose1_expected %>% filter(date == date_now)
dose1_expected %>% filter(date == date_now & doses_delivered_this_date>0)
VR_this_step
num_vax_types
vax_type_list
this_vax
t
t=3
this_vax = vax_type_list[t]
this_vax_history = vaccination_history_FINAL[vaccination_history_FINAL$vaccine_type == this_vax & vaccination_history_FINAL$risk_group == this_risk_group,]
# (1/3) recorded vax
VR_this_step = crossing(dose = seq(1:D),
age_group = age_group_labels,
doses = 0)
for (d in 1:D){
for (i in 2:J){ #ASSUMPTION that don't vaccinate 0-4
if (nrow(this_vax_history[this_vax_history$dose == d & this_vax_history$date == as.Date(date_now) - vaxCovDelay$delay[vaxCovDelay$dose == d],]) >0){
VR_this_step$doses[VR_this_step$dose == d & VR_this_step$age_group == age_group_labels[i]] =
this_vax_history$doses_delivered_this_date[this_vax_history$date ==  as.Date(date_now) - vaxCovDelay$delay[vaxCovDelay$dose == d] &
this_vax_history$dose==d &
this_vax_history$age_group == age_group_labels[i]]
}
}
}
dose1_expected %>% filter(date == date_now & doses_delivered_this_date>0)
VR_this_step
i
increase = rep(0,num_vax_doses)
for (d in 1:D){
increase[d] = VR_this_step$doses[VR_this_step$dose == d & VR_this_step$age_group == age_group_labels[i]]
}
increase
prop = rep(0,num_vax_doses) #prop in S,E,I or R in vaccine groups
for (d in 0:D){
if (d==0){
prop[d+1] = prev_state$pop[prev_state$class == class & prev_state$risk_group == this_risk_group & prev_state$vaccine_type == "unvaccinated" & prev_state$age_group == age_group_labels[i]]/
sum(prev_state$pop[prev_state$vaccine_type == "unvaccinated" & prev_state$risk_group == this_risk_group & prev_state$age_group == age_group_labels[i]])
} else{
prop[d+1] = prev_state$pop[prev_state$class == class & prev_state$risk_group == this_risk_group & prev_state$vaccine_type == this_vax &  prev_state$dose == d & prev_state$age_group == age_group_labels[i]]/
sum(prev_state$pop[prev_state$risk_group == this_risk_group & prev_state$vaccine_type == this_vax & prev_state$dose == d & prev_state$age_group == age_group_labels[i]])
}
if (is.nan(prop[d+1]) == TRUE){prop[d+1]=0}
}
prop
j
j=3
class=class_name_list[j]
prop = rep(0,num_vax_doses) #prop in S,E,I or R in vaccine groups
for (d in 0:D){
if (d==0){
prop[d+1] = prev_state$pop[prev_state$class == class & prev_state$risk_group == this_risk_group & prev_state$vaccine_type == "unvaccinated" & prev_state$age_group == age_group_labels[i]]/
sum(prev_state$pop[prev_state$vaccine_type == "unvaccinated" & prev_state$risk_group == this_risk_group & prev_state$age_group == age_group_labels[i]])
} else{
prop[d+1] = prev_state$pop[prev_state$class == class & prev_state$risk_group == this_risk_group & prev_state$vaccine_type == this_vax &  prev_state$dose == d & prev_state$age_group == age_group_labels[i]]/
sum(prev_state$pop[prev_state$risk_group == this_risk_group & prev_state$vaccine_type == this_vax & prev_state$dose == d & prev_state$age_group == age_group_labels[i]])
}
if (is.nan(prop[d+1]) == TRUE){prop[d+1]=0}
}
prop
dose1_expected = vaccination_history_TRUE %>%
mutate(date = date + vaxCovDelay$delay[vaxCovDelay$dose == 1]) %>%
filter(risk_group == risk_group_name & date == date_now & dose == 1)
dose1_expected %>% filter(date == date_now & doses_delivered_this_date>0)
dose1_existing = next_state %>%
filter(dose == 1)
vaccination_history_TRUE %>% filter(doses_delivered_this_date>0)
sum(dose1_expected$doses_delivered_this_date)
sum(dose1_existing$pop)
next_state=prev_state # initialise next state
### Include today's vaccinations
for (r in 1:RISK){
this_risk_group = risk_group_labels[r]
for (t in 1:num_vax_types){ #iterating over vaccine types
this_vax = vax_type_list[t]
this_vax_history = vaccination_history_FINAL[vaccination_history_FINAL$vaccine_type == this_vax & vaccination_history_FINAL$risk_group == this_risk_group,]
# (1/3) recorded vax
VR_this_step = crossing(dose = seq(1:D),
age_group = age_group_labels,
doses = 0)
for (d in 1:D){
for (i in 2:J){ #ASSUMPTION that don't vaccinate 0-4
if (nrow(this_vax_history[this_vax_history$dose == d & this_vax_history$date == as.Date(date_now) - vaxCovDelay$delay[vaxCovDelay$dose == d],]) >0){
VR_this_step$doses[VR_this_step$dose == d & VR_this_step$age_group == age_group_labels[i]] =
this_vax_history$doses_delivered_this_date[this_vax_history$date ==  as.Date(date_now) - vaxCovDelay$delay[vaxCovDelay$dose == d] &
this_vax_history$dose==d &
this_vax_history$age_group == age_group_labels[i]]
}
}
}
for (i in 1:num_age_groups){ # across age groups
increase = rep(0,num_vax_doses)
for (d in 1:D){
increase[d] = VR_this_step$doses[VR_this_step$dose == d & VR_this_step$age_group == age_group_labels[i]]
}
for (j in 1:4){ #ASSUMPTION: all SEIR vaccinated
class=class_name_list[j]
prop = rep(0,num_vax_doses) #prop in S,E,I or R in vaccine groups
for (d in 0:D){
if (d==0){
prop[d+1] = prev_state$pop[prev_state$class == class & prev_state$risk_group == this_risk_group & prev_state$vaccine_type == "unvaccinated" & prev_state$age_group == age_group_labels[i]]/
sum(prev_state$pop[prev_state$vaccine_type == "unvaccinated" & prev_state$risk_group == this_risk_group & prev_state$age_group == age_group_labels[i]])
} else{
prop[d+1] = prev_state$pop[prev_state$class == class & prev_state$risk_group == this_risk_group & prev_state$vaccine_type == this_vax &  prev_state$dose == d & prev_state$age_group == age_group_labels[i]]/
sum(prev_state$pop[prev_state$risk_group == this_risk_group & prev_state$vaccine_type == this_vax & prev_state$dose == d & prev_state$age_group == age_group_labels[i]])
}
if (is.nan(prop[d+1]) == TRUE){prop[d+1]=0}
}
next_state$pop[next_state$class == class & next_state$risk_group == this_risk_group & next_state$vaccine_type == "unvaccinated" & next_state$age_group == age_group_labels[i]] =
next_state$pop[next_state$class == class & next_state$risk_group == this_risk_group & next_state$vaccine_type == "unvaccinated" & next_state$age_group == age_group_labels[i]] - increase[1]* prop[1]
for (d in 1:(D-1)){
next_state$pop[next_state$class == class & next_state$risk_group == this_risk_group & next_state$vaccine_type == this_vax & next_state$dose == d & next_state$age_group == age_group_labels[i]] =
next_state$pop[ next_state$class == class & next_state$risk_group == this_risk_group & next_state$vaccine_type == this_vax & next_state$dose == d & next_state$age_group == age_group_labels[i]] + increase[d]*prop[d]-increase[d+1]*prop[d+1]
}
for (d in D){
next_state$pop[next_state$class == class & next_state$risk_group == this_risk_group & next_state$vaccine_type == this_vax & next_state$dose == D & next_state$age_group == age_group_labels[i]] =
next_state$pop[next_state$class == class & next_state$risk_group == this_risk_group & next_state$vaccine_type == this_vax & next_state$dose == D & next_state$age_group == age_group_labels[i]] + increase[D] * prop[D]
}
}
}
}
}
sum(dose1_expected$doses_delivered_this_date)
sum(dose1_existing$pop)
dose1_expected %>% group_by(vaccine_type,dose) %>% summarise(sum=doses_delivered_this_date)
dose1_expected %>% ungroup() %>% group_by(vaccine_type,dose) %>% summarise(sum=doses_delivered_this_date)
unique(dose1_expected$vaccine_type)
as.data.frame(dose1_expected) %>% ungroup() %>% group_by(vaccine_type,dose) %>% summarise(sum=doses_delivered_this_date)
workshop = as.data.frame(dose1_expected) %>% ungroup() %>% group_by(vaccine_type,dose) %>% summarise(sum=doses_delivered_this_date)
View(workshop)
workshop = dose1_expected %>% ungroup() %>% group_by(vaccine_type,dose) %>% summarise(sum=doses_delivered_this_date)
workshop = dose1_expected %>% ungroup() %>%  summarise(sum=doses_delivered_this_date)
dose1_expected
