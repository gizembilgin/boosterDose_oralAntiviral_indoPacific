VA =  eligible_pop %>%
select(age_group,dose,doses_delivered,priority) %>%
mutate(doses_left = doses_delivered)
#_______________________________________________________________________________
#####(3/3) Distribute between days #############################################
# we are going to use:
# (1) vax_strategy_roll_out_speed - max doses delivered per day
# (2) vax_strategy_start_date - first day of doses delivered
vax_strategy_delivery_timeframe = vax_strategy_num_doses/vax_strategy_roll_out_speed #(days)
vax_delivery_outline = data.frame(as.numeric(),as.numeric(),as.character(),as.numeric())
colnames(vax_delivery_outline) = c('day','dose','age_group','doses_delivered')
priority_num = 1
priority_age = as.character(unique(VA$age_group[VA$priority == priority_num]))
daily_avaliable_doses = data.frame(day=1:vax_strategy_delivery_timeframe,
avaliable = vax_strategy_roll_out_speed)
day = 1
avaliable = daily_avaliable_doses$avaliable[daily_avaliable_doses$day == day]
while(avaliable>0){
if(VA$doses_left[VA$priority == priority_num & VA$dose == 1]>0){
#if(sum(VA$doses_left[VA$priority == priority_num])>0){
#i.e., while we still have doses to deliver in this priority group
#COMEBACK - covering 1st without 2nd first!
if(vax_dose_strategy >1 & (VA$doses_left[VA$priority == priority_num & VA$dose == 2]-VA$doses_left[VA$priority == priority_num & VA$dose == 1])>0){
}
if(VA$doses_left[VA$priority == priority_num & VA$dose == 1] >= avaliable/vax_dose_strategy){
#if number to deliver as complete 'dose' strategy > available doses
#NB: check for dose 1 even when two dose strategy as dose 2 > dose 1 and result in -ve dose one!
vax_delivery_outline = rbind(vax_delivery_outline,
cbind(day = day,
dose = 1,
age_group = priority_age,
doses_delivered = avaliable/vax_dose_strategy))
VA$doses_left[VA$priority == priority_num & VA$dose == 1] =
VA$doses_left[VA$priority == priority_num & VA$dose == 1] - avaliable/vax_dose_strategy
if (vax_dose_strategy == 2){
vax_delivery_outline = rbind(vax_delivery_outline,
cbind(day = day + vax_strategy_vaccine_interval,
dose = 2,
age_group = priority_age,
doses_delivered = avaliable/vax_dose_strategy))
VA$doses_left[VA$priority == priority_num & VA$dose == 2] =
VA$doses_left[VA$priority == priority_num & VA$dose == 2] - avaliable/vax_dose_strategy
daily_avaliable_doses$avaliable[daily_avaliable_doses$day == day+vax_strategy_vaccine_interval] =
daily_avaliable_doses$avaliable[daily_avaliable_doses$day == day+vax_strategy_vaccine_interval] - avaliable/vax_dose_strategy
}
avaliable = 0
}
if(VA$doses_left[VA$priority == priority_num & VA$dose == 1] < avaliable/vax_dose_strategy){
#if number to deliver in 'complete' schedule < available doses
vax_delivery_outline = rbind(vax_delivery_outline,
cbind(day = day ,
dose = 1,
age_group = priority_age,
doses_delivered = VA$doses_left[VA$priority == priority_num & VA$dose == 1]))
if (vax_dose_strategy == 2){
vax_delivery_outline = rbind(vax_delivery_outline,
cbind(day = day + vax_strategy_vaccine_interval,
dose = 2,
age_group = priority_age,
doses_delivered = VA$doses_left[VA$priority == priority_num & VA$dose == 1]))
#same doses delivered to second dose as to first!
VA$doses_left[VA$priority == priority_num & VA$dose == 2] =
VA$doses_left[VA$priority == priority_num & VA$dose == 2] - VA$doses_left[VA$priority == priority_num & VA$dose == 1]
daily_avaliable_doses$avaliable[daily_avaliable_doses$day == day+vax_strategy_vaccine_interval] =
daily_avaliable_doses$avaliable[daily_avaliable_doses$day == day+vax_strategy_vaccine_interval] - VA$doses_left[VA$priority == priority_num & VA$dose == 1]
}
avaliable = avaliable - VA$doses_left[VA$priority == priority_num & VA$dose == 1]
}
#} else if(sum(VA$doses_left[VA$priority == priority_num])==0){
} else if (VA$doses_left[VA$priority == priority_num & VA$dose == 1] ==0){
priority_num = priority_num+1
priority_age = as.character(unique(VA$age_group[VA$priority == priority_num]))
}
}
avaliable
VA =  eligible_pop %>%
select(age_group,dose,doses_delivered,priority) %>%
mutate(doses_left = doses_delivered)
#_______________________________________________________________________________
#####(3/3) Distribute between days #############################################
# we are going to use:
# (1) vax_strategy_roll_out_speed - max doses delivered per day
# (2) vax_strategy_start_date - first day of doses delivered
vax_strategy_delivery_timeframe = vax_strategy_num_doses/vax_strategy_roll_out_speed #(days)
vax_delivery_outline = data.frame(as.numeric(),as.numeric(),as.character(),as.numeric())
colnames(vax_delivery_outline) = c('day','dose','age_group','doses_delivered')
priority_num = 1
priority_age = as.character(unique(VA$age_group[VA$priority == priority_num]))
daily_avaliable_doses = data.frame(day=1:vax_strategy_delivery_timeframe,
avaliable = vax_strategy_roll_out_speed)
#COMEBACK = need to correct last day so don't overshoot avaliable doses
day = 1
avaliable = daily_avaliable_doses$avaliable[daily_avaliable_doses$day == day]
if(VA$doses_left[VA$priority == priority_num & VA$dose == 1]>0){
#if(sum(VA$doses_left[VA$priority == priority_num])>0){
#i.e., while we still have doses to deliver in this priority group
#COMEBACK - covering 1st without 2nd first!
if(vax_dose_strategy >1 & (VA$doses_left[VA$priority == priority_num & VA$dose == 2]-VA$doses_left[VA$priority == priority_num & VA$dose == 1])>0){
}
if(VA$doses_left[VA$priority == priority_num & VA$dose == 1] >= avaliable/vax_dose_strategy){
#if number to deliver as complete 'dose' strategy > available doses
#NB: check for dose 1 even when two dose strategy as dose 2 > dose 1 and result in -ve dose one!
vax_delivery_outline = rbind(vax_delivery_outline,
cbind(day = day,
dose = 1,
age_group = priority_age,
doses_delivered = avaliable/vax_dose_strategy))
VA$doses_left[VA$priority == priority_num & VA$dose == 1] =
VA$doses_left[VA$priority == priority_num & VA$dose == 1] - avaliable/vax_dose_strategy
if (vax_dose_strategy == 2){
vax_delivery_outline = rbind(vax_delivery_outline,
cbind(day = day + vax_strategy_vaccine_interval,
dose = 2,
age_group = priority_age,
doses_delivered = avaliable/vax_dose_strategy))
VA$doses_left[VA$priority == priority_num & VA$dose == 2] =
VA$doses_left[VA$priority == priority_num & VA$dose == 2] - avaliable/vax_dose_strategy
daily_avaliable_doses$avaliable[daily_avaliable_doses$day == day+vax_strategy_vaccine_interval] =
daily_avaliable_doses$avaliable[daily_avaliable_doses$day == day+vax_strategy_vaccine_interval] - avaliable/vax_dose_strategy
}
avaliable = 0
}
if(VA$doses_left[VA$priority == priority_num & VA$dose == 1] < avaliable/vax_dose_strategy){
#if number to deliver in 'complete' schedule < available doses
vax_delivery_outline = rbind(vax_delivery_outline,
cbind(day = day ,
dose = 1,
age_group = priority_age,
doses_delivered = VA$doses_left[VA$priority == priority_num & VA$dose == 1]))
if (vax_dose_strategy == 2){
vax_delivery_outline = rbind(vax_delivery_outline,
cbind(day = day + vax_strategy_vaccine_interval,
dose = 2,
age_group = priority_age,
doses_delivered = VA$doses_left[VA$priority == priority_num & VA$dose == 1]))
#same doses delivered to second dose as to first!
VA$doses_left[VA$priority == priority_num & VA$dose == 2] =
VA$doses_left[VA$priority == priority_num & VA$dose == 2] - VA$doses_left[VA$priority == priority_num & VA$dose == 1]
daily_avaliable_doses$avaliable[daily_avaliable_doses$day == day+vax_strategy_vaccine_interval] =
daily_avaliable_doses$avaliable[daily_avaliable_doses$day == day+vax_strategy_vaccine_interval] - VA$doses_left[VA$priority == priority_num & VA$dose == 1]
}
avaliable = avaliable - VA$doses_left[VA$priority == priority_num & VA$dose == 1]
}
#} else if(sum(VA$doses_left[VA$priority == priority_num])==0){
} else if (VA$doses_left[VA$priority == priority_num & VA$dose == 1] ==0){
priority_num = priority_num+1
priority_age = as.character(unique(VA$age_group[VA$priority == priority_num]))
}
VA$doses_left[VA$priority == priority_num & VA$dose == 1] >= avaliable/vax_dose_strategy
VA$doses_left[VA$priority == priority_num & VA$dose == 1]
VA =  eligible_pop %>%
select(age_group,dose,doses_delivered,priority) %>%
mutate(doses_left = doses_delivered)
library(tidyverse)
library(readr)
library(deSolve)
library(rvest)
library(ggplot2)
library(gridExtra)
VA =  eligible_pop %>%
select(age_group,dose,doses_delivered,priority) %>%
mutate(doses_left = doses_delivered)
#_______________________________________________________________________________
#####(3/3) Distribute between days #############################################
# we are going to use:
# (1) vax_strategy_roll_out_speed - max doses delivered per day
# (2) vax_strategy_start_date - first day of doses delivered
vax_strategy_delivery_timeframe = vax_strategy_num_doses/vax_strategy_roll_out_speed #(days)
vax_delivery_outline = data.frame(as.numeric(),as.numeric(),as.character(),as.numeric())
colnames(vax_delivery_outline) = c('day','dose','age_group','doses_delivered')
priority_num = 1
priority_age = as.character(unique(VA$age_group[VA$priority == priority_num]))
daily_avaliable_doses = data.frame(day=1:vax_strategy_delivery_timeframe,
avaliable = vax_strategy_roll_out_speed)
day=1
avaliable = daily_avaliable_doses$avaliable[daily_avaliable_doses$day == day]
while(avaliable>0){
if(VA$doses_left[VA$priority == priority_num & VA$dose == 1]>0){
#if(sum(VA$doses_left[VA$priority == priority_num])>0){
#i.e., while we still have doses to deliver in this priority group
#COMEBACK - covering 1st without 2nd first!
if(vax_dose_strategy >1 & (VA$doses_left[VA$priority == priority_num & VA$dose == 2]-VA$doses_left[VA$priority == priority_num & VA$dose == 1])>0){
}
if(VA$doses_left[VA$priority == priority_num & VA$dose == 1] >= avaliable/vax_dose_strategy){
#if number to deliver as complete 'dose' strategy > available doses
#NB: check for dose 1 even when two dose strategy as dose 2 > dose 1 and result in -ve dose one!
vax_delivery_outline = rbind(vax_delivery_outline,
cbind(day = day,
dose = 1,
age_group = priority_age,
doses_delivered = avaliable/vax_dose_strategy))
VA$doses_left[VA$priority == priority_num & VA$dose == 1] =
VA$doses_left[VA$priority == priority_num & VA$dose == 1] - avaliable/vax_dose_strategy
if (vax_dose_strategy == 2){
vax_delivery_outline = rbind(vax_delivery_outline,
cbind(day = day + vax_strategy_vaccine_interval,
dose = 2,
age_group = priority_age,
doses_delivered = avaliable/vax_dose_strategy))
VA$doses_left[VA$priority == priority_num & VA$dose == 2] =
VA$doses_left[VA$priority == priority_num & VA$dose == 2] - avaliable/vax_dose_strategy
daily_avaliable_doses$avaliable[daily_avaliable_doses$day == day+vax_strategy_vaccine_interval] =
daily_avaliable_doses$avaliable[daily_avaliable_doses$day == day+vax_strategy_vaccine_interval] - avaliable/vax_dose_strategy
}
avaliable = 0
}
if(VA$doses_left[VA$priority == priority_num & VA$dose == 1] < avaliable/vax_dose_strategy){
#if number to deliver in 'complete' schedule < available doses
vax_delivery_outline = rbind(vax_delivery_outline,
cbind(day = day ,
dose = 1,
age_group = priority_age,
doses_delivered = VA$doses_left[VA$priority == priority_num & VA$dose == 1]))
if (vax_dose_strategy == 2){
vax_delivery_outline = rbind(vax_delivery_outline,
cbind(day = day + vax_strategy_vaccine_interval,
dose = 2,
age_group = priority_age,
doses_delivered = VA$doses_left[VA$priority == priority_num & VA$dose == 1]))
#same doses delivered to second dose as to first!
VA$doses_left[VA$priority == priority_num & VA$dose == 2] =
VA$doses_left[VA$priority == priority_num & VA$dose == 2] - VA$doses_left[VA$priority == priority_num & VA$dose == 1]
daily_avaliable_doses$avaliable[daily_avaliable_doses$day == day+vax_strategy_vaccine_interval] =
daily_avaliable_doses$avaliable[daily_avaliable_doses$day == day+vax_strategy_vaccine_interval] - VA$doses_left[VA$priority == priority_num & VA$dose == 1]
}
avaliable = avaliable - VA$doses_left[VA$priority == priority_num & VA$dose == 1]
}
#} else if(sum(VA$doses_left[VA$priority == priority_num])==0){
} else if (VA$doses_left[VA$priority == priority_num & VA$dose == 1] ==0){
priority_num = priority_num+1
priority_age = as.character(unique(VA$age_group[VA$priority == priority_num]))
}
}
day = 2
avaliable = daily_avaliable_doses$avaliable[daily_avaliable_doses$day == day]
while(avaliable>0){
if(VA$doses_left[VA$priority == priority_num & VA$dose == 1]>0){
#if(sum(VA$doses_left[VA$priority == priority_num])>0){
#i.e., while we still have doses to deliver in this priority group
#COMEBACK - covering 1st without 2nd first!
if(vax_dose_strategy >1 & (VA$doses_left[VA$priority == priority_num & VA$dose == 2]-VA$doses_left[VA$priority == priority_num & VA$dose == 1])>0){
}
if(VA$doses_left[VA$priority == priority_num & VA$dose == 1] >= avaliable/vax_dose_strategy){
#if number to deliver as complete 'dose' strategy > available doses
#NB: check for dose 1 even when two dose strategy as dose 2 > dose 1 and result in -ve dose one!
vax_delivery_outline = rbind(vax_delivery_outline,
cbind(day = day,
dose = 1,
age_group = priority_age,
doses_delivered = avaliable/vax_dose_strategy))
VA$doses_left[VA$priority == priority_num & VA$dose == 1] =
VA$doses_left[VA$priority == priority_num & VA$dose == 1] - avaliable/vax_dose_strategy
if (vax_dose_strategy == 2){
vax_delivery_outline = rbind(vax_delivery_outline,
cbind(day = day + vax_strategy_vaccine_interval,
dose = 2,
age_group = priority_age,
doses_delivered = avaliable/vax_dose_strategy))
VA$doses_left[VA$priority == priority_num & VA$dose == 2] =
VA$doses_left[VA$priority == priority_num & VA$dose == 2] - avaliable/vax_dose_strategy
daily_avaliable_doses$avaliable[daily_avaliable_doses$day == day+vax_strategy_vaccine_interval] =
daily_avaliable_doses$avaliable[daily_avaliable_doses$day == day+vax_strategy_vaccine_interval] - avaliable/vax_dose_strategy
}
avaliable = 0
}
if(VA$doses_left[VA$priority == priority_num & VA$dose == 1] < avaliable/vax_dose_strategy){
#if number to deliver in 'complete' schedule < available doses
vax_delivery_outline = rbind(vax_delivery_outline,
cbind(day = day ,
dose = 1,
age_group = priority_age,
doses_delivered = VA$doses_left[VA$priority == priority_num & VA$dose == 1]))
if (vax_dose_strategy == 2){
vax_delivery_outline = rbind(vax_delivery_outline,
cbind(day = day + vax_strategy_vaccine_interval,
dose = 2,
age_group = priority_age,
doses_delivered = VA$doses_left[VA$priority == priority_num & VA$dose == 1]))
#same doses delivered to second dose as to first!
VA$doses_left[VA$priority == priority_num & VA$dose == 2] =
VA$doses_left[VA$priority == priority_num & VA$dose == 2] - VA$doses_left[VA$priority == priority_num & VA$dose == 1]
daily_avaliable_doses$avaliable[daily_avaliable_doses$day == day+vax_strategy_vaccine_interval] =
daily_avaliable_doses$avaliable[daily_avaliable_doses$day == day+vax_strategy_vaccine_interval] - VA$doses_left[VA$priority == priority_num & VA$dose == 1]
}
avaliable = avaliable - VA$doses_left[VA$priority == priority_num & VA$dose == 1]
}
#} else if(sum(VA$doses_left[VA$priority == priority_num])==0){
} else if (VA$doses_left[VA$priority == priority_num & VA$dose == 1] ==0){
priority_num = priority_num+1
priority_age = as.character(unique(VA$age_group[VA$priority == priority_num]))
}
}
day = 3
avaliable = daily_avaliable_doses$avaliable[daily_avaliable_doses$day == day]
while(avaliable>0){
if(VA$doses_left[VA$priority == priority_num & VA$dose == 1]>0){
#if(sum(VA$doses_left[VA$priority == priority_num])>0){
#i.e., while we still have doses to deliver in this priority group
#COMEBACK - covering 1st without 2nd first!
if(vax_dose_strategy >1 & (VA$doses_left[VA$priority == priority_num & VA$dose == 2]-VA$doses_left[VA$priority == priority_num & VA$dose == 1])>0){
}
if(VA$doses_left[VA$priority == priority_num & VA$dose == 1] >= avaliable/vax_dose_strategy){
#if number to deliver as complete 'dose' strategy > available doses
#NB: check for dose 1 even when two dose strategy as dose 2 > dose 1 and result in -ve dose one!
vax_delivery_outline = rbind(vax_delivery_outline,
cbind(day = day,
dose = 1,
age_group = priority_age,
doses_delivered = avaliable/vax_dose_strategy))
VA$doses_left[VA$priority == priority_num & VA$dose == 1] =
VA$doses_left[VA$priority == priority_num & VA$dose == 1] - avaliable/vax_dose_strategy
if (vax_dose_strategy == 2){
vax_delivery_outline = rbind(vax_delivery_outline,
cbind(day = day + vax_strategy_vaccine_interval,
dose = 2,
age_group = priority_age,
doses_delivered = avaliable/vax_dose_strategy))
VA$doses_left[VA$priority == priority_num & VA$dose == 2] =
VA$doses_left[VA$priority == priority_num & VA$dose == 2] - avaliable/vax_dose_strategy
daily_avaliable_doses$avaliable[daily_avaliable_doses$day == day+vax_strategy_vaccine_interval] =
daily_avaliable_doses$avaliable[daily_avaliable_doses$day == day+vax_strategy_vaccine_interval] - avaliable/vax_dose_strategy
}
avaliable = 0
}
if(VA$doses_left[VA$priority == priority_num & VA$dose == 1] < avaliable/vax_dose_strategy){
#if number to deliver in 'complete' schedule < available doses
vax_delivery_outline = rbind(vax_delivery_outline,
cbind(day = day ,
dose = 1,
age_group = priority_age,
doses_delivered = VA$doses_left[VA$priority == priority_num & VA$dose == 1]))
if (vax_dose_strategy == 2){
vax_delivery_outline = rbind(vax_delivery_outline,
cbind(day = day + vax_strategy_vaccine_interval,
dose = 2,
age_group = priority_age,
doses_delivered = VA$doses_left[VA$priority == priority_num & VA$dose == 1]))
#same doses delivered to second dose as to first!
VA$doses_left[VA$priority == priority_num & VA$dose == 2] =
VA$doses_left[VA$priority == priority_num & VA$dose == 2] - VA$doses_left[VA$priority == priority_num & VA$dose == 1]
daily_avaliable_doses$avaliable[daily_avaliable_doses$day == day+vax_strategy_vaccine_interval] =
daily_avaliable_doses$avaliable[daily_avaliable_doses$day == day+vax_strategy_vaccine_interval] - VA$doses_left[VA$priority == priority_num & VA$dose == 1]
}
avaliable = avaliable - VA$doses_left[VA$priority == priority_num & VA$dose == 1]
}
#} else if(sum(VA$doses_left[VA$priority == priority_num])==0){
} else if (VA$doses_left[VA$priority == priority_num & VA$dose == 1] ==0){
priority_num = priority_num+1
priority_age = as.character(unique(VA$age_group[VA$priority == priority_num]))
}
}
VA =  eligible_pop %>%
select(age_group,dose,doses_delivered,priority) %>%
mutate(doses_left = doses_delivered)
#_______________________________________________________________________________
#####(3/3) Distribute between days #############################################
# we are going to use:
# (1) vax_strategy_roll_out_speed - max doses delivered per day
# (2) vax_strategy_start_date - first day of doses delivered
vax_strategy_delivery_timeframe = vax_strategy_num_doses/vax_strategy_roll_out_speed #(days)
vax_delivery_outline = data.frame(as.numeric(),as.numeric(),as.character(),as.numeric())
colnames(vax_delivery_outline) = c('day','dose','age_group','doses_delivered')
priority_num = 1
priority_age = as.character(unique(VA$age_group[VA$priority == priority_num]))
daily_avaliable_doses = data.frame(day=1:vax_strategy_delivery_timeframe,
avaliable = vax_strategy_roll_out_speed)
#COMEBACK = need to correct last day so don't overshoot avaliable doses
#for (day in 1:vax_strategy_delivery_timeframe){
for (day in 1:14){
avaliable = daily_avaliable_doses$avaliable[daily_avaliable_doses$day == day]
while(avaliable>0){
if(VA$doses_left[VA$priority == priority_num & VA$dose == 1]>0){
#if(sum(VA$doses_left[VA$priority == priority_num])>0){
#i.e., while we still have doses to deliver in this priority group
#COMEBACK - covering 1st without 2nd first!
if(vax_dose_strategy >1 & (VA$doses_left[VA$priority == priority_num & VA$dose == 2]-VA$doses_left[VA$priority == priority_num & VA$dose == 1])>0){
}
if(VA$doses_left[VA$priority == priority_num & VA$dose == 1] >= avaliable/vax_dose_strategy){
#if number to deliver as complete 'dose' strategy > available doses
#NB: check for dose 1 even when two dose strategy as dose 2 > dose 1 and result in -ve dose one!
vax_delivery_outline = rbind(vax_delivery_outline,
cbind(day = day,
dose = 1,
age_group = priority_age,
doses_delivered = avaliable/vax_dose_strategy))
VA$doses_left[VA$priority == priority_num & VA$dose == 1] =
VA$doses_left[VA$priority == priority_num & VA$dose == 1] - avaliable/vax_dose_strategy
if (vax_dose_strategy == 2){
vax_delivery_outline = rbind(vax_delivery_outline,
cbind(day = day + vax_strategy_vaccine_interval,
dose = 2,
age_group = priority_age,
doses_delivered = avaliable/vax_dose_strategy))
VA$doses_left[VA$priority == priority_num & VA$dose == 2] =
VA$doses_left[VA$priority == priority_num & VA$dose == 2] - avaliable/vax_dose_strategy
daily_avaliable_doses$avaliable[daily_avaliable_doses$day == day+vax_strategy_vaccine_interval] =
daily_avaliable_doses$avaliable[daily_avaliable_doses$day == day+vax_strategy_vaccine_interval] - avaliable/vax_dose_strategy
}
avaliable = 0
}
if(VA$doses_left[VA$priority == priority_num & VA$dose == 1] < avaliable/vax_dose_strategy){
#if number to deliver in 'complete' schedule < available doses
vax_delivery_outline = rbind(vax_delivery_outline,
cbind(day = day ,
dose = 1,
age_group = priority_age,
doses_delivered = VA$doses_left[VA$priority == priority_num & VA$dose == 1]))
if (vax_dose_strategy == 2){
vax_delivery_outline = rbind(vax_delivery_outline,
cbind(day = day + vax_strategy_vaccine_interval,
dose = 2,
age_group = priority_age,
doses_delivered = VA$doses_left[VA$priority == priority_num & VA$dose == 1]))
#same doses delivered to second dose as to first!
VA$doses_left[VA$priority == priority_num & VA$dose == 2] =
VA$doses_left[VA$priority == priority_num & VA$dose == 2] - VA$doses_left[VA$priority == priority_num & VA$dose == 1]
daily_avaliable_doses$avaliable[daily_avaliable_doses$day == day+vax_strategy_vaccine_interval] =
daily_avaliable_doses$avaliable[daily_avaliable_doses$day == day+vax_strategy_vaccine_interval] - VA$doses_left[VA$priority == priority_num & VA$dose == 1]
}
avaliable = avaliable - VA$doses_left[VA$priority == priority_num & VA$dose == 1]
}
#} else if(sum(VA$doses_left[VA$priority == priority_num])==0){
} else if (VA$doses_left[VA$priority == priority_num & VA$dose == 1] ==0){
priority_num = priority_num+1
priority_age = as.character(unique(VA$age_group[VA$priority == priority_num]))
}
}
}
VA =  eligible_pop %>%
select(age_group,dose,doses_delivered,priority) %>%
mutate(doses_left = doses_delivered)
#_______________________________________________________________________________
#####(3/3) Distribute between days #############################################
# we are going to use:
# (1) vax_strategy_roll_out_speed - max doses delivered per day
# (2) vax_strategy_start_date - first day of doses delivered
vax_strategy_delivery_timeframe = vax_strategy_num_doses/vax_strategy_roll_out_speed #(days)
vax_delivery_outline = data.frame(as.numeric(),as.numeric(),as.character(),as.numeric())
colnames(vax_delivery_outline) = c('day','dose','age_group','doses_delivered')
priority_num = 1
priority_age = as.character(unique(VA$age_group[VA$priority == priority_num]))
daily_avaliable_doses = data.frame(day=1:vax_strategy_delivery_timeframe,
avaliable = vax_strategy_roll_out_speed)
#COMEBACK = need to correct last day so don't overshoot avaliable doses
#for (day in 1:vax_strategy_delivery_timeframe){
for (day in 1:18){
#for (day in 1:vax_strategy_delivery_timeframe){
for (day in 1:18){
avaliable = daily_avaliable_doses$avaliable[daily_avaliable_doses$day == day]
while(avaliable>0){
if(VA$doses_left[VA$priority == priority_num & VA$dose == 1]>0){
#if(sum(VA$doses_left[VA$priority == priority_num])>0){
#i.e., while we still have doses to deliver in this priority group
#COMEBACK - covering 1st without 2nd first!
if(vax_dose_strategy >1 & (VA$doses_left[VA$priority == priority_num & VA$dose == 2]-VA$doses_left[VA$priority == priority_num & VA$dose == 1])>0){
}
if(VA$doses_left[VA$priority == priority_num & VA$dose == 1] >= avaliable/vax_dose_strategy){
#if number to deliver as complete 'dose' strategy > available doses
#NB: check for dose 1 even when two dose strategy as dose 2 > dose 1 and result in -ve dose one!
vax_delivery_outline = rbind(vax_delivery_outline,
cbind(day = day,
dose = 1,
age_group = priority_age,
doses_delivered = avaliable/vax_dose_strategy))
VA$doses_left[VA$priority == priority_num & VA$dose == 1] =
VA$doses_left[VA$priority == priority_num & VA$dose == 1] - avaliable/vax_dose_strategy
if (vax_dose_strategy == 2){
vax_delivery_outline = rbind(vax_delivery_outline,
cbind(day = day + vax_strategy_vaccine_interval,
dose = 2,
age_group = priority_age,
doses_delivered = avaliable/vax_dose_strategy))
VA$doses_left[VA$priority == priority_num & VA$dose == 2] =
VA$doses_left[VA$priority == priority_num & VA$dose == 2] - avaliable/vax_dose_strategy
daily_avaliable_doses$avaliable[daily_avaliable_doses$day == day+vax_strategy_vaccine_interval] =
daily_avaliable_doses$avaliable[daily_avaliable_doses$day == day+vax_strategy_vaccine_interval] - avaliable/vax_dose_strategy
}
avaliable = 0
}
if(VA$doses_left[VA$priority == priority_num & VA$dose == 1] < avaliable/vax_dose_strategy){
#if number to deliver in 'complete' schedule < available doses
vax_delivery_outline = rbind(vax_delivery_outline,
cbind(day = day ,
dose = 1,
age_group = priority_age,
doses_delivered = VA$doses_left[VA$priority == priority_num & VA$dose == 1]))
if (vax_dose_strategy == 2){
vax_delivery_outline = rbind(vax_delivery_outline,
cbind(day = day + vax_strategy_vaccine_interval,
dose = 2,
age_group = priority_age,
doses_delivered = VA$doses_left[VA$priority == priority_num & VA$dose == 1]))
#same doses delivered to second dose as to first!
VA$doses_left[VA$priority == priority_num & VA$dose == 2] =
VA$doses_left[VA$priority == priority_num & VA$dose == 2] - VA$doses_left[VA$priority == priority_num & VA$dose == 1]
daily_avaliable_doses$avaliable[daily_avaliable_doses$day == day+vax_strategy_vaccine_interval] =
daily_avaliable_doses$avaliable[daily_avaliable_doses$day == day+vax_strategy_vaccine_interval] - VA$doses_left[VA$priority == priority_num & VA$dose == 1]
}
avaliable = avaliable - VA$doses_left[VA$priority == priority_num & VA$dose == 1]
}
#} else if(sum(VA$doses_left[VA$priority == priority_num])==0){
} else if (VA$doses_left[VA$priority == priority_num & VA$dose == 1] ==0){
priority_num = priority_num+1
priority_age = as.character(unique(VA$age_group[VA$priority == priority_num]))
}
}
}
day = 19
avaliable = daily_avaliable_doses$avaliable[daily_avaliable_doses$day == day]
VA$doses_left[VA$priority == priority_num & VA$dose == 1]>0
VA$doses_left[VA$priority == priority_num & VA$dose == 1] >= avaliable/vax_dose_strategy
VA$doses_left[VA$priority == priority_num & VA$dose == 1] < avaliable/vax_dose_strategy
