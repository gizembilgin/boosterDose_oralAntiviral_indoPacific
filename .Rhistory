vax_delivery_outline$dose == 1 &
vax_delivery_outline$age_group == workshop_age] = workshop_calc
VA$doses_left[VA$age_group == workshop_age & VA$dose == 1] = VA$doses_left[VA$age_group == workshop_age & VA$dose == 1] - workshop_calc
if (vax_dose_strategy == 2){
vax_delivery_outline$doses_delivered[vax_delivery_outline$day == day + vax_strategy_vaccine_interval &
vax_delivery_outline$dose == 2 &
vax_delivery_outline$age_group == workshop_age] = workshop_calc
VA$doses_left[VA$age_group == workshop_age & VA$dose == 2] = VA$doses_left[VA$age_group == workshop_age & VA$dose == 2] - workshop_calc
}
}
avaliable = avaliable - workshop_doses
} else if (sum(VA$doses_left[VA$priority == priority_num])==0){
priority_num = priority_num+1
priority_group = as.character(unique(VA$age_group[VA$priority == priority_num]))
} else{
stop('negative doses left, reconsider!')
}
} #<end while loop>
}
### formating vax_delivery_outline to align with vaccination_history_TRUE
vax_delivery_outline$date = vax_strategy_start_date + (vax_delivery_outline$day-1)
vax_delivery_outline$vaccine_type = vax_strategy_vaccine_type
if (vax_strategy_vaccine_type %in% c("Moderna","Pfizer")){
vax_delivery_outline$vaccine_mode = 'mRNA'
} else if (vax_strategy_vaccine_type %in% c("AstraZeneca","Johnson & Johnson","Sinopharm","Sinovac")){
vax_delivery_outline$vaccine_mode = 'viral'
}
vax_delivery_outline$coverage_this_date = NA #shouldn't be used anyway
names(vax_delivery_outline)[names(vax_delivery_outline) == 'doses_delivered'] <-'doses_delivered_this_date'
vax_delivery_outline = vax_delivery_outline %>%
select(date,vaccine_type,vaccine_mode,dose,coverage_this_date,doses_delivered_this_date,age_group)
#CHECK
workshop = aggregate(vax_delivery_outline$doses_delivered_this_date,by=list(vax_delivery_outline$age_group),FUN=sum)
colnames(workshop) = c('age_group','doses')
if (round(sum(workshop$doses)) != round(sum(eligible_pop$doses_delivered))){stop('error line 331 of vax strategies function')}
round(sum(workshop$doses))
round(sum(eligible_pop$doses_delivered))
vax_strategy_num_doses
vax_strategy_roll_out_speed
restriction_date
vax_strategy_start_date
restriction_date - vax_strategy_start_date
as.numeric(restriction_date - vax_strategy_start_date) * vax_strategy_roll_out_speed
as.numeric(restriction_date - vax_strategy_start_date +1) * vax_strategy_roll_out_speed
if (round(sum(workshop$doses)) != round(sum(eligible_pop$doses_delivered))| #if not all doses delivered
round(as.numeric(restriction_date - vax_strategy_start_date +1) * vax_strategy_roll_out_speed) != round(sum(workshop$doses)) #and if not all doses at max speed
){stop('error line 331 of vax strategies function')}
ggplot(vax_delivery_outline) + geom_point(aes(x=date,y=doses_delivered_this_date,color=as.factor(age_group),shape=as.factor(dose)))
if (round(sum(workshop$doses)) != round(sum(eligible_pop$doses_delivered))| #if not all doses delivered
round(as.numeric(restriction_date - vax_strategy_start_date +1) * vax_strategy_roll_out_speed) != round(sum(workshop$doses)) #and if not all doses at max speed
){stop('error line 331 of vax strategies function')}
round(as.numeric(restriction_date - vax_strategy_start_date +1) * vax_strategy_roll_out_speed)
round(sum(workshop$doses))
if (round(sum(workshop$doses)) != round(sum(eligible_pop$doses_delivered))& #if not all doses delivered
round(as.numeric(restriction_date - vax_strategy_start_date +1) * vax_strategy_roll_out_speed) != round(sum(workshop$doses)) #and if not all doses at max speed
){stop('error line 331 of vax strategies function')}
source("C:/Users/u6044061/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/(SM run 1) prioritising primary doses.R", echo=TRUE)
if (round(sum(workshop$doses)) != round(sum(eligible_pop$doses_delivered)) & #if not all doses delivered
round(as.numeric(restriction_date - vax_strategy_start_date +1) * vax_strategy_roll_out_speed) != round(sum(workshop$doses)) #and if not all doses at max speed
){
stop('error line 331 of vax strategies function')}
restriction_date
restriction_date = NA
restriction_date > date_start
is.na(restriction_date) == FALSE
if (round(sum(workshop$doses)) != round(sum(eligible_pop$doses_delivered))) { #if not all doses delivered
if ( is.na(restriction_date) == FALSE &
round(as.numeric(restriction_date - vax_strategy_start_date +1) * vax_strategy_roll_out_speed) != round(sum(workshop$doses))){
} else{
stop('error line 331 of vax strategies function')
}
}
is.na(restriction_date) == FALSE
source("C:/Users/u6044061/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/(SM run 1) prioritising primary doses.R", echo=TRUE)
dicounting_rate
discounting_rate
source("C:/Users/u6044061/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/FleetAdmiral.R", echo=TRUE)
source("C:/Users/u6044061/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/FleetAdmiral.R", echo=TRUE)
source("C:/Users/u6044061/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/(run 2)_varying_coverage.R", echo=TRUE)
source("C:/Users/u6044061/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/(run 2)_varying_coverage.R", echo=TRUE)
### (2) Varying levels of coverage - w and w/out children
receipt = 2
outbreak_post_rollout = "off"
#Note: roll-out must be during outbreak, otherwise waning immunity makes vaccinating kids look like a bad idea
source(paste(getwd(),"/(run 2)_varying_coverage.R",sep=""))
averted_table
scenario_plot_list
section = 1
list_plot_commands = section_list[[section]]
list_plot_commands
workshop = warehouse_plot[warehouse_plot$label %in% list_plot_commands, ]
View(workshop)
plot_list = list()
#let's still plot with net outcomes (not differentiated by children and adults)
workshop = workshop %>%
group_by(date,outcome,label,day,time) %>%
summarise(proj = sum(proj),
proj_cum = sum(proj_cum))
for (section in 1:3){
list_plot_commands = section_list[[section]]
workshop = warehouse_plot[warehouse_plot$label %in% list_plot_commands, ]
#let's still plot with net outcomes (not differentiated by children and adults)
workshop = workshop %>%
group_by(date,outcome,label,day,time) %>%
summarise(proj = sum(proj),
proj_cum = sum(proj_cum))
plot_list = list()
for (i in 1:length(unique(workshop$outcome))){
outcome = unique(workshop$outcome)[i]
plot_list [[i]] <- ggplot(data=workshop[workshop$outcome==outcome,]) +
geom_point(aes(x=time,y=proj,color=as.factor(label))) +
labs(title=paste(outcome)) +
theme_bw() +
xlab("") +
ylab("")}
# 1 = death, 2 = hosp, 3 = severe_disease, 4 = YLL, 5 = cases
plot = ggarrange(plot_list[[5]], plot_list[[1]],
common.legend = TRUE,
legend="bottom")
annotate_figure(plot, top = text_grob('absolute outcome by scenario', face = 'bold', size = 16))
scenario_plot_list[[section]] = plot
}
scenario_plot_list
source("C:/Users/u6044061/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/FleetAdmiral.R", echo=TRUE)
source("C:/Users/u6044061/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/SpecialityMedic.R", echo=TRUE)
results_warehouse_SM[[1]][[3]]
render('SpecialityMedic_compiler.Rmd',output_file = file_name)
results_warehouse_SM_comorb = results_warehouse_SM
source("C:/Users/u6044061/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/SpecialityMedic.R", echo=TRUE)
warehouse_plot=results_warehouse[[1]][[2]]
#(A/B) absolute outcome plot
warehouse_plot = warehouse_plot %>% mutate(time = day)
plot_list = list()
for (i in 1:length(unique(warehouse_plot$outcome))){
outcome = unique(warehouse_plot$outcome)[i]
plot_list [[i]] <- ggplot(data=warehouse_plot[warehouse_plot$outcome==outcome,]) +
geom_point(aes(x=time,y=proj,color=as.factor(label))) +
labs(title=paste(outcome)) +
theme_bw() +
xlab("") +
ylab("")}
# 1 = death, 2 = hosp, 3 = severe_disease, 4 = YLL, 5 = cases
plot = ggarrange(plot_list[[5]], plot_list[[1]],
common.legend = TRUE,
legend="bottom")
annotate_figure(plot, top = text_grob('absolute outcome by scenario', face = 'bold', size = 16))
# 1 = death, 2 = hosp, 3 = severe_disease, 4 = YLL, 5 = cases
plot = ggarrange(plot_list[[4]], plot_list[[1]],
common.legend = TRUE,
legend="bottom")
annotate_figure(plot, top = text_grob('absolute outcome by scenario', face = 'bold', size = 16))
# 1 = death, 2 = hosp, 3 = severe_disease, 4 = YLL, 5 = cases
plot = ggarrange(plot_list[[3]], plot_list[[1]],
common.legend = TRUE,
legend="bottom")
annotate_figure(plot, top = text_grob('absolute outcome by scenario', face = 'bold', size = 16))
# 1 = death, 2 = hosp, 3 = severe_disease, 4 = YLL, 5 = cases
plot = ggarrange(plot_list[[3]], plot_list[[1]],
common.legend = TRUE,
legend="bottom")
annotate_figure(plot, top = text_grob('absolute outcome by scenario', face = 'bold', size = 16))
# 1 = death, 2 = hosp, 3 = severe_disease, 4 = YLL, 5 = cases
plot = ggarrange(plot_list[[5]], plot_list[[3]],
common.legend = TRUE,
legend="bottom")
annotate_figure(plot, top = text_grob('absolute outcome by scenario', face = 'bold', size = 16))
# 1 = death, 2 = hosp, 3 = severe_disease, 4 = YLL, 5 = cases
plot = ggarrange(plot_list[[5]], plot_list[[3]],
common.legend = TRUE,
legend="bottom")
annotate_figure(plot, top = text_grob('absolute outcome by scenario', face = 'bold', size = 16))
results_warehouse[[2]][[1]]
workshop = results_warehouse[[2]][[1]]
workshop_2 = workshop %>% ungroup %>%
group_by(scenario) %>%
summarise(death = sum(death),
hosp = sum(hosp),
severe_disease = sum(severe_disease),
YLL = sum(YLL),
cases = sum(cases)) %>%
mutate(macro_age_group = 'net')
workshop = rbind(workshop,workshop_2)
workshop
View(workshop)
workshop_2
#       (1/4) Setup
####################################################################
#load libraries
library(readr)
library(deSolve)
library(rvest)
library(ggplot2)
library(gridExtra)
library(ggpubr)
library(tidyverse)
results_warehouse_entry = results_warehouse[[1]]
warehouse_plot = results_warehouse_entry[[2]]
warehouse_table = results_warehouse_entry[[1]]
View(warehouse_table)
View(warehouse_plot)
plot_list = list()
for (i in 1:length(unique(warehouse_plot$outcome))){
outcome = unique(warehouse_plot$outcome)[i]
plot_list [[i]] <- ggplot(data=warehouse_plot[warehouse_plot$outcome==outcome,]) +
geom_point(aes(x=time,y=proj,color=as.factor(label))) +
labs(title=paste(outcome)) +
theme_bw() +
xlab("") +
ylab("")}
# 1 = death, 2 = hosp, 3 = severe_disease, 4 = YLL, 5 = cases
plot = ggarrange(plot_list[[5]], plot_list[[3]],
common.legend = TRUE,
legend="bottom")
annotate_figure(plot, top = text_grob('absolute outcome by scenario', face = 'bold', size = 16))
plot_list = list()
for (i in 1:length(unique(warehouse_plot$outcome))){
outcome = unique(warehouse_plot$outcome)[i]
plot_list [[i]] <- ggplot(data=warehouse_plot[warehouse_plot$outcome==outcome,]) +
geom_point(aes(x=time,y=proj,color=as.factor(label))) +
labs(title=paste(outcome)) +
theme_bw() +
xlab("") +
ylab("")}
# 1 = death, 2 = hosp, 3 = severe_disease, 4 = YLL, 5 = cases
plot = ggarrange(plot_list[[5]], plot_list[[3]],
common.legend = TRUE,
legend="bottom")
plot_list[[5]]
plot_list[[3]]
# 1 = death, 2 = hosp, 3 = severe_disease, 4 = YLL, 5 = cases
plot = ggarrange(plot_list[[5]], plot_list[[3]],
common.legend = TRUE,
legend="bottom")
plot_list = list()
for (i in 1:length(unique(warehouse_plot$outcome))){
outcome = unique(warehouse_plot$outcome)[i]
plot_list [[i]] <- ggplot(data=warehouse_plot[warehouse_plot$outcome==outcome,]) +
geom_point(aes(x=time,y=proj,color=as.factor(label))) +
labs(title=paste(outcome)) +
theme_bw() +
xlab("") +
ylab("")}
# 1 = death, 2 = hosp, 3 = severe_disease, 4 = YLL, 5 = cases
plot = ggarrange(plot_list[[5]], plot_list[[3]],
common.legend = TRUE,
legend="bottom")
### (1) Overarching trackers #####################################################################################################
warehouse_table = data.frame()
warehouse_plot = data.frame()
baseline_to_compare = "no further vaccine rollout"
### (4) Save outputs  ##################################################################################################
results_warehouse_entry = list()
results_warehouse_entry[[1]] = warehouse_table
#(A/B) absolute outcome plot
warehouse_plot = warehouse_plot %>% mutate(time = day)
plot_list = list()
for (i in 1:length(unique(warehouse_plot$outcome))){
outcome = unique(warehouse_plot$outcome)[i]
plot_list [[i]] <- ggplot(data=warehouse_plot[warehouse_plot$outcome==outcome,]) +
geom_point(aes(x=time,y=proj,color=as.factor(label))) +
labs(title=paste(outcome)) +
theme_bw() +
xlab("") +
ylab("")}
# 1 = death, 2 = hosp, 3 = severe_disease, 4 = YLL, 5 = cases
plot = ggarrange(plot_list[[5]], plot_list[[3]],
common.legend = TRUE,
legend="bottom")
length(unique(warehouse_plot$outcome))
unique(warehouse_plot$outcome)
waning_toggle_acqusition = TRUE
waning_toggle_severe_outcome = FALSE
waning_toggle_rho_acqusition = TRUE
rho_severe_disease = "on"
risk_group_toggle = "off" #make sure not in CommandDeck
vax_risk_strategy_toggle = "off"
if (setting == "SLE"){
gov_target = 0.516
workshop_doses = gov_target - sum(vaccination_history_POP$coverage_this_date[vaccination_history_POP$date == max(vaccination_history_POP$date) & vaccination_history_POP$dose == 1])/100
workshop_doses = round(workshop_doses * sum(pop))
vax_strategy_toggles_CURRENT_TARGET =
list(vax_strategy_start_date                  = baseline_date_start,
vax_strategy_num_doses         = as.integer(workshop_doses),
vax_strategy_roll_out_speed    = 11075 ,               # doses delivered per day
vax_delivery_group             = 'universal',
vax_age_strategy               = "uniform_no_children",            # options: "oldest", "youngest","50_down","uniform", OTHER?
vax_dose_strategy              = 1,                    # options: 1,2
vax_strategy_vaccine_type      = "Johnson & Johnson" ,            # options: "Moderna","Pfizer","AstraZeneca","Johnson & Johnson","Sinopharm","Sinovac"
vax_strategy_vaccine_interval  = 7*3 ,                 # (days) interval between first and second dose
vax_strategy_max_expected_cov  = 0.88                   # value between 0-1 of age group willing to be vaccinated (vaccine hesitancy est in discussion)
)
} else if (setting == "PNG"){
gov_target = 0.199
workshop_doses = gov_target - sum(vaccination_history_POP$coverage_this_date[vaccination_history_POP$date == max(vaccination_history_POP$date) & vaccination_history_POP$dose == 1])/100
workshop_doses = round(workshop_doses * sum(pop))
workshop_doses = workshop_doses * 2
vax_strategy_toggles_CURRENT_TARGET =
list(vax_strategy_start_date                  = baseline_date_start,
vax_strategy_num_doses         = as.integer(workshop_doses),
vax_strategy_roll_out_speed    = 12000 ,               # doses delivered per day
vax_delivery_group             = 'universal',
vax_age_strategy               = "uniform_no_children",            # options: "oldest", "youngest","50_down","uniform", OTHER?
vax_dose_strategy              = 2,                    # options: 1,2
vax_strategy_vaccine_type      = "Pfizer" ,            # options: "Moderna","Pfizer","AstraZeneca","Johnson & Johnson","Sinopharm","Sinovac"
vax_strategy_vaccine_interval  = 7*3 ,                 # (days) interval between first and second dose
vax_strategy_max_expected_cov  = 0.74                   # value between 0-1 of age group willing to be vaccinated (vaccine hesitancy est in discussion)
)
} else { stop ('pick a valid setting!')}
current_coverage = c(sum(vaccination_history_POP$coverage_this_date[vaccination_history_POP$date == max(vaccination_history_POP$date) & vaccination_history_POP$dose ==1]),
sum(vaccination_history_POP$coverage_this_date[vaccination_history_POP$date == max(vaccination_history_POP$date) & vaccination_history_POP$dose ==2])) #COMEBACK - if J&J in use!
if ("Johnson & Johnson" %in% unique(vaccination_history_POP$vaccine_type)){warning('True vaccine coverage MUST consider J&J dose 1')}
###(1/4) Impact of current program targets
receipt = 1
source(paste(getwd(),"/(run 1)_impact_of_current_program_targets.R",sep=""))
receipt
ticket
baseline_date_start
### (3) Run  ##################################################################################################
#for (ticket in 1:length(queue)){
for (ticket in 2:length(queue)){
commands = queue[[ticket]]
vax_strategy_description = commands$vax_strategy_description
vax_strategy_toggle = commands$vax_strategy_toggle
outbreak_post_rollout = commands$outbreak_post_rollout
if ('vax_strategy_toggles' %in% names(commands)){
vax_strategy_toggles = commands$vax_strategy_toggles
}
source(paste(getwd(),"/CommandDeck.R",sep=""))
severe_outcome_projections = severe_outcome_log %>%
mutate(label = vax_strategy_description, day = as.numeric(date - date_start ))
warehouse_plot = rbind(warehouse_plot,severe_outcome_projections)
row = row %>% mutate(scenario = vax_strategy_description) %>% relocate(scenario, .before = colnames(row)[[1]])
warehouse_table = rbind(warehouse_table,row)
}
baseline_date_start = as.Date('2022-07-01')
waning_toggle_acqusition = TRUE
waning_toggle_severe_outcome = FALSE
waning_toggle_rho_acqusition = TRUE
rho_severe_disease = "on"
risk_group_toggle = "off" #make sure not in CommandDeck
vax_risk_strategy_toggle = "off"
if (setting == "SLE"){
gov_target = 0.516
workshop_doses = gov_target - sum(vaccination_history_POP$coverage_this_date[vaccination_history_POP$date == max(vaccination_history_POP$date) & vaccination_history_POP$dose == 1])/100
workshop_doses = round(workshop_doses * sum(pop))
vax_strategy_toggles_CURRENT_TARGET =
list(vax_strategy_start_date                  = baseline_date_start,
vax_strategy_num_doses         = as.integer(workshop_doses),
vax_strategy_roll_out_speed    = 11075 ,               # doses delivered per day
vax_delivery_group             = 'universal',
vax_age_strategy               = "uniform_no_children",            # options: "oldest", "youngest","50_down","uniform", OTHER?
vax_dose_strategy              = 1,                    # options: 1,2
vax_strategy_vaccine_type      = "Johnson & Johnson" ,            # options: "Moderna","Pfizer","AstraZeneca","Johnson & Johnson","Sinopharm","Sinovac"
vax_strategy_vaccine_interval  = 7*3 ,                 # (days) interval between first and second dose
vax_strategy_max_expected_cov  = 0.88                   # value between 0-1 of age group willing to be vaccinated (vaccine hesitancy est in discussion)
)
} else if (setting == "PNG"){
gov_target = 0.199
workshop_doses = gov_target - sum(vaccination_history_POP$coverage_this_date[vaccination_history_POP$date == max(vaccination_history_POP$date) & vaccination_history_POP$dose == 1])/100
workshop_doses = round(workshop_doses * sum(pop))
workshop_doses = workshop_doses * 2
vax_strategy_toggles_CURRENT_TARGET =
list(vax_strategy_start_date                  = baseline_date_start,
vax_strategy_num_doses         = as.integer(workshop_doses),
vax_strategy_roll_out_speed    = 12000 ,               # doses delivered per day
vax_delivery_group             = 'universal',
vax_age_strategy               = "uniform_no_children",            # options: "oldest", "youngest","50_down","uniform", OTHER?
vax_dose_strategy              = 2,                    # options: 1,2
vax_strategy_vaccine_type      = "Pfizer" ,            # options: "Moderna","Pfizer","AstraZeneca","Johnson & Johnson","Sinopharm","Sinovac"
vax_strategy_vaccine_interval  = 7*3 ,                 # (days) interval between first and second dose
vax_strategy_max_expected_cov  = 0.74                   # value between 0-1 of age group willing to be vaccinated (vaccine hesitancy est in discussion)
)
} else { stop ('pick a valid setting!')}
current_coverage = c(sum(vaccination_history_POP$coverage_this_date[vaccination_history_POP$date == max(vaccination_history_POP$date) & vaccination_history_POP$dose ==1]),
sum(vaccination_history_POP$coverage_this_date[vaccination_history_POP$date == max(vaccination_history_POP$date) & vaccination_history_POP$dose ==2])) #COMEBACK - if J&J in use!
if ("Johnson & Johnson" %in% unique(vaccination_history_POP$vaccine_type)){warning('True vaccine coverage MUST consider J&J dose 1')}
### (3) Run  ##################################################################################################
#for (ticket in 1:length(queue)){
for (ticket in 2:length(queue)){
commands = queue[[ticket]]
vax_strategy_description = commands$vax_strategy_description
vax_strategy_toggle = commands$vax_strategy_toggle
outbreak_post_rollout = commands$outbreak_post_rollout
if ('vax_strategy_toggles' %in% names(commands)){
vax_strategy_toggles = commands$vax_strategy_toggles
}
source(paste(getwd(),"/CommandDeck.R",sep=""))
severe_outcome_projections = severe_outcome_log %>%
mutate(label = vax_strategy_description, day = as.numeric(date - date_start ))
warehouse_plot = rbind(warehouse_plot,severe_outcome_projections)
row = row %>% mutate(scenario = vax_strategy_description) %>% relocate(scenario, .before = colnames(row)[[1]])
warehouse_table = rbind(warehouse_table,row)
}
waning_toggle_acqusition = TRUE
waning_toggle_severe_outcome = FALSE
waning_toggle_rho_acqusition = TRUE
rho_severe_disease = "on"
risk_group_toggle = "off" #make sure not in CommandDeck
vax_risk_strategy_toggle = "off"
if (setting == "SLE"){
gov_target = 0.516
workshop_doses = gov_target - sum(vaccination_history_POP$coverage_this_date[vaccination_history_POP$date == max(vaccination_history_POP$date) & vaccination_history_POP$dose == 1])/100
workshop_doses = round(workshop_doses * sum(pop))
vax_strategy_toggles_CURRENT_TARGET =
list(vax_strategy_start_date                  = baseline_date_start,
vax_strategy_num_doses         = as.integer(workshop_doses),
vax_strategy_roll_out_speed    = 11075 ,               # doses delivered per day
vax_delivery_group             = 'universal',
vax_age_strategy               = "uniform_no_children",            # options: "oldest", "youngest","50_down","uniform", OTHER?
vax_dose_strategy              = 1,                    # options: 1,2
vax_strategy_vaccine_type      = "Johnson & Johnson" ,            # options: "Moderna","Pfizer","AstraZeneca","Johnson & Johnson","Sinopharm","Sinovac"
vax_strategy_vaccine_interval  = 7*3 ,                 # (days) interval between first and second dose
vax_strategy_max_expected_cov  = 0.88                   # value between 0-1 of age group willing to be vaccinated (vaccine hesitancy est in discussion)
)
} else if (setting == "PNG"){
gov_target = 0.199
workshop_doses = gov_target - sum(vaccination_history_POP$coverage_this_date[vaccination_history_POP$date == max(vaccination_history_POP$date) & vaccination_history_POP$dose == 1])/100
workshop_doses = round(workshop_doses * sum(pop))
workshop_doses = workshop_doses * 2
vax_strategy_toggles_CURRENT_TARGET =
list(vax_strategy_start_date                  = baseline_date_start,
vax_strategy_num_doses         = as.integer(workshop_doses),
vax_strategy_roll_out_speed    = 12000 ,               # doses delivered per day
vax_delivery_group             = 'universal',
vax_age_strategy               = "uniform_no_children",            # options: "oldest", "youngest","50_down","uniform", OTHER?
vax_dose_strategy              = 2,                    # options: 1,2
vax_strategy_vaccine_type      = "Pfizer" ,            # options: "Moderna","Pfizer","AstraZeneca","Johnson & Johnson","Sinopharm","Sinovac"
vax_strategy_vaccine_interval  = 7*3 ,                 # (days) interval between first and second dose
vax_strategy_max_expected_cov  = 0.74                   # value between 0-1 of age group willing to be vaccinated (vaccine hesitancy est in discussion)
)
} else { stop ('pick a valid setting!')}
current_coverage = c(sum(vaccination_history_POP$coverage_this_date[vaccination_history_POP$date == max(vaccination_history_POP$date) & vaccination_history_POP$dose ==1]),
sum(vaccination_history_POP$coverage_this_date[vaccination_history_POP$date == max(vaccination_history_POP$date) & vaccination_history_POP$dose ==2])) #COMEBACK - if J&J in use!
if ("Johnson & Johnson" %in% unique(vaccination_history_POP$vaccine_type)){warning('True vaccine coverage MUST consider J&J dose 1')}
###(1/4) Impact of current program targets
receipt = 1
source(paste(getwd(),"/(run 1)_impact_of_current_program_targets.R",sep=""))
plot_list = list()
for (i in 1:length(unique(warehouse_plot$outcome))){
outcome = unique(warehouse_plot$outcome)[i]
plot_list [[i]] <- ggplot(data=warehouse_plot[warehouse_plot$outcome==outcome,]) +
geom_point(aes(x=time,y=proj,color=as.factor(label))) +
labs(title=paste(outcome)) +
theme_bw() +
xlab("") +
ylab("")}
# 1 = death, 2 = hosp, 3 = severe_disease, 4 = YLL, 5 = cases
plot = ggarrange(plot_list[[5]], plot_list[[3]],
common.legend = TRUE,
legend="bottom")
annotate_figure(plot, top = text_grob('absolute outcome by scenario', face = 'bold', size = 16))
plot_list = list()
for (i in 1:length(unique(warehouse_plot$outcome))){
outcome = unique(warehouse_plot$outcome)[i]
plot_list [[i]] <- ggplot(data=warehouse_plot[warehouse_plot$outcome==outcome,]) +
geom_point(aes(x=time,y=proj_cum,color=as.factor(label))) +
labs(title=paste(outcome)) +
theme_bw() +
xlab("") +
ylab("")}
# 1 = death, 2 = hosp, 3 = severe_disease, 4 = YLL, 5 = cases
plot = ggarrange(plot_list[[5]], plot_list[[3]],
common.legend = TRUE,
legend="bottom")
annotate_figure(plot, top = text_grob('absolute outcome by scenario', face = 'bold', size = 16))
options(scipen=1000)
annotate_figure(plot, top = text_grob('absolute outcome by scenario', face = 'bold', size = 16))
plot_list = list()
for (i in 1:length(unique(warehouse_plot$outcome))){
outcome = unique(warehouse_plot$outcome)[i]
plot_list [[i]] <- ggplot(data=warehouse_plot[warehouse_plot$outcome==outcome,]) +
geom_point(aes(x=time,y=proj_cum,color=as.factor(label))) +
labs(title=paste(outcome)) +
theme_bw() +
xlab("") +
ylab("")}
# 1 = death, 2 = hosp, 3 = severe_disease, 4 = YLL, 5 = cases
plot = ggarrange(plot_list[[5]], plot_list[[3]],
common.legend = TRUE,
legend="bottom")
annotate_figure(plot, top = text_grob('absolute outcome by scenario', face = 'bold', size = 16))
plot_list = list()
for (i in 1:length(unique(warehouse_plot$outcome))){
outcome = unique(warehouse_plot$outcome)[i]
plot_list [[i]] <- ggplot(data=warehouse_plot[warehouse_plot$outcome==outcome,]) +
geom_point(aes(x=time,y=proj_cum,color=as.factor(label))) +
labs(title=paste(outcome)) +
theme_bw() +
xlab("") +
ylab("")}
# 1 = death, 2 = hosp, 3 = severe_disease, 4 = YLL, 5 = cases
plot = ggarrange(plot_list[[5]], plot_list[[1]],
common.legend = TRUE,
legend="bottom")
annotate_figure(plot, top = text_grob('absolute outcome by scenario', face = 'bold', size = 16))
### (3) Varying speed of vaccine roll-out
receipt = 4
source(paste(getwd(),"/(run 3)_varying_vaccine_rollout.R",sep=""))
plot_list = list()
for (i in 1:length(unique(warehouse_plot$outcome))){
outcome = unique(warehouse_plot$outcome)[i]
plot_list [[i]] <- ggplot(data=warehouse_plot[warehouse_plot$outcome==outcome,]) +
geom_point(aes(x=time,y=proj_cum,color=as.factor(label))) +
labs(title=paste(outcome)) +
theme_bw() +
xlab("") +
ylab("")}
# 1 = death, 2 = hosp, 3 = severe_disease, 4 = YLL, 5 = cases
cum_plot = ggarrange(plot_list[[5]], plot_list[[1]],
common.legend = TRUE,
legend="bottom")
annotate_figure(cum_plot, top = text_grob('absolute outcome by scenario', face = 'bold', size = 16))
