uniform_mod=1
#vax_strategy_plot = "off" #included in (plot)_vax_strategies
#__________________________________________________________________
#       (3/4) Run model
# ####################################################################
##(A) Load functions
source(paste(getwd(),"/(function)_COVID_ODE.R",sep=""))
source(paste(getwd(),"/(function)_VE_time_step.R",sep=""))
source(paste(getwd(),"/(function)_vax_strategies.R",sep=""))
##(B) Simulate setting
# time saving tactics! Load setting if not yet loaded
if (complete_model_runs == 1){run_type="point"
} else if (complete_model_runs > 1){run_type="rand"}
if (setting == "PNG"){setting_long = "Papua New Guinea"
} else if (setting == "SLE"){setting_long = "Sierra Leone"}
if (exists("prev_setting") == FALSE){ prev_setting = "NONE"}
if (setting != prev_setting){source(paste(getwd(),"/(1)_simulate_setting.R",sep=""))} #load setting stats if new setting
prev_setting = setting
#making some interim variables to assist with configuring states
seed = sum(pop)*seed
num_disease_classes = 4                                 # SEIR
num_vax_doses = D = length(unique(vaccination_history_TRUE$dose))  # dose 1, dose 2, COMEBACK no boosters yet in these settings
vax_type_list = sort(unique(vaccination_history_TRUE$vaccine_type))
num_vax_types = T = length(unique(vaccination_history_TRUE$vaccine_type))
num_vax_classes = num_vax_doses*num_vax_types + 1                 # + 1 for unvaccinated
num_total_classes = (num_disease_classes+1)*(num_age_groups*num_vax_classes) #+1 for incidence tracker
source(paste(getwd(),"/(3)_disease_characteristics.R",sep=""))
source(paste(getwd(),"/(2)_inital_state.R",sep=""))
vax_strategy_plot = "off"
source(paste(getwd(),"/(2)_inital_state.R",sep=""))
source(paste(getwd(),"/(4)_time_step.R",sep=""))
source(paste(getwd(),"/(mech shop) severe outcome setting-specific rates.R",sep="")) # COMEBACK - should this just save its results somewhere?
#raw number - daily and cumulative
plot1 <- ggplot() +
geom_line(data=incidence_log,aes(x=date,y=rolling_average),na.rm=TRUE) +
geom_point(data=case_history[case_history$date>date_start & case_history$date <max(incidence_log$date),],
aes(x=date,y=rolling_average*underascertainment_est),na.rm=TRUE) +
xlab("") +
scale_x_date(date_breaks="1 month", date_labels="%b") +
ylab("daily cases") +
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
axis.line = element_line(color = 'black'))
plot2 <- ggplot() +
geom_line(data=incidence_log,aes(x=date,y=cumulative_incidence),na.rm=TRUE) +
xlab("") +
scale_x_date(date_breaks="1 month", date_labels="%b") +
ylab("cumulative cases") +
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
axis.line = element_line(color = 'black'))
#number as % of whole population
lay <- rbind(c(1,2),c(3,3))
plot1 <-
ggplot() +
geom_line(data=incidence_log,aes(x=date,y=rolling_average_percentage),na.rm=TRUE) +
geom_point(data=case_history[case_history$date>date_start & case_history$date <max(incidence_log$date),],
aes(x=date,y=rolling_average*100*underascertainment_est/sum(pop)),na.rm=TRUE) +
xlab("") +
scale_x_date(date_breaks="1 month", date_labels="%b") +
ylab("daily cases % whole pop") +
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
axis.line = element_line(color = 'black'))
plot2 <- ggplot() +
geom_line(data=incidence_log,aes(x=date,y=Reff),na.rm=TRUE) +
xlab("") +
scale_x_date(date_breaks="1 month", date_labels="%b") +
#ylim(0,6) +
ylab("Reff") +
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
axis.line = element_line(color = 'black'))
plot3<- ggplot() +
geom_line(data=incidence_log,aes(x=date,y=cumulative_incidence_percentage),na.rm=TRUE) +
xlab("") +
scale_x_date(date_breaks="1 month", date_labels="%b") +
ylab("cumulative cases % whole pop") +
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
axis.line = element_line(color = 'black'))
grid.arrange(plot1, plot2, plot3, layout_matrix = lay)
source("C:/Users/u6044061/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/(run)_vax_strategies.R", echo=TRUE)
source("C:/Users/u6044061/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/CommandDeck.R", echo=TRUE)
VOC = strain_inital
##### (1/7) Load population-level wild-type estimate of severe outcomes
severe_outcome_0 <- read.csv('1_inputs/severe_outcome_country_level.csv')
severe_outcome_0$percentage = severe_outcome_0$percentage/100 #make it between 0-1
severe_outcome_0 <- severe_outcome_0[severe_outcome_0$outcome %in% c('death','severe_disease','hosp') &
severe_outcome_0$country == setting
,-c(1,5)] #dropping ICU and ICR as we won't use them, removing source and country column
if (VOC != 'WT'){
#####(2/7) Load variant-specific multipliers
#these multipliers are WT to VOC
workshop <- read.csv('1_inputs/severe_outcome_variant_multiplier.csv')
## if stochastic then multiplier = rand in uniform(lower_est,upper_est)
#<interlude for omicron>
workshop2 <- read.csv('1_inputs/severe_outcome_variant_multiplier_complex.csv') #omicron vs delta
omicron_basis = workshop[workshop$variant == 'delta',]
omicron_basis$variant = 'omicron'
omicron_basis$source = paste(omicron_basis$source,'/',workshop2$source)
omicron_basis <- omicron_basis %>%
mutate(multiplier = case_when(
outcome == 'hosp' ~ multiplier*workshop2$multiplier[workshop2$outcome == 'hosp'],
outcome %in% c('ICU','death') ~ multiplier*workshop2$multiplier[workshop2$outcome == 'hosp_long']))
#NOTE: assumption here that hosp_long proportional to ICU and death
#NOTE: upper and lower limits not adjusted as assumed used above
workshop = rbind(workshop,omicron_basis)
#<fin>
workshop = workshop[workshop$variant == VOC,c('outcome','multiplier')]
#_______________________________________________________________________________
#####(3/7) Calculating population-level variant-specific estimate of severe outcomes
#could be made faster, but assumptions less obvious, by including a var that is var_proxy to join on
severe_outcome_1 <- severe_outcome_0 %>%
mutate(percentage = case_when(
outcome == 'death' ~ percentage * workshop$multiplier[workshop$outcome == 'death'],
outcome == 'severe_disease' ~ percentage * workshop$multiplier[workshop$outcome == 'ICU'], #assumption
outcome == 'hosp' ~ percentage * workshop$multiplier[workshop$outcome == 'hosp']
),variant=VOC)
rm (omicron_basis,workshop2)
} else if (VOC == 'WT'){
severe_outcome_1 = severe_outcome_0 %>% mutate(variant = VOC)
}
#####(4/7) Calculating age-specific estimates of severe outcomes
load(file = '1_inputs/severe_outcome_age_distribution.Rdata') #adjusted values from Qatar
workshop = age_dn_severe_outcomes
workshop = workshop[workshop$setting == setting,]
time.start=proc.time()[[3]]
VOC = strain_inital
##### (1/7) Load population-level wild-type estimate of severe outcomes
severe_outcome_0 <- read.csv('1_inputs/severe_outcome_country_level.csv')
severe_outcome_0$percentage = severe_outcome_0$percentage/100 #make it between 0-1
severe_outcome_0 <- severe_outcome_0[severe_outcome_0$outcome %in% c('death','severe_disease','hosp') &
severe_outcome_0$country == setting
,-c(1,5)] #dropping ICU and ICR as we won't use them, removing source and country column
#_______________________________________________________________________________
if (VOC != 'WT'){
#####(2/7) Load variant-specific multipliers
#these multipliers are WT to VOC
workshop <- read.csv('1_inputs/severe_outcome_variant_multiplier.csv')
## if stochastic then multiplier = rand in uniform(lower_est,upper_est)
#<interlude for omicron>
workshop2 <- read.csv('1_inputs/severe_outcome_variant_multiplier_complex.csv') #omicron vs delta
omicron_basis = workshop[workshop$variant == 'delta',]
omicron_basis$variant = 'omicron'
omicron_basis$source = paste(omicron_basis$source,'/',workshop2$source)
omicron_basis <- omicron_basis %>%
mutate(multiplier = case_when(
outcome == 'hosp' ~ multiplier*workshop2$multiplier[workshop2$outcome == 'hosp'],
outcome %in% c('ICU','death') ~ multiplier*workshop2$multiplier[workshop2$outcome == 'hosp_long']))
#NOTE: assumption here that hosp_long proportional to ICU and death
#NOTE: upper and lower limits not adjusted as assumed used above
workshop = rbind(workshop,omicron_basis)
#<fin>
workshop = workshop[workshop$variant == VOC,c('outcome','multiplier')]
#_______________________________________________________________________________
#####(3/7) Calculating population-level variant-specific estimate of severe outcomes
#could be made faster, but assumptions less obvious, by including a var that is var_proxy to join on
severe_outcome_1 <- severe_outcome_0 %>%
mutate(percentage = case_when(
outcome == 'death' ~ percentage * workshop$multiplier[workshop$outcome == 'death'],
outcome == 'severe_disease' ~ percentage * workshop$multiplier[workshop$outcome == 'ICU'], #assumption
outcome == 'hosp' ~ percentage * workshop$multiplier[workshop$outcome == 'hosp']
),variant=VOC)
rm (omicron_basis,workshop2)
} else if (VOC == 'WT'){
severe_outcome_1 = severe_outcome_0 %>% mutate(variant = VOC)
}
#_______________________________________________________________________________
#####(4/7) Calculating age-specific estimates of severe outcomes
load(file = '1_inputs/severe_outcome_age_distribution.Rdata') #adjusted values from Qatar
workshop = age_dn_severe_outcomes
workshop = workshop[workshop$setting == setting,]
#dummy values based on log-linear relationship
#workshop <- read.csv('1_inputs/severe_outcome_age_distribution.csv')
#workshop <- workshop[,c(1,2,3)] #remove source and explanation columns
severe_outcome_2 <- severe_outcome_1 %>%  left_join(workshop)
severe_outcome_2 <- severe_outcome_2 %>% mutate(percentage=percentage*RR)
severe_outcome_FINAL <- severe_outcome_2 %>%
select(outcome,outcome_long,age_group,percentage) %>%
mutate(age_group = gsub(" to ", "-", age_group))
rm(severe_outcome_0,severe_outcome_2)
#_______________________________________________________________________________
#####(5/7) Calculating YLL from death
#requires average age in age-group and life_expectancy of this study setting
workshop <- pop_setting_orig %>%
mutate(agegroup = cut(age,breaks = age_groups, include.lowest = T,labels = age_group_labels))
workshop_sum <- aggregate(workshop$population, by=list(category=workshop$agegroup), FUN=sum)
colnames(workshop_sum) <-c('agegroup','pop')
workshop <- workshop %>% left_join(workshop_sum)
workshop <- workshop %>% mutate(weight=population/pop,
age_weight = (age+0.5)*weight)
workshop <- aggregate(workshop$age_weight, by=list(category=workshop$agegroup), FUN=sum)
colnames(workshop) <-c('agegroup','average_age')
lifeExpect <- read.csv('1_inputs/UN_life_expectancy_est.csv')
lifeExpect = lifeExpect[lifeExpect$setting == setting,]
closest_age = data.frame()
for (i in 1:nrow(workshop)){
closest_age = rbind(closest_age,lifeExpect$age[which.min(abs(lifeExpect$age-workshop$average_age[i]))])
}
colnames(closest_age) = c('age')
workshop = cbind(workshop,closest_age)
workshop <- workshop %>%
left_join(lifeExpect) %>%
select(agegroup,average_age,age,life_expectancy)
#"The average number of remaining years of life expected by a hypothetical cohort of individuals alive at age x
# who would be subject during the remaining of their lives to the mortality rates of a given period."
# https://population.un.org/wpp/Download/Standard/Mortality/
YLL_FINAL = workshop %>%
select(agegroup,life_expectancy)
colnames(YLL_FINAL) = c('age_group','YLL')
YLL_row = severe_outcome_FINAL[severe_outcome_FINAL$outcome == 'death',]
YLL_row$outcome = 'YLL'
YLL_row$outcome_long = 'YLL per death in this age_group multiplied by death rate'
YLL_row <- YLL_row %>% left_join(YLL_FINAL) %>%
mutate(percentage = percentage*YLL)
YLL_row = YLL_row[,c(1:4)]
severe_outcome_FINAL = rbind(severe_outcome_FINAL,YLL_row)
severe_outcome_FINAL = severe_outcome_FINAL %>%
mutate(outcome_VE = case_when(
outcome %in% c('death','YLL') ~ 'death',
outcome %in% c('hosp','severe_disease') ~ 'hospitalisation'
))
ggplot() +
geom_point(data=severe_outcome_FINAL[severe_outcome_FINAL$outcome != 'YLL',],
aes(x=factor(age_group,level=age_group_labels),
y=percentage,color=as.factor(outcome)),na.rm=TRUE) +
xlab('age group') +
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
axis.line = element_line(color = 'black'))
#_______________________________________________________________________________
time.end=proc.time()[[3]]
time.end-time.start
time.start=proc.time()[[3]]
#####(6/7) Multiplying severe outcomes by VE
#(A/B) calculate VE against severe outcomes by day
VE_tracker = data.frame()
for (outcome in c('death','hospitalisation')){
for (day in 1:(model_weeks*7) ){
workshop = VE_time_step(strain_inital,date_start+day,outcome)
workshop = workshop %>% mutate(date=day,
outcome_VE=outcome)
VE_tracker = rbind(VE_tracker,workshop)
}
}
VE_tracker$date = date_start + VE_tracker$date
workshop = crossing(dose = 0,
vaccine_type = "unvaccinated",
age_group = age_group_labels,
VE = 0,
date = unique(VE_tracker$date),
outcome_VE=unique(VE_tracker$outcome))
VE_tracker = rbind(VE_tracker,workshop)
#(B/B) calculate severe outcome incidence by vax_status
severe_outcome_FINAL = severe_outcome_FINAL %>% left_join(VE_tracker) %>%
mutate(percentage = percentage*(1-VE)) %>%
select(date,outcome,outcome_long,age_group,vaccine_type,dose,percentage)
#_______________________________________________________________________________
time.end=proc.time()[[3]]
time.end-time.start
save(severe_outcome_FINAL, file = "1_inputs/severe_outcome_FINAL.Rdata")
Reff <- Reff_time_step(parameters,next_state)
Reff <- Reff_time_step(parameters,next_state)
time.start = proc.time()[[3]]
Reff <- Reff_time_step(parameters,next_state)
Reff_tracker = rbind(Reff_tracker,Reff)
time.end=proc.time()[[3]]
time.end-time.start
time.start = proc.time()[[3]]
Reff <- Reff_time_step(parameters,next_state)
Reff_tracker = rbind(Reff_tracker,Reff)
time.end=proc.time()[[3]]
time.end-time.start
source("C:/Users/u6044061/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/(run)_vax_strategies.R", echo=TRUE)
ticket
commands = queue[[ticket]]
vax_strategy_description = commands$vax_strategy_description
if ('vax_strategy_plot' %in% names(commands)){
vax_strategy_plot = commands$vax_strategy_plot
}
if ('vax_strategy_toggles' %in% names(commands)){
vax_strategy_toggles = commands$vax_strategy_toggles
}
source(paste(getwd(),"/CommandDeck.R",sep=""))
source(paste(getwd(),"/(function)_severe_outcome_proj.R",sep=""))
##### Genuine projection from incidence!
#(A/D) Join incidence_log_tidy with severe outcome incidence by vax status
workshop = incidence_log_tidy %>%
left_join(severe_outcome_FINAL) %>%
mutate(proj = incidence*percentage) #calculate incidence -> severe outcome
if(!nrow(severe_outcome_FINAL[severe_outcome_FINAL$date <= max(incidence_log_tidy$date),]) == nrow(workshop)){stop('something has gone amiss')
} else if (!nrow(severe_outcome_FINAL) == nrow(workshop)){warning('more doses left to give in this simulation')}
View(severe_outcome_FINAL)
source("C:/Users/u6044061/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/(mech shop) severe outcome setting-specific rates.R", echo=TRUE)
#(B/B) calculate severe outcome incidence by vax_status
severe_outcome_this_run = severe_outcome_FINAL %>% left_join(VE_tracker) %>%
mutate(percentage = percentage*(1-VE)) %>%
select(date,outcome,outcome_long,age_group,vaccine_type,dose,percentage)
source("C:/Users/u6044061/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/(function)_severe_outcome_proj.R", echo=TRUE)
source("C:/Users/u6044061/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/(run)_vax_strategies.R", echo=TRUE)
source("C:/Users/u6044061/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/(plot)_vax_strategies.R", echo=TRUE)
averted_table; averted_table_rel
### (2) Compare as is #######################################################################################################
#(A/B) table
severe_outcome_table
knitr::opts_chunk$set(echo = TRUE)
severe_outcome_table
plot(pressure)
source("C:/Users/u6044061/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/(plot)_vax_strategies.R", echo=TRUE)
source("C:/Users/u6044061/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/(plot)_vax_strategies.R", echo=TRUE)
#       (1/4) Setup
####################################################################
#load libraries
library(tidyverse)
library(readr)
library(deSolve)
library(rvest)
library(ggplot2)
library(gridExtra)
source("C:/Users/u6044061/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/(plot)_vax_strategies.R", echo=TRUE)
averted_table; averted_table_rel
save.image(file = paste("complete_model_run_",Sys.Date(),".Rdata",sep=''))
#Section (3/3) - expand now to include kids 40,current, 60, 70, 80
#compare to current plan without expansion to kids queue[[1]]
target_list = list(0.4,0.516,0.6,0.7,0.8)
i=1
target = target_list[[i]]
target_percentage = target * 100
paste('expand to children now ',target_percentage,'%')
paste('expand to children now',target_percentage,'%')
paste('current then expand to children',target_percentage,'%')
paste('expand to children now',target_percentage,'%')
### (2) Varying levels of coverage - w and w/out children
outbreak_post_rollout = "on" #COMEBACK - are you sure? #Currently vaccine roll-out prior to an outbreak
library(tidyverse)
library(readr)
library(deSolve)
library(rvest)
library(ggplot2)
library(gridExtra)
library(ggpubr)
source(paste(getwd(),"/(run 2)_varying_coverage.R",sep=""))
if (setting == "SLE"){
target = 0.516
workshop_doses = target - sum(vaccination_history_POP$coverage_this_date[vaccination_history_POP$date == max(vaccination_history_POP$date) & vaccination_history_POP$dose == 1])/100
workshop_doses = round(workshop_doses * sum(pop))
vax_strategy_toggles_CURRENT_TARGET =
list(vax_strategy_start_date                  = as.Date('2022-04-20'),
vax_strategy_num_doses         = as.integer(workshop_doses),
vax_strategy_roll_out_speed    = 11075 ,               # doses delivered per day
vax_age_strategy               = "uniform_no_children",            # options: "oldest", "youngest","50_down","uniform", OTHER?
vax_dose_strategy              = 1,                    # options: 1,2
vax_strategy_vaccine_type      = "Johnson & Johnson" ,            # options: "Moderna","Pfizer","AstraZeneca","Johnson & Johnson","Sinopharm","Sinovac"
vax_strategy_vaccine_interval  = 7*3 ,                 # (days) interval between first and second dose
vax_strategy_max_expected_cov  = 0.88                   # value between 0-1 of age group willing to be vaccinated (vaccine hesitancy est in discussion)
)
} else if (setting == "PNG"){
target = 0.199
workshop_doses = target - sum(vaccination_history_POP$coverage_this_date[vaccination_history_POP$date == max(vaccination_history_POP$date) & vaccination_history_POP$dose == 1])/100
workshop_doses = round(workshop_doses * sum(pop))
workshop_doses = workshop_doses * 2
vax_strategy_toggles_CURRENT_TARGET =
list(vax_strategy_start_date                  = as.Date('2022-04-20'),
vax_strategy_num_doses         = as.integer(workshop_doses),
vax_strategy_roll_out_speed    = 12000 ,               # doses delivered per day
vax_age_strategy               = "uniform_no_children",            # options: "oldest", "youngest","50_down","uniform", OTHER?
vax_dose_strategy              = 2,                    # options: 1,2
vax_strategy_vaccine_type      = "Pfizer" ,            # options: "Moderna","Pfizer","AstraZeneca","Johnson & Johnson","Sinopharm","Sinovac"
vax_strategy_vaccine_interval  = 7*3 ,                 # (days) interval between first and second dose
vax_strategy_max_expected_cov  = 0.74                   # value between 0-1 of age group willing to be vaccinated (vaccine hesitancy est in discussion)
)
} else { stop ('pick a valid setting!')}
source(paste(getwd(),"/(run 2)_varying_coverage.R",sep=""))
ticket
results_warehouse
results_warehouse = list()
results_warehouse_entry[[3]]= scenario_plot_list
scenario_plot_list
section
list_plot_commands
for (section in 1:3){
list_plot_commands = section_list[[section]]
workshop = warehouse_plot[warehouse_plot$label %in% list_plot_commands, ]
plot_list = list()
for (i in 1:length(unique(workshop$outcome))){
outcome = unique(workshop$outcome)[i]
plot_list [[i]] <- ggplot(data=workshop[workshop$outcome==outcome,]) +
geom_point(aes(x=time,y=proj,color=as.factor(label))) +
labs(title=paste(outcome)) +
theme_bw() +
xlab("") +
ylab("")}
# 1 = death, 2 = hosp, 3 = severe_disease, 4 = YLL, 5 = cases
plot = ggarrange(plot_list[[5]], plot_list[[1]],
common.legend = TRUE,
legend="bottom")
annotate_figure(plot, top = text_grob('absolute outcome by scenario', face = 'bold', size = 16))
scenario_plot_list[[section]] = plot
}
scenario_plot_list
#(B/B) cumulative outcome table
for (section in 1:3){
list_plot_commands = section_list[[section]]
baseline_to_compare = list_plot_commands[[1]]
averted_table = warehouse_table[warehouse_table$scenario != baseline_to_compare,]
averted_table_rel = averted_table
for (i in 1:(length(queue)-1)){
averted_table[i,c(1:length(unique(warehouse_plot$outcome)))] =
warehouse_table[warehouse_table$scenario == baseline_to_compare,c(1:length(unique(warehouse_plot$outcome)))] -
averted_table[i,c(1:length(unique(warehouse_plot$outcome)))]
averted_table_rel[i,c(1:length(unique(warehouse_plot$outcome)))] = 100 * averted_table[i,c(1:length(unique(warehouse_plot$outcome)))]/
warehouse_table[warehouse_table$scenario == baseline_to_compare,c(1:length(unique(warehouse_plot$outcome)))]
}
table_list = list(absolute = averted_table,
relative = averted_table_rel) #COMEBACK could be merged
scenario_table_list[[section]] = table_list
}
scenario_table_list
baseline_to_compare
for (section in 1:3){
list_plot_commands = section_list[[section]]
this_averted_table = averted_table[averted_table$scenario %in% list_plot_commands,]
this_relative_table = averted_table_rel[averted_table_rel$scenario %in% list_plot_commands,]
table_list = list(absolute = this_averted_table,
relative = this_relative_table)
scenario_table_list[[section]] = table_list
}
results_warehouse_entry[[4]]= scenario_table_list
scenario_table_list
warehouse_table
source("C:/Users/u6044061/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/FleetAdmiral.R", echo=TRUE)
View(incidence_log_unedited)
View(sol_log_unedited)
J=num_age_groups
T=num_vax_types
D=num_vax_doses
A=J*(T*D+1) # +1 is unvax
A
(A*4+2)
(A*5+1)
View(results_warehouse)
results_warehouse[[1]]
results_warehouse[[3]]
results_warehouse[[3]][[3]]
results_warehouse[[3]][[4]]
###(1/4) Impact of current program targets
source(paste(getwd(),"/(run 1)_impact_of_current_program_targets.R",sep=""))
#________________________________________________________________________________________________________________
### (2) Varying levels of coverage - w and w/out children
outbreak_post_rollout = "on" #COMEBACK - are you sure? #Currently vaccine roll-out prior to an outbreak
source(paste(getwd(),"/(run 2)_varying_coverage.R",sep=""))
save.image(file = paste("x_results/complete_model_run_",Sys.Date(),".Rdata",sep=''))
save.image(file = paste("x_results/complete_model_run_",Sys.Date(),".Rdata",sep=''))
hello
load(paste("x_results/complete_model_run_",Sys.Date(),".Rdata",sep=''))
library(rmarkdown)
render('x_results/results_report_compiler.Rmd')
library(rmarkdown)
render('results_report_compiler_v2.Rmd')
render('results_report_compiler.Rmd',output_file = paste( "Vaccine allocation project results",Sys.time()))
render('results_report_compiler_v2.Rmd',output_file = paste( "Vaccine allocation project results",Sys.time()))
hour(Sys.tiume)
hour(Sys.time)
proc.time()[[3]]
proc.time()
Sys.time()
time = Sys.time()
time = gsub(':','_',time)
time
render('results_report_compiler_v2.Rmd',output_file = paste( "Vaccine allocation project results",time))
render('results_report_compiler_v2.Rmd',output_file = paste( "x_results/Vaccine allocation project results",time))
render('results_report_compiler_v2.Rmd',output_file = paste( "x_results/Vaccine allocation project results",time), output_format = "pdf_document")
install.packages('tinytex')
library(rmarkdown); library(tinytex)
render('results_report_compiler_v2.Rmd',output_file = paste( "x_results/Vaccine allocation project results",time), output_format = "pdf_document")
update.packages(ask = FALSE, checkBuilt = TRUE)
tinytex::tlmgr_update()
tinytex::reinstall_tinytex()
paste( "x_results/Vaccine allocation project results",time)
file_name = gsub(' ','_',file_name)
file_name = paste( "x_results/Vaccine allocation project results",time)
file_name = gsub(' ','_',file_name)
file_name
time = Sys.time()
time = gsub(':','-',time)
file_name = paste( "x_results/Vaccine allocation project results",time)
file_name = gsub(' ','_',file_name)
file_name
render('results_report_compiler_v2.Rmd',output_file = file_name, output_format = "pdf_document")
render('results_report_compiler_v2.Rmd',output_file = file_name, output_format = "word_document")
### IMPORTS
prioritisation_csv <- read.csv("1_inputs/prioritisation.csv",header=TRUE)
View(prioritisation_csv)
vaccine_coverage
View(vaccination_history_POP)
pop
pop[2:7]/pop
sum(pop[2:7])/sum(pop)
sum(pop[3:7])/sum(pop)
