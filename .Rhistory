select(date,outcome,outcome_long,age_group,vaccine_type,dose,percentage)
grid.arrange(plot1, plot2)
#create row for table comparing vaccine strategies
row = severe_outcome_log %>%
filter(date == max(severe_outcome_log$date)) %>%
select(-c(proj,date)) %>%
pivot_wider(names_from=outcome,
values_from=proj_cum)
row
#(B/C)
if (risk_group_toggle == "on"){
RR_estimate = 2
severe_outcomes_list = unique(severe_outcome_FINAL$outcome)
severe_outcome_FINAL_wRisk = data.frame()
for (o in 1:length(severe_outcomes_list)){
this_outcome = severe_outcomes_list[o]
for (i in 1:num_age_groups){
this_age = age_group_labels[i]
row = severe_outcome_FINAL %>% filter(outcome == this_outcome & age_group == this_age)
IR = row$percentage
P = pop_setting$pop[pop_setting$age_group == this_age]
P_general = pop_risk_group_dn$pop[pop_risk_group_dn$risk_group == 'general_public' & pop_risk_group_dn$age_group == this_age]
P_risk = pop_risk_group_dn$pop[pop_risk_group_dn$risk_group == risk_group_name & pop_risk_group_dn$age_group == this_age]
if (P != (P_general+P_risk)){stop('Line 15 P_general + P_risk != P_overall')}
IR_gen = ((IR*P)/((RR_estimate*P_risk)/P_general +1))/P_general
IR_risk = ((IR*P)/(P_general/(RR_estimate*P_risk) +1))/P_risk
row_gen = row %>% mutate(percentage = IR_gen,risk_group = 'general_public')
row_risk = row %>% mutate(percentage = IR_risk,risk_group = risk_group_name)
severe_outcome_FINAL_wRisk = rbind(severe_outcome_FINAL_wRisk,row_gen,row_risk)
}
}
severe_outcome_FINAL = severe_outcome_FINAL_wRisk
}
#(C/C) calculate severe outcome incidence by vax_status
severe_outcome_this_run = severe_outcome_FINAL %>% left_join(VE_tracker) %>%
mutate(percentage = percentage*(1-VE)) %>%
select(date,outcome,outcome_long,age_group,vaccine_type,dose,percentage)
source("C:/Users/u6044061/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/(function)_severe_outcome_proj.R", echo=TRUE)
#(B/C)
if (risk_group_toggle == "on"){
RR_estimate = 1
severe_outcomes_list = unique(severe_outcome_FINAL$outcome)
severe_outcome_FINAL_wRisk = data.frame()
for (o in 1:length(severe_outcomes_list)){
this_outcome = severe_outcomes_list[o]
for (i in 1:num_age_groups){
this_age = age_group_labels[i]
row = severe_outcome_FINAL %>% filter(outcome == this_outcome & age_group == this_age)
IR = row$percentage
P = pop_setting$pop[pop_setting$age_group == this_age]
P_general = pop_risk_group_dn$pop[pop_risk_group_dn$risk_group == 'general_public' & pop_risk_group_dn$age_group == this_age]
P_risk = pop_risk_group_dn$pop[pop_risk_group_dn$risk_group == risk_group_name & pop_risk_group_dn$age_group == this_age]
if (P != (P_general+P_risk)){stop('Line 15 P_general + P_risk != P_overall')}
IR_gen = ((IR*P)/((RR_estimate*P_risk)/P_general +1))/P_general
IR_risk = ((IR*P)/(P_general/(RR_estimate*P_risk) +1))/P_risk
row_gen = row %>% mutate(percentage = IR_gen,risk_group = 'general_public')
row_risk = row %>% mutate(percentage = IR_risk,risk_group = risk_group_name)
severe_outcome_FINAL_wRisk = rbind(severe_outcome_FINAL_wRisk,row_gen,row_risk)
}
}
severe_outcome_FINAL = severe_outcome_FINAL_wRisk
}
#(C/C) calculate severe outcome incidence by vax_status
severe_outcome_this_run = severe_outcome_FINAL %>% left_join(VE_tracker) %>%
mutate(percentage = percentage*(1-VE)) %>%
select(date,outcome,outcome_long,age_group,vaccine_type,dose,percentage)
source("C:/Users/u6044061/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/(function)_severe_outcome_proj.R", echo=TRUE)
#(B/C)
if (risk_group_toggle == "on"){
RR_estimate = 1
severe_outcomes_list = unique(severe_outcome_FINAL$outcome)
severe_outcome_FINAL_wRisk = data.frame()
for (o in 1:length(severe_outcomes_list)){
this_outcome = severe_outcomes_list[o]
for (i in 1:num_age_groups){
this_age = age_group_labels[i]
row = severe_outcome_FINAL %>% filter(outcome == this_outcome & age_group == this_age)
IR = row$percentage
P = pop_setting$pop[pop_setting$age_group == this_age]
P_general = pop_risk_group_dn$pop[pop_risk_group_dn$risk_group == 'general_public' & pop_risk_group_dn$age_group == this_age]
P_risk = pop_risk_group_dn$pop[pop_risk_group_dn$risk_group == risk_group_name & pop_risk_group_dn$age_group == this_age]
if (P != (P_general+P_risk)){stop('Line 15 P_general + P_risk != P_overall')}
IR_gen = ((IR*P)/((RR_estimate*P_risk)/P_general +1))/P_general
IR_risk = ((IR*P)/(P_general/(RR_estimate*P_risk) +1))/P_risk
row_gen = row %>% mutate(percentage = IR_gen,risk_group = 'general_public')
row_risk = row %>% mutate(percentage = IR_risk,risk_group = risk_group_name)
severe_outcome_FINAL_wRisk = rbind(severe_outcome_FINAL_wRisk,row_gen,row_risk)
}
}
severe_outcome_FINAL_wRisk$percentage[is.na(severe_outcome_FINAL_wRisk$percentage)]=0
severe_outcome_FINAL = severe_outcome_FINAL_wRisk
}
#(C/C) calculate severe outcome incidence by vax_status
severe_outcome_this_run = severe_outcome_FINAL %>% left_join(VE_tracker) %>%
mutate(percentage = percentage*(1-VE)) %>%
select(date,outcome,outcome_long,age_group,vaccine_type,dose,percentage)
source("C:/Users/u6044061/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/(function)_severe_outcome_proj.R", echo=TRUE)
RR_estimate
#(B/C)
if (risk_group_toggle == "on"){
RR_estimate = 1
severe_outcomes_list = unique(severe_outcome_FINAL$outcome)
severe_outcome_FINAL_wRisk = data.frame()
for (o in 1:length(severe_outcomes_list)){
this_outcome = severe_outcomes_list[o]
for (i in 1:num_age_groups){
this_age = age_group_labels[i]
row = severe_outcome_FINAL %>% filter(outcome == this_outcome & age_group == this_age)
IR = row$percentage
P = pop_setting$pop[pop_setting$age_group == this_age]
P_general = pop_risk_group_dn$pop[pop_risk_group_dn$risk_group == 'general_public' & pop_risk_group_dn$age_group == this_age]
P_risk = pop_risk_group_dn$pop[pop_risk_group_dn$risk_group == risk_group_name & pop_risk_group_dn$age_group == this_age]
if (P != (P_general+P_risk)){stop('Line 15 P_general + P_risk != P_overall')}
IR_gen = ((IR*P)/((RR_estimate*P_risk)/P_general +1))/P_general
IR_risk = ((IR*P)/(P_general/(RR_estimate*P_risk) +1))/P_risk
row_gen = row %>% mutate(percentage = IR_gen,risk_group = 'general_public')
row_risk = row %>% mutate(percentage = IR_risk,risk_group = risk_group_name)
severe_outcome_FINAL_wRisk = rbind(severe_outcome_FINAL_wRisk,row_gen,row_risk)
}
}
severe_outcome_FINAL_wRisk$percentage[is.na(severe_outcome_FINAL_wRisk$percentage)]=0
severe_outcome_FINAL = severe_outcome_FINAL_wRisk
}
#(C/C) calculate severe outcome incidence by vax_status
severe_outcome_this_run = severe_outcome_FINAL %>% left_join(VE_tracker) %>%
mutate(percentage = percentage*(1-VE)) %>%
select(date,outcome,outcome_long,age_group,vaccine_type,dose,percentage)
load(file = '1_inputs/severe_outcome_FINAL.Rdata') #adjusted values from Qatar
#(B/C)
if (risk_group_toggle == "on"){
RR_estimate = 1
severe_outcomes_list = unique(severe_outcome_FINAL$outcome)
severe_outcome_FINAL_wRisk = data.frame()
for (o in 1:length(severe_outcomes_list)){
this_outcome = severe_outcomes_list[o]
for (i in 1:num_age_groups){
this_age = age_group_labels[i]
row = severe_outcome_FINAL %>% filter(outcome == this_outcome & age_group == this_age)
IR = row$percentage
P = pop_setting$pop[pop_setting$age_group == this_age]
P_general = pop_risk_group_dn$pop[pop_risk_group_dn$risk_group == 'general_public' & pop_risk_group_dn$age_group == this_age]
P_risk = pop_risk_group_dn$pop[pop_risk_group_dn$risk_group == risk_group_name & pop_risk_group_dn$age_group == this_age]
if (P != (P_general+P_risk)){stop('Line 15 P_general + P_risk != P_overall')}
IR_gen = ((IR*P)/((RR_estimate*P_risk)/P_general +1))/P_general
IR_risk = ((IR*P)/(P_general/(RR_estimate*P_risk) +1))/P_risk
row_gen = row %>% mutate(percentage = IR_gen,risk_group = 'general_public')
row_risk = row %>% mutate(percentage = IR_risk,risk_group = risk_group_name)
severe_outcome_FINAL_wRisk = rbind(severe_outcome_FINAL_wRisk,row_gen,row_risk)
}
}
severe_outcome_FINAL_wRisk$percentage[is.na(severe_outcome_FINAL_wRisk$percentage)]=0
severe_outcome_FINAL = severe_outcome_FINAL_wRisk
}
#(C/C) calculate severe outcome incidence by vax_status
severe_outcome_this_run = severe_outcome_FINAL %>% left_join(VE_tracker) %>%
mutate(percentage = percentage*(1-VE)) %>%
select(date,outcome,outcome_long,age_group,vaccine_type,dose,percentage)
#_______________________________________________________________________________
source("C:/Users/u6044061/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/(function)_severe_outcome_proj.R", echo=TRUE)
load(file = '1_inputs/severe_outcome_FINAL.Rdata') #adjusted values from Qatar
#(C/C) calculate severe outcome incidence by vax_status
severe_outcome_this_run = severe_outcome_FINAL %>% left_join(VE_tracker) %>%
mutate(percentage = percentage*(1-VE)) %>%
select(date,outcome,outcome_long,age_group,vaccine_type,dose,percentage)
#_______________________________________________________________________________
source("C:/Users/u6044061/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/(function)_severe_outcome_proj.R", echo=TRUE)
load(file = '1_inputs/severe_outcome_FINAL.Rdata') #adjusted values from Qatar
severe_outcome_FINAL
options(scipen = 1000)
severe_outcome_FINAL
#(B/C)
if (risk_group_toggle == "on"){
RR_estimate = 1
severe_outcomes_list = unique(severe_outcome_FINAL$outcome)
severe_outcome_FINAL_wRisk = data.frame()
for (o in 1:length(severe_outcomes_list)){
this_outcome = severe_outcomes_list[o]
for (i in 1:num_age_groups){
this_age = age_group_labels[i]
row = severe_outcome_FINAL %>% filter(outcome == this_outcome & age_group == this_age)
IR = row$percentage
P = pop_setting$pop[pop_setting$age_group == this_age]
P_general = pop_risk_group_dn$pop[pop_risk_group_dn$risk_group == 'general_public' & pop_risk_group_dn$age_group == this_age]
P_risk = pop_risk_group_dn$pop[pop_risk_group_dn$risk_group == risk_group_name & pop_risk_group_dn$age_group == this_age]
if (P != (P_general+P_risk)){stop('Line 15 P_general + P_risk != P_overall')}
IR_gen = ((IR*P)/((RR_estimate*P_risk)/P_general +1))/P_general
IR_risk = ((IR*P)/(P_general/(RR_estimate*P_risk) +1))/P_risk
row_gen = row %>% mutate(percentage = IR_gen,risk_group = 'general_public')
row_risk = row %>% mutate(percentage = IR_risk,risk_group = risk_group_name)
severe_outcome_FINAL_wRisk = rbind(severe_outcome_FINAL_wRisk,row_gen,row_risk)
}
}
severe_outcome_FINAL_wRisk$percentage[is.na(severe_outcome_FINAL_wRisk$percentage)]=0
severe_outcome_FINAL = severe_outcome_FINAL_wRisk
}
severe_outcome_FINAL
View(severe_outcome_FINAL_wRisk)
load(file = '1_inputs/severe_outcome_FINAL.Rdata') #adjusted values from Qatar
View(severe_outcome_FINAL)
load(file = '1_inputs/severe_outcome_FINAL.Rdata') #adjusted values from Qatar
#(C/C) calculate severe outcome incidence by vax_status
severe_outcome_this_run = severe_outcome_FINAL %>% left_join(VE_tracker) %>%
mutate(percentage = percentage*(1-VE)) %>%
select(date,outcome,outcome_long,age_group,risk_group,vaccine_type,dose,percentage)
source("C:/Users/u6044061/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/(function)_severe_outcome_proj.R", echo=TRUE)
severe_outcome_this_run
View(severe_outcome_this_run)
load(file = '1_inputs/severe_outcome_FINAL.Rdata') #adjusted values from Qatar
View(severe_outcome_FINAL)
nrow(severe_outcome_this_run[severe_outcome_this_run$date <= max(incidence_log_tidy$date),])
nrow(workshop)
View(workshop)
load(file = '1_inputs/severe_outcome_FINAL.Rdata') #adjusted values from Qatar
#(C/C) calculate severe outcome incidence by vax_status
severe_outcome_this_run = severe_outcome_FINAL %>% left_join(VE_tracker) %>%
mutate(percentage = percentage*(1-VE)) %>%
select(date,outcome,outcome_long,age_group,risk_group,vaccine_type,dose,percentage)
#_______________________________________________________________________________
View(incidence_log_tidy)
##### Genuine projection from incidence!
#(A/D) Join incidence_log_tidy with severe outcome incidence by vax status
workshop = incidence_log_tidy %>%
left_join(severe_outcome_this_run) %>%
mutate(proj = incidence*percentage) #calculate incidence -> severe outcome
View(workshop)
unique(severe_outcome_this_run$outcome)
unique(severe_outcome_this_run$date)
unique(severe_outcome_this_run$outcome)
unique(severe_outcome_this_run$age_group)
unique(severe_outcome_this_run$risk_group)
unique(severe_outcome_this_run$vaccine_type)
unique(severe_outcome_this_run$dose)
unique(incidence_log_tidy$dose)
unique(vaccine_type$dose)
unique(incidence_log_tidy$vaccine_type)
unique(incidence_log_tidy$age_group)
unique(incidence_log_tidy$risk_group)
unique(incidence_log_tidy$date)
nrow(severe_outcome_this_run[severe_outcome_this_run$date <= max(incidence_log_tidy$date),])
if(!nrow(severe_outcome_this_run[severe_outcome_this_run$date <= max(incidence_log_tidy$date),]) == nrow(workshop)){stop('something has gone amiss')
} else if (!nrow(severe_outcome_this_run)*num_risk_groups == nrow(workshop)){warning('more doses left to give in this simulation')}
nrow(workshop)
##### Genuine projection from incidence!
#(A/D) Join incidence_log_tidy with severe outcome incidence by vax status
workshop = incidence_log_tidy %>%
left_join(severe_outcome_this_run) %>%
mutate(proj = incidence*percentage) #calculate incidence -> severe outcome
unique(workshop$date)
unique(workshop$outcome)
##### Genuine projection from incidence!
#(A/D) Join incidence_log_tidy with severe outcome incidence by vax status
workshop = severe_outcome_this_run %>%
left_join(incidence_log_tidy) %>%
mutate(proj = incidence*percentage) #calculate incidence -> severe outcome
nrow(severe_outcome_this_run[severe_outcome_this_run$date <= max(incidence_log_tidy$date),])
if(!nrow(severe_outcome_this_run[severe_outcome_this_run$date <= max(incidence_log_tidy$date),]) == nrow(workshop)){stop('something has gone amiss')
} else if (!nrow(severe_outcome_this_run)*num_risk_groups == nrow(workshop)){warning('more doses left to give in this simulation')}
nrow(severe_outcome_this_run)
if(!nrow(severe_outcome_this_run[severe_outcome_this_run$date <= max(incidence_log_tidy$date),]) == nrow(workshop)){stop('something has gone amiss')
} else if (!nrow(severe_outcome_this_run) == nrow(workshop)){warning('more doses left to give in this simulation')}
source("C:/Users/u6044061/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/(function)_severe_outcome_proj.R", echo=TRUE)
##### Genuine projection from incidence!
#(A/D) Join incidence_log_tidy with severe outcome incidence by vax status
workshop = severe_outcome_this_run %>%
left_join(incidence_log_tidy) %>%
mutate(proj = incidence*percentage) #calculate incidence -> severe outcome
if(!nrow(severe_outcome_this_run[severe_outcome_this_run$date <= max(incidence_log_tidy$date),]) == nrow(workshop)){stop('something has gone amiss')
} else if (!nrow(severe_outcome_this_run) == nrow(workshop)){warning('more doses left to give in this simulation')}
severe_outcome_log_tidy = workshop %>% select(date,risk_group,age_group,dose,vaccine_type,outcome,proj)
View(severe_outcome_log_tidy)
View(severe_outcome_this_run)
##### Genuine projection from incidence!
#(A/D) Join incidence_log_tidy with severe outcome incidence by vax status
workshop = severe_outcome_this_run %>%
left_join(incidence_log_tidy) %>%
mutate(proj = incidence*percentage) #calculate incidence -> severe outcome
##### Genuine projection from incidence!
#(A/D) Join incidence_log_tidy with severe outcome incidence by vax status
workshop = severe_outcome_this_run %>%
left_join(incidence_log_tidy) %>%
mutate(proj = incidence*percentage) #calculate incidence -> severe outcome
risk_group_list
risk_group_labels
### INCIDENCE LOG TIDY
workshop = subset(incidence_log_unedited, select=-c(time,daily_cases))
workshop = pivot_longer(
workshop,
cols = paste((num_disease_classes)*(num_age_groups*num_vax_classes)*RISK+1):paste((num_disease_classes+1)*(num_age_groups*num_vax_classes)*RISK),
names_to = 'temp',
values_to = 'incidence'
)
workshop$temp = as.numeric(workshop$temp) - (num_disease_classes)*(num_age_groups*num_vax_classes)*RISK
#HERE - ERROR need to align!
workshop2=as.data.frame(unique(workshop$temp)); colnames(workshop2)=c('temp')
if (RISK == 1){
workshop2 = workshop2 %>%   mutate(temp_risk = temp, risk_group = risk_group_labels[[1]])
} else {
workshop2 = workshop2 %>%
mutate(temp_risk = case_when(
temp <= max(workshop$temp)/2 ~ temp,
temp > max(workshop$temp)/2  ~ temp - max(workshop$temp)/2
),
risk_group = case_when(
temp <= max(workshop$temp)/2 ~ risk_group_labels[[1]],
temp > max(workshop$temp)/2  ~ risk_group_labels[[2]]
))
}
workshop2$age_group = rep(age_group_labels,num_vax_classes) #smallest subdivision is age
workshop2$dose = 0                                          #then dose
workshop2$vaccine_type = "unvaccinated"                     #then vaccine type
for (d in 1:num_vax_doses){
workshop2$dose[workshop2$temp_risk %in% c((T*(d-1)+1)*J+1):((T*d+1)*J)] = d
for (t in 1:num_vax_types){
workshop2$vaccine_type[workshop2$temp_risk %in% c((((t-1)+(d-1)*T+1)*J+1):(((t-1)+(d-1)*T+2)*J))] = vax_type_list[t]
}
}
#View(workshop2)
#CHECKED: yes aligns as expected
incidence_log_tidy = workshop %>% left_join(workshop2)
incidence_log_tidy = subset(incidence_log_tidy,select=-c(temp))
load(file = '1_inputs/severe_outcome_FINAL.Rdata') #adjusted values from Qatar
#(C/C) calculate severe outcome incidence by vax_status
severe_outcome_this_run = severe_outcome_FINAL %>% left_join(VE_tracker) %>%
mutate(percentage = percentage*(1-VE)) %>%
select(date,outcome,outcome_long,age_group,risk_group,vaccine_type,dose,percentage)
source("C:/Users/u6044061/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/(function)_severe_outcome_proj.R", echo=TRUE)
#(B/C)
if (risk_group_toggle == "on"){
RR_estimate = 1
severe_outcomes_list = unique(severe_outcome_FINAL$outcome)
severe_outcome_FINAL_wRisk = data.frame()
for (o in 1:length(severe_outcomes_list)){
this_outcome = severe_outcomes_list[o]
for (i in 1:num_age_groups){
this_age = age_group_labels[i]
row = severe_outcome_FINAL %>% filter(outcome == this_outcome & age_group == this_age)
IR = row$percentage
P = pop_setting$pop[pop_setting$age_group == this_age]
P_general = pop_risk_group_dn$pop[pop_risk_group_dn$risk_group == 'general_public' & pop_risk_group_dn$age_group == this_age]
P_risk = pop_risk_group_dn$pop[pop_risk_group_dn$risk_group == risk_group_name & pop_risk_group_dn$age_group == this_age]
if (P != (P_general+P_risk)){stop('Line 15 P_general + P_risk != P_overall')}
IR_gen = ((IR*P)/((RR_estimate*P_risk)/P_general +1))/P_general
IR_risk = ((IR*P)/(P_general/(RR_estimate*P_risk) +1))/P_risk
row_gen = row %>% mutate(percentage = IR_gen,risk_group = 'general_public')
row_risk = row %>% mutate(percentage = IR_risk,risk_group = risk_group_name)
severe_outcome_FINAL_wRisk = rbind(severe_outcome_FINAL_wRisk,row_gen,row_risk)
}
}
severe_outcome_FINAL_wRisk$percentage[is.na(severe_outcome_FINAL_wRisk$percentage)]=0
severe_outcome_FINAL = severe_outcome_FINAL_wRisk
}
#(C/C) calculate severe outcome incidence by vax_status
severe_outcome_this_run = severe_outcome_FINAL %>% left_join(VE_tracker) %>%
mutate(percentage = percentage*(1-VE)) %>%
select(date,outcome,outcome_long,age_group,risk_group,vaccine_type,dose,percentage)
source("C:/Users/u6044061/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/(function)_severe_outcome_proj.R", echo=TRUE)
load(file = '1_inputs/severe_outcome_FINAL.Rdata') #adjusted values from Qatar
#(B/C)
if (risk_group_toggle == "on"){
RR_estimate = 2
severe_outcomes_list = unique(severe_outcome_FINAL$outcome)
severe_outcome_FINAL_wRisk = data.frame()
for (o in 1:length(severe_outcomes_list)){
this_outcome = severe_outcomes_list[o]
for (i in 1:num_age_groups){
this_age = age_group_labels[i]
row = severe_outcome_FINAL %>% filter(outcome == this_outcome & age_group == this_age)
IR = row$percentage
P = pop_setting$pop[pop_setting$age_group == this_age]
P_general = pop_risk_group_dn$pop[pop_risk_group_dn$risk_group == 'general_public' & pop_risk_group_dn$age_group == this_age]
P_risk = pop_risk_group_dn$pop[pop_risk_group_dn$risk_group == risk_group_name & pop_risk_group_dn$age_group == this_age]
if (P != (P_general+P_risk)){stop('Line 15 P_general + P_risk != P_overall')}
IR_gen = ((IR*P)/((RR_estimate*P_risk)/P_general +1))/P_general
IR_risk = ((IR*P)/(P_general/(RR_estimate*P_risk) +1))/P_risk
row_gen = row %>% mutate(percentage = IR_gen,risk_group = 'general_public')
row_risk = row %>% mutate(percentage = IR_risk,risk_group = risk_group_name)
severe_outcome_FINAL_wRisk = rbind(severe_outcome_FINAL_wRisk,row_gen,row_risk)
}
}
severe_outcome_FINAL_wRisk$percentage[is.na(severe_outcome_FINAL_wRisk$percentage)]=0
severe_outcome_FINAL = severe_outcome_FINAL_wRisk
}
#(C/C) calculate severe outcome incidence by vax_status
severe_outcome_this_run = severe_outcome_FINAL %>% left_join(VE_tracker) %>%
mutate(percentage = percentage*(1-VE)) %>%
select(date,outcome,outcome_long,age_group,risk_group,vaccine_type,dose,percentage)
#_______________________________________________________________________________
time.end=proc.time()[[3]]
time.end-time.start
source("C:/Users/u6044061/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/(function)_severe_outcome_proj.R", echo=TRUE)
ticket
source("C:/Users/u6044061/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/(SM run 1) prioritising primary doses.R", echo=TRUE)
results_warehouse_SM = list()
date_complete_at_risk_group
date-now
date_now
waning_toggle_acqusition
waning_toggle_severe_outcome
waning_toggle_rho_acqusition
waning_toggle_rho_acqusition = FALSE
outbreak_post_rollout
source("C:/Users/u6044061/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/(SM run 1) prioritising primary doses.R", echo=TRUE)
source("C:/Users/u6044061/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/(SM run 1) prioritising primary doses.R", echo=TRUE)
date_now
pop_risk_group
311944/7994498
warehouse_table
source("C:/Users/u6044061/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/PunkTech - configure high risk groups.R", echo=TRUE)
pop_risk_group
risk_group_name = "adults_with_comorbidities" #options: pregnant_women, adults_with_comorbidities
source("C:/Users/u6044061/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/(SM run 1) prioritising primary doses.R", echo=TRUE)
risk_group_name
if (setting != prev_setting | num_risk_groups != prev_risk_num | risk_group_name != prev_risk_group){source(paste(getwd(),"/(1)_simulate_setting.R",sep=""))} #load setting stats if new setting
risk_group_name
risk_group_name = NULL
if (exists("prev_risk_group") == FALSE){ prev_risk_group = "NONE"}
prev_risk_group
if (setting != prev_setting | num_risk_groups != prev_risk_num | risk_group_name != prev_risk_group){source(paste(getwd(),"/(1)_simulate_setting.R",sep=""))} #load setting stats if new setting
risk_group_name != prev_risk_group
risk_group_name
prev_risk_group
source("C:/Users/u6044061/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/(SM run 1) prioritising primary doses.R", echo=TRUE)
risk_group_name  = 'adults_with_comorbidities'
source("C:/Users/u6044061/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/(SM run 1) prioritising primary doses.R", echo=TRUE)
source("C:/Users/u6044061/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/(SM run 1) prioritising primary doses.R", echo=TRUE)
pop_risk_group_dn
risk_dn
#COMEBACK_RISK these are DUMMY VALUES (~DHS fertility rate)
risk_dn = read.csv('1_inputs/risk_group.csv')
risk_group_name
#COMEBACK_RISK these are DUMMY VALUES (~DHS fertility rate)
risk_dn = read.csv('1_inputs/risk_group.csv')
risk_dn
source("C:/Users/u6044061/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/(1)_simulate_setting.R", echo=TRUE)
source("C:/Users/u6044061/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/(SM run 1) prioritising primary doses.R", echo=TRUE)
View(next_state)
options(scipen = 1000)
View(next_state)
pop_risk_group_dn
pop_risk_group
aggregate(vaccination_history_POP$doses_delivered_this_date,by=list(vaccination_history_POP$dose),FUN=sum)
aggregate(vaccination_history_TRUE$doses_delivered_this_date,by=list(vaccination_history_TRUE$dose),FUN=sum)
aggregate(vaccination_history_TRUE$doses_delivered_this_date,by=list(vaccination_history_TRUE$dose,vaccination_history_TRUE$age_group),FUN=sum)
age_split
age_group_labels
aggregate(vaccination_history_TRUE$doses_delivered_this_date,by=list(vaccination_history_TRUE$dose,vaccination_history_TRUE$age_group),FUN=sum)
risk_group_toggle
age_risk_split
#ASSUMPTION: equal coverage as not prioritised
vaccination_history_TRUE = data.frame()
adult_pop = sum(pop[3:num_age_groups])
age_risk_split =  pop_risk_group_dn %>%
mutate(split = case_when(
age_group %in% c('0 to 4','5 to 17') ~ 0,
TRUE ~ pop/adult_pop
))
age_risk_split
adults_with_comorbidities_prioritisation = 0.8 #COMEBACK - check this assumption!
age_risk_split  = pop_risk_group_dn %>%
group_by(risk_group) %>% mutate(split = pop/sum(pop)) %>%
ungroup() %>% mutate(split = case_when(
risk_group == risk_group_name ~ split * adults_with_comorbidities_prioritisation,
risk_group == 'general_public' ~ split * (1-adults_with_comorbidities_prioritisation)
))
age_risk_split
adult_pop = sum(pop[3:num_age_groups])
age_risk_split  = pop_risk_group_dn %>%
group_by(risk_group) %>% mutate(split = case_when(
age_group %in% c('0 to 4','5 to 17') ~ 0,
TRUE ~ pop/adult_pop)) %>%
ungroup() %>% mutate(split = case_when(
risk_group == risk_group_name ~ split * adults_with_comorbidities_prioritisation,
risk_group == 'general_public' ~ split * (1-adults_with_comorbidities_prioritisation)
))
age_risk_split
if (sum(age_risk_split$split) !=1){stop('(1) simulate setting line 320')}
age_risk_split  = pop_risk_group_dn %>%
group_by(risk_group) %>% mutate(split = case_when(
age_group %in% c('0 to 4','5 to 17') ~ 0,
TRUE ~ pop/adult_pop))
age_risk_split
adult_pop = sum(pop[3:num_age_groups])
age_risk_split  = pop_risk_group_dn %>%
group_by(risk_group) %>% mutate(split = case_when(
age_group %in% c('0 to 4','5 to 17') ~ 0,
TRUE ~ pop/adult_pop))
if (sum(age_risk_split$split) !=1){stop('(1) simulate setting line 320')}
age_risk_split  = pop_risk_group_dn %>%
group_by(risk_group) %>% mutate(split = case_when(
age_group %in% c('0 to 4','5 to 17') ~ 0,
TRUE ~ pop/adult_pop)) %>%
ungroup() %>% mutate(split = case_when(
risk_group == risk_group_name &  age_group %in% c('30 to 44','45 to 59')~ split * adults_with_comorbidities_prioritisation,
risk_group == 'general_public' &  age_group %in% c('30 to 44','45 to 59')~ split * (1-adults_with_comorbidities_prioritisation)
))
if (sum(age_risk_split$split) !=1){stop('(1) simulate setting line 320')}
age_risk_split
age_risk_split  = pop_risk_group_dn %>%
group_by(risk_group) %>% mutate(split = case_when(
age_group %in% c('0 to 4','5 to 17') ~ 0,
TRUE ~ pop/adult_pop)) %>%
ungroup() %>% mutate(split = case_when(
risk_group == risk_group_name &  age_group %in% c('30 to 44','45 to 59')~ split * adults_with_comorbidities_prioritisation,
risk_group == 'general_public' &  age_group %in% c('30 to 44','45 to 59')~ split * (1-adults_with_comorbidities_prioritisation),
TRUE ~ split
))
if (sum(age_risk_split$split) !=1){stop('(1) simulate setting line 320')}
age_risk_split
pop_risk_group_dn %>%
group_by(risk_group) %>% mutate(split = case_when(
age_group %in% c('0 to 4','5 to 17') ~ 0,
TRUE ~ pop/adult_pop))
