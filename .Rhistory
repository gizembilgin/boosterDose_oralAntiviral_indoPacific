doses_to_deliver = 0
} else{
priority_group$doses_delivered[priority_group$dose == 1] = priority_group$eligible_individuals[priority_group$dose == 1]
doses_to_deliver = doses_to_deliver - sum(priority_group$eligible_individuals[priority_group$dose == 1])
}
}
}
}
highest_priority
priority_group_num
prop_to_deliver = doses_to_deliver / sum(priority_group$eligible_individuals[priority_group$dose == 1])
priority_group$doses_delivered[priority_group$dose == 1] = doses_to_deliver
doses_to_deliver = 0
priority_group = eligible_pop[eligible_pop$priority == priority_group_num,]
if (length(unique(priority_group$age_group)) == 1){
workshop = doses_to_deliver/vax_dose_strategy - priority_group$eligible_individuals[priority_group$dose == vax_dose_strategy]
if (workshop < 0){
priority_group$doses_delivered[priority_group$dose == vax_dose_strategy & priority_group$priority == priority_group_num] = doses_to_deliver/vax_dose_strategy
if (vax_dose_strategy == 2){priority_group$doses_delivered[priority_group$dose == 1] = doses_to_deliver/vax_dose_strategy }
doses_to_deliver = 0
} else if (workshop>0){
priority_group$doses_delivered[priority_group$dose == vax_dose_strategy] =  priority_group$eligible_individuals[priority_group$dose == vax_dose_strategy]
doses_to_deliver = doses_to_deliver - priority_group$eligible_individuals[priority_group$dose == vax_dose_strategy]
if (vax_dose_strategy == 2){
workshop2 = doses_to_deliver- priority_group$eligible_individuals[priority_group$dose == 1]
if(workshop2 < 0){
priority_group$doses_delivered[priority_group$dose == 1] = doses_to_deliver
doses_to_deliver = 0
} else{
priority_group$doses_delivered[priority_group$dose == 1] = priority_group$eligible_individuals[priority_group$dose == 1]
doses_to_deliver = doses_to_deliver - priority_group$eligible_individuals[priority_group$dose == 1]
}
}
}
} else {
workshop = doses_to_deliver/vax_dose_strategy - sum(priority_group$eligible_individuals[priority_group$dose == vax_dose_strategy])
if (workshop < 0){
prop_to_deliver = doses_to_deliver/vax_dose_strategy / sum(priority_group$eligible_individuals[priority_group$dose == vax_dose_strategy])
priority_group$doses_delivered[priority_group$dose == vax_dose_strategy] = prop_to_deliver * priority_group$eligible_individuals[priority_group$dose == vax_dose_strategy]
if (vax_dose_strategy == 2){priority_group$doses_delivered[priority_group$dose == 1] = prop_to_deliver * priority_group$eligible_individuals[priority_group$dose == 1] }
doses_to_deliver = 0
} else if (workshop>0){
priority_group$doses_delivered[priority_group$dose == vax_dose_strategy] =  priority_group$eligible_individuals[priority_group$dose == vax_dose_strategy]
doses_to_deliver = doses_to_deliver - sum(priority_group$eligible_individuals[priority_group$dose == vax_dose_strategy])
if (vax_dose_strategy == 2){
workshop2 = doses_to_deliver- priority_group$eligible_individuals[priority_group$dose == 1]
if(workshop2 < 0){
prop_to_deliver = doses_to_deliver / sum(priority_group$eligible_individuals[priority_group$dose == 1])
priority_group$doses_delivered[priority_group$dose == 1] = doses_to_deliver
doses_to_deliver = 0
} else{
priority_group$doses_delivered[priority_group$dose == 1] = priority_group$eligible_individuals[priority_group$dose == 1]
doses_to_deliver = doses_to_deliver - sum(priority_group$eligible_individuals[priority_group$dose == 1])
}
}
}
}
eligible_pop$doses_delivered[eligible_pop$priority == priority_group_num] = priority_group$doses_delivered
priority_group_num = priority_group_num + 1
while (doses_to_deliver>0 & priority_group_num <= (highest_priority)){
priority_group = eligible_pop[eligible_pop$priority == priority_group_num,]
if (length(unique(priority_group$age_group)) == 1){
workshop = doses_to_deliver/vax_dose_strategy - priority_group$eligible_individuals[priority_group$dose == vax_dose_strategy]
if (workshop < 0){
priority_group$doses_delivered[priority_group$dose == vax_dose_strategy & priority_group$priority == priority_group_num] = doses_to_deliver/vax_dose_strategy
if (vax_dose_strategy == 2){priority_group$doses_delivered[priority_group$dose == 1] = doses_to_deliver/vax_dose_strategy }
doses_to_deliver = 0
} else if (workshop>0){
priority_group$doses_delivered[priority_group$dose == vax_dose_strategy] =  priority_group$eligible_individuals[priority_group$dose == vax_dose_strategy]
doses_to_deliver = doses_to_deliver - priority_group$eligible_individuals[priority_group$dose == vax_dose_strategy]
if (vax_dose_strategy == 2){
workshop2 = doses_to_deliver- priority_group$eligible_individuals[priority_group$dose == 1]
if(workshop2 < 0){
priority_group$doses_delivered[priority_group$dose == 1] = doses_to_deliver
doses_to_deliver = 0
} else{
priority_group$doses_delivered[priority_group$dose == 1] = priority_group$eligible_individuals[priority_group$dose == 1]
doses_to_deliver = doses_to_deliver - priority_group$eligible_individuals[priority_group$dose == 1]
}
}
}
} else {
workshop = doses_to_deliver/vax_dose_strategy - sum(priority_group$eligible_individuals[priority_group$dose == vax_dose_strategy])
if (workshop < 0){
prop_to_deliver = doses_to_deliver/vax_dose_strategy / sum(priority_group$eligible_individuals[priority_group$dose == vax_dose_strategy])
priority_group$doses_delivered[priority_group$dose == vax_dose_strategy] = prop_to_deliver * priority_group$eligible_individuals[priority_group$dose == vax_dose_strategy]
if (vax_dose_strategy == 2){priority_group$doses_delivered[priority_group$dose == 1] = prop_to_deliver * priority_group$eligible_individuals[priority_group$dose == 1] }
doses_to_deliver = 0
} else if (workshop>0){
priority_group$doses_delivered[priority_group$dose == vax_dose_strategy] =  priority_group$eligible_individuals[priority_group$dose == vax_dose_strategy]
doses_to_deliver = doses_to_deliver - sum(priority_group$eligible_individuals[priority_group$dose == vax_dose_strategy])
if (vax_dose_strategy == 2){
workshop2 = doses_to_deliver- priority_group$eligible_individuals[priority_group$dose == 1]
if(workshop2 < 0){
prop_to_deliver = doses_to_deliver / sum(priority_group$eligible_individuals[priority_group$dose == 1])
priority_group$doses_delivered[priority_group$dose == 1] = doses_to_deliver
doses_to_deliver = 0
} else{
priority_group$doses_delivered[priority_group$dose == 1] = priority_group$eligible_individuals[priority_group$dose == 1]
doses_to_deliver = doses_to_deliver - sum(priority_group$eligible_individuals[priority_group$dose == 1])
}
}
}
}
eligible_pop$doses_delivered[eligible_pop$priority == priority_group_num] = priority_group$doses_delivered
priority_group_num = priority_group_num + 1
}
source("~/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/(plot)_vaccination_strategies.R", echo=TRUE)
length(unique(priority_group$age_group)) == 1
workshop = doses_to_deliver/vax_dose_strategy - priority_group$eligible_individuals[priority_group$dose == vax_dose_strategy]
if (workshop < 0){
priority_group$doses_delivered[priority_group$dose == vax_dose_strategy & priority_group$priority == priority_group_num] = doses_to_deliver/vax_dose_strategy
if (vax_dose_strategy == 2){priority_group$doses_delivered[priority_group$dose == 1] = doses_to_deliver/vax_dose_strategy }
doses_to_deliver = 0
} else if (workshop>0){
priority_group$doses_delivered[priority_group$dose == vax_dose_strategy] =  priority_group$eligible_individuals[priority_group$dose == vax_dose_strategy]
doses_to_deliver = doses_to_deliver - priority_group$eligible_individuals[priority_group$dose == vax_dose_strategy]
if (vax_dose_strategy == 2){
workshop2 = doses_to_deliver- priority_group$eligible_individuals[priority_group$dose == 1]
if(workshop2 < 0){
priority_group$doses_delivered[priority_group$dose == 1] = doses_to_deliver
doses_to_deliver = 0
} else{
priority_group$doses_delivered[priority_group$dose == 1] = priority_group$eligible_individuals[priority_group$dose == 1]
doses_to_deliver = doses_to_deliver - priority_group$eligible_individuals[priority_group$dose == 1]
}
}
}
workshop = doses_to_deliver/vax_dose_strategy - sum(priority_group$eligible_individuals[priority_group$dose == vax_dose_strategy])
priority_group$doses_delivered[priority_group$dose == vax_dose_strategy] =  priority_group$eligible_individuals[priority_group$dose == vax_dose_strategy]
doses_to_deliver = doses_to_deliver - sum(priority_group$eligible_individuals[priority_group$dose == vax_dose_strategy])
workshop2 = doses_to_deliver- priority_group$eligible_individuals[priority_group$dose == 1]
prop_to_deliver = doses_to_deliver / sum(priority_group$eligible_individuals[priority_group$dose == 1])
priority_group$doses_delivered[priority_group$dose == 1] = doses_to_deliver
doses_to_deliver = 0
priority_group$doses_delivered[priority_group$dose == 1] = priority_group$eligible_individuals[priority_group$dose == 1]
doses_to_deliver = doses_to_deliver - sum(priority_group$eligible_individuals[priority_group$dose == 1])
source("~/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/(plot)_vaccination_strategies.R", echo=TRUE)
priority_group = eligible_pop[eligible_pop$priority == priority_group_num,]
priority_group$doses_delivered[priority_group$dose == 1] = doses_to_deliver
doses_to_deliver = 0
source("~/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/(plot)_vaccination_strategies.R", echo=TRUE)
source("~/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/(plot)_vaccination_strategies.R", echo=TRUE)
source("~/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/(plot)_vaccination_strategies.R", echo=TRUE)
source("~/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/(plot)_vaccination_strategies.R", echo=TRUE)
source("~/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/(plot)_vaccination_strategies.R", echo=TRUE)
source("~/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/(plot)_vaccination_strategies.R", echo=TRUE)
source("~/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/(plot)_vaccination_strategies.R", echo=TRUE)
source("~/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/(plot)_vaccination_strategies.R", echo=TRUE)
source("~/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/(plot)_vaccination_strategies.R", echo=TRUE)
priority_group_num
length(unique(priority_group$age_group)) == 1
workshop = doses_to_deliver/vax_dose_strategy - sum(priority_group$eligible_individuals[priority_group$dose == vax_dose_strategy])
prop_to_deliver = doses_to_deliver/vax_dose_strategy / sum(priority_group$eligible_individuals[priority_group$dose == vax_dose_strategy])
doses_to_deliver
doses_to_deliver = vax_strategy_num_doses
priority_group_num = 1
eligible_pop <- eligible_pop %>% mutate(doses_delivered = 0)
n=length(unique(eligible_pop$priority))
highest_priority = sort(unique(eligible_pop$priority),partial=n-1)[n-1] #highest valid priority
priority_group = eligible_pop[eligible_pop$priority == priority_group_num,]
if (length(unique(priority_group$age_group)) == 1){
workshop = doses_to_deliver/vax_dose_strategy - priority_group$eligible_individuals[priority_group$dose == vax_dose_strategy]
if (workshop < 0){
priority_group$doses_delivered[priority_group$dose == vax_dose_strategy & priority_group$priority == priority_group_num] = doses_to_deliver/vax_dose_strategy
if (vax_dose_strategy == 2){priority_group$doses_delivered[priority_group$dose == 1] = doses_to_deliver/vax_dose_strategy }
doses_to_deliver = 0
} else if (workshop>0){
priority_group$doses_delivered[priority_group$dose == vax_dose_strategy] =  priority_group$eligible_individuals[priority_group$dose == vax_dose_strategy]
doses_to_deliver = doses_to_deliver - priority_group$eligible_individuals[priority_group$dose == vax_dose_strategy]
if (vax_dose_strategy == 2){
workshop2 = doses_to_deliver- priority_group$eligible_individuals[priority_group$dose == 1]
if(workshop2 < 0){
priority_group$doses_delivered[priority_group$dose == 1] = doses_to_deliver
doses_to_deliver = 0
} else{
priority_group$doses_delivered[priority_group$dose == 1] = priority_group$eligible_individuals[priority_group$dose == 1]
doses_to_deliver = doses_to_deliver - priority_group$eligible_individuals[priority_group$dose == 1]
}
}
}
} else {
workshop = doses_to_deliver/vax_dose_strategy - sum(priority_group$eligible_individuals[priority_group$dose == vax_dose_strategy])
if (workshop < 0){
prop_to_deliver = doses_to_deliver/vax_dose_strategy / sum(priority_group$eligible_individuals[priority_group$dose == vax_dose_strategy])
priority_group$doses_delivered[priority_group$dose == vax_dose_strategy] = prop_to_deliver * priority_group$eligible_individuals[priority_group$dose == vax_dose_strategy]
if (vax_dose_strategy == 2){priority_group$doses_delivered[priority_group$dose == 1] = prop_to_deliver * priority_group$eligible_individuals[priority_group$dose == 1] }
doses_to_deliver = 0
} else if (workshop>0){
priority_group$doses_delivered[priority_group$dose == vax_dose_strategy] =  priority_group$eligible_individuals[priority_group$dose == vax_dose_strategy]
doses_to_deliver = doses_to_deliver - sum(priority_group$eligible_individuals[priority_group$dose == vax_dose_strategy])
if (vax_dose_strategy == 2){
workshop2 = doses_to_deliver- priority_group$eligible_individuals[priority_group$dose == 1]
if(workshop2 < 0){
prop_to_deliver = doses_to_deliver / sum(priority_group$eligible_individuals[priority_group$dose == 1])
priority_group$doses_delivered[priority_group$dose == 1] = doses_to_deliver
doses_to_deliver = 0
} else{
priority_group$doses_delivered[priority_group$dose == 1] = priority_group$eligible_individuals[priority_group$dose == 1]
doses_to_deliver = doses_to_deliver - sum(priority_group$eligible_individuals[priority_group$dose == 1])
}
}
}
}
source("~/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/(plot)_vaccination_strategies.R", echo=TRUE)
vaccine_allocation =  eligible_pop %>% select(agegroup,dose,doses_delivered,priority)
vaccine_allocation =  eligible_pop %>% select(age_group,dose,doses_delivered,priority)
View(vaccine_allocation)
age_split
#COMEBACK - arbitrary uniform distribution of vaccines into age classes >19 years old
#age_group_labels = c('0-4','5-19','20-29','30-39','40-49','50-59','60-100')
multiplier =  sum(pop[3:num_age_groups])/sum(pop)
multiplier = c(0,0,rep(multiplier,J-2))
multiplier
age_split
row = vaccination_history_FINAL[i,]
row
vaccination_history_FINAL_V2 = data.frame() #with doses by age by day
#COMEBACK - uniform assumption in ages 20+
age_split =  pop/sum(pop[3:num_age_groups]); age_split[1:2] = 0
for (i in 1:length(vaccination_history_FINAL)){
for (j in 1:num_age_groups){
row = vaccination_history_FINAL[i,]
row <- row %>% mutate(
age_group = age_group_labels[j],
doses_delivered_this_date = doses_delivered_this_date*age_split)
vaccination_history_FINAL_V2 = rbind(vaccination_history_FINAL_V2,row)
}
}
doses_delivered_this_date
for (i in 1:length(vaccination_history_FINAL)){
for (j in 1:num_age_groups){
row = vaccination_history_FINAL[i,]
row <- row %>% mutate(
age_group = age_group_labels[j],
doses_delivered_this_date = doses_delivered_this_date*age_split[j])
vaccination_history_FINAL_V2 = rbind(vaccination_history_FINAL_V2,row)
}
}
View(vaccination_history_FINAL_V2)
vaccination_history_FINAL_V2 = data.frame() #with doses by age by day
#COMEBACK - uniform assumption in ages 20+
age_split =  pop/sum(pop[3:num_age_groups]); age_split[1:2] = 0
for (i in 1:length(vaccination_history_FINAL)){
for (j in 1:num_age_groups){
row = vaccination_history_FINAL[i,]
row <- row %>% mutate(
age_group = age_group_labels[j],
doses_delivered_this_date = doses_delivered_this_date*age_split[j])
vaccination_history_FINAL_V2 = rbind(vaccination_history_FINAL_V2,row)
}
}
for (i in 1:nrow(vaccination_history_FINAL)){
for (j in 1:num_age_groups){
row = vaccination_history_FINAL[i,]
row <- row %>% mutate(
age_group = age_group_labels[j],
doses_delivered_this_date = doses_delivered_this_date*age_split[j])
vaccination_history_FINAL_V2 = rbind(vaccination_history_FINAL_V2,row)
}
}
vaccination_history_FINAL_V2 = data.frame() #with doses by age by day
#COMEBACK - uniform assumption in ages 20+
age_split =  pop/sum(pop[3:num_age_groups]); age_split[1:2] = 0
for (i in 1:nrow(vaccination_history_FINAL)){
for (j in 1:num_age_groups){
row = vaccination_history_FINAL[i,]
row <- row %>% mutate(
age_group = age_group_labels[j],
doses_delivered_this_date = doses_delivered_this_date*age_split[j])
vaccination_history_FINAL_V2 = rbind(vaccination_history_FINAL_V2,row)
}
}
sum(vaccination_history_FINAL$doses_delivered_this_date)
sum(vaccination_history_FINAL_V2$doses_delivered_this_date)
sum(vaccination_history_FINAL_V2[vaccination_history_FINAL_V2$date == as.Date(2021-04-11)])
sum(vaccination_history_FINAL_V2[vaccination_history_FINAL_V2$date == as.Date('2021-04-11')])
sum(vaccination_history_FINAL_V2[vaccination_history_FINAL_V2$date == as.Date('2021-04-11'),])
age_split
age_split*770
age_split*61
save = vaccination_history_FINAL_V2
vaccination_history_FINAL_V2 = data.frame() #with doses by age by day
#COMEBACK - uniform assumption in ages 20+
age_split =  pop/sum(pop[3:num_age_groups]); age_split[1:2] = 0
for (j in 1:num_age_groups){
workshop = vaccination_history_FINAL
workshop <- workshop %>% mutate(
age_group = age_group_labels[j],
doses_delivered_this_date = doses_delivered_this_date*age_split[j])
vaccination_history_FINAL_V2 = rbind(vaccination_history_FINAL_V2,row)
}
for (j in 1:num_age_groups){
workshop = vaccination_history_FINAL
workshop <- workshop %>% mutate(
age_group = age_group_labels[j],
doses_delivered_this_date = doses_delivered_this_date*age_split[j])
vaccination_history_FINAL_V2 = rbind(vaccination_history_FINAL_V2,workshop)
}
vaccination_history_FINAL_V2 = data.frame() #with doses by age by day
#COMEBACK - uniform assumption in ages 20+
age_split =  pop/sum(pop[3:num_age_groups]); age_split[1:2] = 0
for (j in 1:num_age_groups){
workshop = vaccination_history_FINAL
workshop <- workshop %>% mutate(
age_group = age_group_labels[j],
doses_delivered_this_date = doses_delivered_this_date*age_split[j])
vaccination_history_FINAL_V2 = rbind(vaccination_history_FINAL_V2,workshop)
}
View(save)
date_now
date_now == as.Date('2021-02-07')
date_now = as.Date('2021-02-07')
age_split =  pop/sum(pop[3:num_age_groups])
age_split[1:2] = 0
for (t in 1:num_vax_types){ #iterating over vaccine types
this_vax = vax_type_list[t]
this_vax_history = vaccination_history_FINAL[vaccination_history_FINAL$vaccine_type == this_vax,]
# (1/3) recorded vax
#COMEBACK delay of J&J first does is 21 days, is this right?
if (nrow(this_vax_history[this_vax_history$date == as.Date(date_now) - vaccine_coverage_delay_1,]) >0){
dose_one <- as.numeric(this_vax_history$doses_delivered_this_date[this_vax_history$date==as.Date(date_now) - vaccine_coverage_delay_1 & this_vax_history$dose==1])
}else { dose_one = 0}
if (nrow(this_vax_history[this_vax_history$date == as.Date(date_now) - vaccine_coverage_delay_2,]) >0){
dose_two <- as.numeric(this_vax_history$doses_delivered_this_date[this_vax_history$date==as.Date(date_now) - vaccine_coverage_delay_2 & this_vax_history$dose==2])
}  else { dose_two = 0}
if (this_vax == "Johnson & Johnson") {dose_two = 0}
#NB: no booster dose yet!
VR_this_step <- cbind(dose_one,dose_two)
for (i in 1:num_age_groups){ # across age groups
increase_one = VR_this_step[1] * age_split[i]
increase_two = VR_this_step[2] * age_split[i]
for (j in 1:4){ #let's assume all SEIR vaccinated
#for (d in 1:D){ #COMEBACK could shorten code with dose  B = i + J*(t+(d-1)*T)
prop1 = prev_state[j,i]     / sum(prev_state[,i])       # prop unvax in SEIR
prop2 = prev_state[j,i+J*t] / sum(prev_state[,i+J*t]) # prop dose one
if (is.nan(prop1) == TRUE){prop1=0}
if (is.nan(prop2) == TRUE){prop2=0}
next_state[j,i]         = next_state[j,i] - increase_one*prop1
next_state[j,i+J*t]     = next_state[j,i+J*t] + increase_one*prop1-increase_two*prop2
next_state[j,i+J*(t+T)] = next_state[j,i+J*(t+T)] + increase_two * prop2
#}
}
}
}
VR_this_step
date_now = as.Date('2021-02-07')+14
age_split =  pop/sum(pop[3:num_age_groups])
age_split[1:2] = 0
for (t in 1:num_vax_types){ #iterating over vaccine types
this_vax = vax_type_list[t]
this_vax_history = vaccination_history_FINAL[vaccination_history_FINAL$vaccine_type == this_vax,]
# (1/3) recorded vax
#COMEBACK delay of J&J first does is 21 days, is this right?
if (nrow(this_vax_history[this_vax_history$date == as.Date(date_now) - vaccine_coverage_delay_1,]) >0){
dose_one <- as.numeric(this_vax_history$doses_delivered_this_date[this_vax_history$date==as.Date(date_now) - vaccine_coverage_delay_1 & this_vax_history$dose==1])
}else { dose_one = 0}
if (nrow(this_vax_history[this_vax_history$date == as.Date(date_now) - vaccine_coverage_delay_2,]) >0){
dose_two <- as.numeric(this_vax_history$doses_delivered_this_date[this_vax_history$date==as.Date(date_now) - vaccine_coverage_delay_2 & this_vax_history$dose==2])
}  else { dose_two = 0}
if (this_vax == "Johnson & Johnson") {dose_two = 0}
#NB: no booster dose yet!
VR_this_step <- cbind(dose_one,dose_two)
for (i in 1:num_age_groups){ # across age groups
increase_one = VR_this_step[1] * age_split[i]
increase_two = VR_this_step[2] * age_split[i]
for (j in 1:4){ #let's assume all SEIR vaccinated
#for (d in 1:D){ #COMEBACK could shorten code with dose  B = i + J*(t+(d-1)*T)
prop1 = prev_state[j,i]     / sum(prev_state[,i])       # prop unvax in SEIR
prop2 = prev_state[j,i+J*t] / sum(prev_state[,i+J*t]) # prop dose one
if (is.nan(prop1) == TRUE){prop1=0}
if (is.nan(prop2) == TRUE){prop2=0}
next_state[j,i]         = next_state[j,i] - increase_one*prop1
next_state[j,i+J*t]     = next_state[j,i+J*t] + increase_one*prop1-increase_two*prop2
next_state[j,i+J*(t+T)] = next_state[j,i+J*(t+T)] + increase_two * prop2
#}
}
}
}
VR_this_step
date_now = as.Date('2022-02-07')+14
age_split =  pop/sum(pop[3:num_age_groups])
age_split[1:2] = 0
for (t in 1:num_vax_types){ #iterating over vaccine types
this_vax = vax_type_list[t]
this_vax_history = vaccination_history_FINAL[vaccination_history_FINAL$vaccine_type == this_vax,]
# (1/3) recorded vax
#COMEBACK delay of J&J first does is 21 days, is this right?
if (nrow(this_vax_history[this_vax_history$date == as.Date(date_now) - vaccine_coverage_delay_1,]) >0){
dose_one <- as.numeric(this_vax_history$doses_delivered_this_date[this_vax_history$date==as.Date(date_now) - vaccine_coverage_delay_1 & this_vax_history$dose==1])
}else { dose_one = 0}
if (nrow(this_vax_history[this_vax_history$date == as.Date(date_now) - vaccine_coverage_delay_2,]) >0){
dose_two <- as.numeric(this_vax_history$doses_delivered_this_date[this_vax_history$date==as.Date(date_now) - vaccine_coverage_delay_2 & this_vax_history$dose==2])
}  else { dose_two = 0}
if (this_vax == "Johnson & Johnson") {dose_two = 0}
#NB: no booster dose yet!
VR_this_step <- cbind(dose_one,dose_two)
for (i in 1:num_age_groups){ # across age groups
increase_one = VR_this_step[1] * age_split[i]
increase_two = VR_this_step[2] * age_split[i]
for (j in 1:4){ #let's assume all SEIR vaccinated
#for (d in 1:D){ #COMEBACK could shorten code with dose  B = i + J*(t+(d-1)*T)
prop1 = prev_state[j,i]     / sum(prev_state[,i])       # prop unvax in SEIR
prop2 = prev_state[j,i+J*t] / sum(prev_state[,i+J*t]) # prop dose one
if (is.nan(prop1) == TRUE){prop1=0}
if (is.nan(prop2) == TRUE){prop2=0}
next_state[j,i]         = next_state[j,i] - increase_one*prop1
next_state[j,i+J*t]     = next_state[j,i+J*t] + increase_one*prop1-increase_two*prop2
next_state[j,i+J*(t+T)] = next_state[j,i+J*(t+T)] + increase_two * prop2
#}
}
}
}
VR_this_step
t
t=1
this_vax = vax_type_list[t]
this_vax_history = vaccination_history_FINAL_V2[vaccination_history_FINAL_V2$vaccine_type == this_vax,]
View(this_vax_history)
# (1/3) recorded vax
#COMEBACK delay of J&J first does is 21 days, is this right?
if (nrow(this_vax_history[this_vax_history$date == as.Date(date_now) - vaccine_coverage_delay_1,]) >0){
dose_one <- as.numeric(this_vax_history$doses_delivered_this_date[this_vax_history$date==as.Date(date_now) - vaccine_coverage_delay_1 & this_vax_history$dose==1])
}else { dose_one = 0}
if (nrow(this_vax_history[this_vax_history$date == as.Date(date_now) - vaccine_coverage_delay_2,]) >0){
dose_two <- as.numeric(this_vax_history$doses_delivered_this_date[this_vax_history$date==as.Date(date_now) - vaccine_coverage_delay_2 & this_vax_history$dose==2])
}  else { dose_two = 0}
dose_two
if (this_vax == "Johnson & Johnson") {dose_two = rep(0,num_age_groups)}
dose_two
VR_this_step <- cbind(dose_one,dose_two)
VR_this_step
i
increase_one = VR_this_step[1,i]
increase_one = VR_this_step[i,1]
increase_two = VR_this_step[i,2]
for (j in 1:4){ #let's assume all SEIR vaccinated
#for (d in 1:D){ #COMEBACK could shorten code with dose  B = i + J*(t+(d-1)*T)
prop1 = prev_state[j,i]     / sum(prev_state[,i])       # prop unvax in SEIR
prop2 = prev_state[j,i+J*t] / sum(prev_state[,i+J*t]) # prop dose one
if (is.nan(prop1) == TRUE){prop1=0}
if (is.nan(prop2) == TRUE){prop2=0}
next_state[j,i]         = next_state[j,i] - increase_one*prop1
next_state[j,i+J*t]     = next_state[j,i+J*t] + increase_one*prop1-increase_two*prop2
next_state[j,i+J*(t+T)] = next_state[j,i+J*(t+T)] + increase_two * prop2
#}
}
next_state=prev_state # initialise next state
### VACCINATION
#COMEBACK append hypoth vaccine strategy
#if (vaccine_strategy_toggle == "on"){
#  if (date_now >= min(vaccine_strategy$date) & date_now <= max(vaccine_strategy$date)){
#
#  }
#}
for (t in 1:num_vax_types){ #iterating over vaccine types
this_vax = vax_type_list[t]
this_vax_history = vaccination_history_FINAL_V2[vaccination_history_FINAL_V2$vaccine_type == this_vax,]
# (1/3) recorded vax
#COMEBACK delay of J&J first does is 21 days, is this right?
if (nrow(this_vax_history[this_vax_history$date == as.Date(date_now) - vaccine_coverage_delay_1,]) >0){
dose_one <- as.numeric(this_vax_history$doses_delivered_this_date[this_vax_history$date==as.Date(date_now) - vaccine_coverage_delay_1 & this_vax_history$dose==1])
}else { dose_one = 0}
if (nrow(this_vax_history[this_vax_history$date == as.Date(date_now) - vaccine_coverage_delay_2,]) >0){
dose_two <- as.numeric(this_vax_history$doses_delivered_this_date[this_vax_history$date==as.Date(date_now) - vaccine_coverage_delay_2 & this_vax_history$dose==2])
}  else { dose_two = 0}
if (this_vax == "Johnson & Johnson") {dose_two = rep(0,num_age_groups)}
#NB: no booster dose yet!
VR_this_step <- cbind(dose_one,dose_two)
for (i in 1:num_age_groups){ # across age groups
increase_one = VR_this_step[i,1]
increase_two = VR_this_step[i,2]
for (j in 1:4){ #let's assume all SEIR vaccinated
#for (d in 1:D){ #COMEBACK could shorten code with dose  B = i + J*(t+(d-1)*T)
prop1 = prev_state[j,i]     / sum(prev_state[,i])       # prop unvax in SEIR
prop2 = prev_state[j,i+J*t] / sum(prev_state[,i+J*t]) # prop dose one
if (is.nan(prop1) == TRUE){prop1=0}
if (is.nan(prop2) == TRUE){prop2=0}
next_state[j,i]         = next_state[j,i] - increase_one*prop1
next_state[j,i+J*t]     = next_state[j,i+J*t] + increase_one*prop1-increase_two*prop2
next_state[j,i+J*(t+T)] = next_state[j,i+J*(t+T)] + increase_two * prop2
#}
}
}
}
# if (importation_toggle == "on"){
#   #Let's assume all importations from lowest vax class
#    imported_this_date = 3/7
#
#   rand_age = round(runif(1,min=1,max=num_age_groups))
#
#   if (length(imported_this_date) > 0 ){
#   x=2 #import to exposed or to infected?
#     if (next_state[1,rand_age] >= imported_this_date ){ #if someone who is Sunvax
#       next_state[1,rand_age] = next_state[1,rand_age] - imported_this_date
#       next_state[1+x*4,rand_age] = next_state[1+x*4,rand_age] + imported_this_date
#     } else if (next_state[2,rand_age] >= imported_this_date ){ #if someone who is Sv1
#       next_state[2,rand_age] = next_state[2,rand_age] - imported_this_date
#       next_state[2+x*4,rand_age] = next_state[2+x*4,rand_age] + imported_this_date
#     } else if (next_state[3,rand_age] >= imported_this_date ){ #if someone who is Sv2
#       next_state[3,rand_age] = next_state[3,rand_age] - imported_this_date
#       next_state[3+x*4,rand_age] = next_state[3+x*4,rand_age] + imported_this_date
#     }
#   }
#}
#next_state <- round(next_state,digits=0)
sum(next_state); sum(prev_state); sum(pop) # CHECK = confirmed equal
vaccination_history_FINAL_V2=vaccination_history_FINAL_V2[,-c('coverage_this_date')]
vaccination_history_FINAL_V2=vaccination_history_FINAL_V2[,-c(coverage_this_date)]
source("~/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/CommandDeck.R", echo=TRUE)
source("~/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/CommandDeck.R", echo=TRUE)
source("~/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/(function)_severe_outcome_proj.R", echo=TRUE)
