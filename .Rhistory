end = (length(unique(warehouse_plot$outcome))+2)
averted_table[averted_table$macro_age_group == this_age & averted_table$scenario == this_scenario,
c(3:end)] =
warehouse_table[warehouse_table$scenario == baseline_to_compare & warehouse_table$macro_age_group == this_age,
c(3:end)] -
averted_table[averted_table$macro_age_group == this_age & averted_table$scenario == this_scenario,
c(3:end)]
averted_table_rel[averted_table_rel$macro_age_group == this_age & averted_table_rel$scenario == this_scenario,c(3:end)] =
100 * averted_table[averted_table$macro_age_group == this_age & averted_table$scenario == this_scenario,c(3:end)]/
warehouse_table[warehouse_table$scenario == baseline_to_compare & warehouse_table$macro_age_group == this_age,c(3:end)]
}
end = (length(unique(warehouse_plot$outcome))+1)
averted_table_net[averted_table_net$scenario == this_scenario, c(2:end)] =
warehouse_table_net[warehouse_table_net$scenario == baseline_to_compare, c(2:end)] -
averted_table_net[averted_table_net$scenario == this_scenario,c(2:end)]
averted_table_net_rel[averted_table_net_rel$scenario == this_scenario,c(2:end)] =
100 * averted_table_net[averted_table_net$scenario == this_scenario,c(2:end)]/
warehouse_table_net[warehouse_table_net$scenario == baseline_to_compare ,c(2:end)]
}
averted_table_net = averted_table_net %>% mutate(macro_age_group = 'net')
averted_table_net_rel = averted_table_net_rel %>% mutate(macro_age_group = 'net')
averted_table = rbind(averted_table,averted_table_net)
View(averted_table)
averted_table_rel = rbind(averted_table_rel,averted_table_net_rel)
averted_table_net_rel = averted_table_net_rel %>% mutate(macro_age_group = 'net')
averted_table_rel = rbind(averted_table_rel,averted_table_net_rel)
for (section in 1:3){
list_plot_commands = section_list[[section]]
this_averted_table = averted_table[averted_table$scenario %in% list_plot_commands,]
this_relative_table = averted_table_rel[averted_table_rel$scenario %in% list_plot_commands,]
table_list = list(absolute = this_averted_table,
relative = this_relative_table)
scenario_table_list[[section]] = table_list
}
scenario_table_list
averted_table_rel = averted_table_rel %>% arrange(scenario)
averted_table_rel %>% arrange(scenario)
averted_table %>% arrange(scenario)
source("C:/Users/u6044061/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/SpecialityMedic.R", echo=TRUE)
receipt
ticket
vax_strategy_toggle == "on" & vax_risk_strategy_toggle == "off"
vax_strategy_toggle == "on" & vax_risk_strategy_toggle == "on"
vaccination_history_FINAL =
apply_risk_strategy(vax_risk_strategy     = apply_risk_strategy_toggles$vax_risk_strategy,
vax_risk_proportion   = apply_risk_strategy_toggles$vax_risk_proportion,
vax_doses_general     = apply_risk_strategy_toggles$vax_doses_general,
vax_doses_risk        = apply_risk_strategy_toggles$vax_doses_risk  )
vax_risk_strategy     = apply_risk_strategy_toggles$vax_risk_strategy
vax_risk_proportion   = apply_risk_strategy_toggles$vax_risk_proportion
vax_doses_general     = apply_risk_strategy_toggles$vax_doses_general
vax_doses_risk        = apply_risk_strategy_toggles$vax_doses_risk
apply_risk_strategy_toggles
### WARNINGS
if (!vax_risk_strategy %in% c('Y','N')){stop('Is the vax strategy on or off? Y/N')}
if (vax_risk_proportion<0 | vax_risk_proportion>1){stop('vax_risk_proportion must be between 0-1 (0%-100%)')}
if (vax_risk_proportion == 0 & vax_risk_strategy == 'Y'){
warning("Giving 0% priority is not priority! I have overwritten vax_risk_strategy to EQ 'N'")
vax_risk_strategy = "N"
}
### BRANCH ONE: Are we prioritising the at risk group at all?
if (vax_risk_strategy == "N"){
vaccination_history_FINAL =
vax_strategy(vax_strategy_start_date        = vax_strategy_toggles$vax_strategy_start_date,
vax_strategy_num_doses         = vax_strategy_toggles$vax_strategy_num_doses,
vax_strategy_roll_out_speed    = vax_strategy_toggles$vax_strategy_roll_out_speed,
vax_age_strategy               = vax_strategy_toggles$vax_age_strategy,
vax_delivery_group             = 'universal',
vax_dose_strategy              = vax_strategy_toggles$vax_dose_strategy,
vax_strategy_vaccine_type      = vax_strategy_toggles$vax_strategy_vaccine_type,
vax_strategy_vaccine_interval  = vax_strategy_toggles$vax_strategy_vaccine_interval,
vax_strategy_max_expected_cov  = vax_strategy_toggles$vax_strategy_max_expected_cov
)
return(vaccination_history_FINAL)
#this should end the function here
}
### BRANCH TWO: What % priority are the at risk group receiving?
at_risk_delivery_outline = vax_strategy(vax_delivery_group = 'at_risk',
vax_dose_strategy              = vax_doses_risk,
vax_strategy_roll_out_speed    = vax_strategy_toggles$vax_strategy_roll_out_speed * vax_risk_proportion,
vax_strategy_max_expected_cov  = risk_group_acceptability,
vax_strategy_start_date        = vax_strategy_toggles$vax_strategy_start_date,
vax_strategy_num_doses         = vax_strategy_toggles$vax_strategy_num_doses,
vax_age_strategy               = vax_strategy_toggles$vax_age_strategy,
vax_strategy_vaccine_type      = vax_strategy_toggles$vax_strategy_vaccine_type,
vax_strategy_vaccine_interval  = vax_strategy_toggles$vax_strategy_vaccine_interval
)
risk_group_acceptability = vax_strategy_toggles$vax_strategy_max_expected_cov
### BRANCH ONE: Are we prioritising the at risk group at all?
if (vax_risk_strategy == "N"){
vaccination_history_FINAL =
vax_strategy(vax_strategy_start_date        = vax_strategy_toggles$vax_strategy_start_date,
vax_strategy_num_doses         = vax_strategy_toggles$vax_strategy_num_doses,
vax_strategy_roll_out_speed    = vax_strategy_toggles$vax_strategy_roll_out_speed,
vax_age_strategy               = vax_strategy_toggles$vax_age_strategy,
vax_delivery_group             = 'universal',
vax_dose_strategy              = vax_strategy_toggles$vax_dose_strategy,
vax_strategy_vaccine_type      = vax_strategy_toggles$vax_strategy_vaccine_type,
vax_strategy_vaccine_interval  = vax_strategy_toggles$vax_strategy_vaccine_interval,
vax_strategy_max_expected_cov  = vax_strategy_toggles$vax_strategy_max_expected_cov
)
return(vaccination_history_FINAL)
#this should end the function here
}
### BRANCH TWO: What % priority are the at risk group receiving?
at_risk_delivery_outline = vax_strategy(vax_delivery_group = 'at_risk',
vax_dose_strategy              = vax_doses_risk,
vax_strategy_roll_out_speed    = vax_strategy_toggles$vax_strategy_roll_out_speed * vax_risk_proportion,
vax_strategy_max_expected_cov  = risk_group_acceptability,
vax_strategy_start_date        = vax_strategy_toggles$vax_strategy_start_date,
vax_strategy_num_doses         = vax_strategy_toggles$vax_strategy_num_doses,
vax_age_strategy               = vax_strategy_toggles$vax_age_strategy,
vax_strategy_vaccine_type      = vax_strategy_toggles$vax_strategy_vaccine_type,
vax_strategy_vaccine_interval  = vax_strategy_toggles$vax_strategy_vaccine_interval
)
at_risk_delivery_outline = at_risk_delivery_outline %>% mutate(risk_group = risk_group_name)
### BRANCH TWO leftover: What % are the general population receiving whilst the at risk group are prioritised?
#make fit to same amount of days!
if (vax_risk_proportion<1){
generalPublic_restricted_outline = vax_strategy(vax_delivery_group = 'general_public',
vax_dose_strategy              = vax_doses_general,
vax_strategy_roll_out_speed    = vax_strategy_toggles$vax_strategy_roll_out_speed * (1-vax_risk_proportion),
vax_strategy_num_doses         = vax_strategy_toggles$vax_strategy_num_doses- sum(at_risk_delivery_outline$doses_delivered_this_date),
restriction_date = max(at_risk_delivery_outline$date),
vax_strategy_start_date        = vax_strategy_toggles$vax_strategy_start_date,
vax_age_strategy               = vax_strategy_toggles$vax_age_strategy,
vax_strategy_vaccine_type      = vax_strategy_toggles$vax_strategy_vaccine_type,
vax_strategy_vaccine_interval  = vax_strategy_toggles$vax_strategy_vaccine_interval,
vax_strategy_max_expected_cov  = vax_strategy_toggles$vax_strategy_max_expected_cov
)
if (max(generalPublic_restricted_outline$date) != max(at_risk_delivery_outline$date)){stop('error in line 77 of function vax strategies risk')}
generalPublic_restricted_outline = generalPublic_restricted_outline %>% mutate(risk_group = 'general_public')
}
### BRANCH TWO leftover: What % are the general population receiving whilst the at risk group are prioritised?
#make fit to same amount of days!
if (vax_risk_proportion<1){
generalPublic_restricted_outline = vax_strategy(vax_delivery_group = 'general_public',
vax_dose_strategy              = vax_doses_general,
vax_strategy_roll_out_speed    = vax_strategy_toggles$vax_strategy_roll_out_speed * (1-vax_risk_proportion),
vax_strategy_num_doses         = vax_strategy_toggles$vax_strategy_num_doses- sum(at_risk_delivery_outline$doses_delivered_this_date),
restriction_date = max(at_risk_delivery_outline$date),
vax_strategy_start_date        = vax_strategy_toggles$vax_strategy_start_date,
vax_age_strategy               = vax_strategy_toggles$vax_age_strategy,
vax_strategy_vaccine_type      = vax_strategy_toggles$vax_strategy_vaccine_type,
vax_strategy_vaccine_interval  = vax_strategy_toggles$vax_strategy_vaccine_interval,
vax_strategy_max_expected_cov  = vax_strategy_toggles$vax_strategy_max_expected_cov
)
if (max(generalPublic_restricted_outline$date) != max(at_risk_delivery_outline$date)){stop('error in line 77 of function vax strategies risk')}
generalPublic_restricted_outline = generalPublic_restricted_outline %>% mutate(risk_group = 'general_public')
}
vax_strategy_toggles
max(at_risk_delivery_outline$date)
vax_delivery_group = 'general_public'
vax_dose_strategy              = vax_doses_general
vax_strategy_roll_out_speed    = vax_strategy_toggles$vax_strategy_roll_out_speed * (1-vax_risk_proportion)
vax_strategy_num_doses         = vax_strategy_toggles$vax_strategy_num_doses- sum(at_risk_delivery_outline$doses_delivered_this_date)
restriction_date = max(at_risk_delivery_outline$date)
vax_strategy_start_date        = vax_strategy_toggles$vax_strategy_start_date
vax_age_strategy               = vax_strategy_toggles$vax_age_strategy
vax_strategy_vaccine_type      = vax_strategy_toggles$vax_strategy_vaccine_type
vax_strategy_vaccine_interval  = vax_strategy_toggles$vax_strategy_vaccine_interval
vax_strategy_max_expected_cov  = vax_strategy_toggles$vax_strategy_max_expected_cov
### WARNINGS
if (vax_strategy_start_date <= max(vaccination_history_TRUE$date)){
stop ('Your hypothetical vaccine campaign start date needs to be in the future!')
}
if (!(vax_strategy_vaccine_type %in% c("Moderna","Pfizer","AstraZeneca","Johnson & Johnson","Sinopharm","Sinovac"))){
stop('pick a valid vaccine type, or check your spelling!')
}
if (vax_delivery_group != "universal" & num_risk_groups == 1){
warning("You need a risk group to have a risk strategy! We have overwritten vax_delivery_group = 'universal'")
vax_delivery_group = 'universal'
}
### IMPORTS
prioritisation_csv <- read.csv("1_inputs/prioritisation.csv",header=TRUE)
if (vax_delivery_group %in% c('universal','general_public')){ this_risk_group = 'general_public'
} else if (vax_delivery_group == 'at_risk'){ this_risk_group = risk_group_name}
### IS THIS A BOOSTER?
booster_dose = "N"
if (vax_dose_strategy == 3){booster_dose = "Y"}
if (vax_dose_strategy == 2 & vax_strategy_vaccine_type == "Johnson & Johnson"){booster_dose = "Y"}
vax_strategy_vaccine_interval = round(vax_strategy_vaccine_interval)
#####(1/?) Calculate the eligible population ###################################
if (vax_delivery_group == 'universal'){
eligible_pop = data.frame(pop_setting)
colnames(eligible_pop) = c('age_group','eligible_individuals')
} else if (vax_delivery_group == 'at_risk'){
eligible_pop = pop_risk_group_dn[pop_risk_group_dn == risk_group_name,] %>% select(age_group,pop)
colnames(eligible_pop) = c('age_group','eligible_individuals')
} else if (vax_delivery_group == 'general_public'){
eligible_pop = pop_risk_group_dn[pop_risk_group_dn == 'general_public',] %>% select(age_group,pop)
colnames(eligible_pop) = c('age_group','eligible_individuals')
}
#make long by dose
workshop = data.frame()
for (i in 1:num_vax_doses){
this_dose = as.data.frame(eligible_pop) %>% mutate(dose = i)
workshop = rbind(workshop,this_dose)
}
eligible_pop= workshop
#remove already vaccinated individuals
existing_coverage = crossing(dose = c(1:num_vax_doses),
age_group = age_group_labels,
cov_to_date = 0)
for (d in 1:num_vax_doses){
for (i in 1:num_age_groups){
#need to sum across vaccine_coverage (as this is vaccination_history_POP split across age groups)
existing_coverage$cov_to_date[existing_coverage$dose == d &
existing_coverage$age_group == age_group_labels[i]] =
sum(vax_end_hist$coverage_this_date[vax_end_hist$risk_group == this_risk_group &
vax_end_hist$dose == d &
vax_end_hist$age_group == age_group_labels[i]])
}
}
#now remove vaccinated, and vaccine hesistant
unreachable = 1-vax_strategy_max_expected_cov
eligible_pop <- eligible_pop %>% left_join(existing_coverage) %>%
mutate(eligible_individuals = round(eligible_individuals *(1-(cov_to_date+unreachable)))) %>%
select(age_group,dose,eligible_individuals)
eligible_pop$eligible_individuals[eligible_pop$dose == 2] = eligible_pop$eligible_individuals[eligible_pop$dose == 1]
#####(2/?) Place priority # on age group by strategy ############################
if (vax_age_strategy %in% unique(prioritisation_csv$strategy)) {
elected_strategy = prioritisation_csv[prioritisation_csv$strategy == vax_age_strategy,c('age_group','priority')]
eligible_pop <- eligible_pop %>% left_join(elected_strategy)
} else if (vax_age_strategy == "manual_overwrite"){
eligible_pop <- eligible_pop %>%
mutate(priority= case_when(
age_group == '70 to 100' ~ 6,
age_group == '60 to 69' ~ 5,
age_group == '45 to 59' ~ 4,
age_group == '30 to 44' ~ 3,
age_group == '18 to 29' ~ 2,
age_group == '5 to 17' ~ 1,
age_group == '0 to 4' ~ 99
))
}
#####(3/?)  Distribute doses by priority #######################################
doses_to_deliver = vax_strategy_num_doses
priority_num = 1
eligible_pop <- eligible_pop %>% mutate(doses_delivered = 0)
n=length(unique(eligible_pop$priority))
highest_priority = sort(unique(eligible_pop$priority),partial=n-1)[n-1] #highest valid priority
while (doses_to_deliver>0 & priority_num <= (highest_priority)){
priority_group = eligible_pop[eligible_pop$priority == priority_num,]
workshop = doses_to_deliver/vax_dose_strategy - sum(priority_group$eligible_individuals[priority_group$dose == 1]) #check enough for all priority groups
if (workshop < 0){
prop_to_deliver = doses_to_deliver/vax_dose_strategy / sum(priority_group$eligible_individuals[priority_group$dose == 1])
priority_group$doses_delivered[priority_group$dose == vax_dose_strategy] = prop_to_deliver * priority_group$eligible_individuals[priority_group$dose == vax_dose_strategy]
if (vax_dose_strategy == 2){priority_group$doses_delivered[priority_group$dose == 1] = prop_to_deliver * priority_group$eligible_individuals[priority_group$dose == 1] }
doses_to_deliver = 0
} else if (workshop>0){
priority_group$doses_delivered[priority_group$dose == vax_dose_strategy] =  priority_group$eligible_individuals[priority_group$dose == vax_dose_strategy]
doses_to_deliver = doses_to_deliver - sum(priority_group$eligible_individuals[priority_group$dose == vax_dose_strategy])
if (vax_dose_strategy == 2){
workshop2 = doses_to_deliver- sum(priority_group$eligible_individuals[priority_group$dose == 1])
if(workshop2 < 0){
prop_to_deliver = doses_to_deliver / sum(priority_group$eligible_individuals[priority_group$dose == 1])
priority_group$doses_delivered[priority_group$dose == 1] = doses_to_deliver
doses_to_deliver = 0
} else{
priority_group$doses_delivered[priority_group$dose == 1] = priority_group$eligible_individuals[priority_group$dose == 1]
doses_to_deliver = doses_to_deliver - sum(priority_group$eligible_individuals[priority_group$dose == 1])
}
}
}
eligible_pop$doses_delivered[eligible_pop$priority == priority_num] = priority_group$doses_delivered
priority_num = priority_num + 1
}
VA =  eligible_pop %>% mutate(doses_left = doses_delivered)
priority_num = 1
priority_group  = as.character(unique(VA$age_group[VA$priority == priority_num]))
if (vax_dose_strategy == 1){
ceiling = min(sum(eligible_pop$doses_delivered),vax_strategy_num_doses) #max delivery (either limited by eligible individuals, or available doses!)
timeframe = ceiling/vax_strategy_roll_out_speed
daily_per_dose = vax_strategy_roll_out_speed
} else if (vax_dose_strategy == 2){
ceiling =  min(sum(eligible_pop$doses_delivered),vax_strategy_num_doses)
if(ceiling/(vax_strategy_roll_out_speed*2)<vax_strategy_vaccine_interval){
timeframe = ceiling/(vax_strategy_roll_out_speed*2)
daily_per_dose = vax_strategy_roll_out_speed
} else{
timeframe = ceiling/(vax_strategy_roll_out_speed)
daily_per_dose = vax_strategy_roll_out_speed/2
}
}
timeframe = ceiling(timeframe)
if (is.na(restriction_date) == FALSE){
timeframe = as.numeric(restriction_date - vax_strategy_start_date) + 1
}
length_track = timeframe
if (vax_dose_strategy == 2){length_track=length_track+vax_strategy_vaccine_interval}
vax_delivery_outline <- crossing(day = c(1:length_track),
dose = c(1:num_vax_doses),
age_group = age_group_labels,
doses_delivered = c(0))
for (day in 1:timeframe){
#for (day in 1:(timeframe-1)){
#for (day in 1:9){
avaliable = daily_per_dose
#ensuring that we don't overshoot available doses
if (day == timeframe){avaliable = min(vax_strategy_num_doses/vax_dose_strategy-(timeframe-1)*daily_per_dose,daily_per_dose)}
if (avaliable > sum(VA$doses_left)){avaliable = sum(VA$doses_left)}
while(avaliable>0 & priority_num <= highest_priority){
if(sum(VA$doses_left[VA$priority == priority_num])>0){
#i.e., while we still have doses to deliver in this priority group
if(0 %in% VA$doses_left[VA$priority == priority_num & VA$dose == 1]){
age_complete = VA$age_group[VA$doses_left == 0 & VA$priority == priority_num & VA$dose == 1]
VA$priority[VA$age_group %in% age_complete] = VA$priority[VA$age_group %in% age_complete] + 100
priority_group = as.character(unique(VA$age_group[VA$priority == priority_num]))
} #FIX - when one age group in the priority group runs out first
#ISSUE HERE
workshop_doses = min(sum(VA$doses_left[VA$priority == priority_num & VA$dose == 1]),
daily_per_dose)
#either deliver max capacity or number left in this group, whichever is fewer
leftover=0
VA_pt = VA #snapshot
for (i in length(priority_group):1){
workshop_age = priority_group[i]
workshop_prop = sum(VA_pt$doses_left[VA_pt$age_group == workshop_age])/sum(VA_pt$doses_left[VA_pt$priority == priority_num])
workshop_calc = workshop_doses * workshop_prop + leftover
if (workshop_calc > VA$doses_left[VA$age_group == workshop_age & VA$dose == 1]){
leftover = abs(workshop_calc - VA$doses_left[VA$age_group == workshop_age & VA$dose == 1])
workshop_calc = VA$doses_left[VA$age_group == workshop_age & VA$dose == 1]
} else{
leftover = 0
}
vax_delivery_outline$doses_delivered[vax_delivery_outline$day == day &
vax_delivery_outline$dose == 1 &
vax_delivery_outline$age_group == workshop_age] = workshop_calc
VA$doses_left[VA$age_group == workshop_age & VA$dose == 1] = VA$doses_left[VA$age_group == workshop_age & VA$dose == 1] - workshop_calc
if (vax_dose_strategy == 2){
vax_delivery_outline$doses_delivered[vax_delivery_outline$day == day + vax_strategy_vaccine_interval &
vax_delivery_outline$dose == 2 &
vax_delivery_outline$age_group == workshop_age] = workshop_calc
VA$doses_left[VA$age_group == workshop_age & VA$dose == 2] = VA$doses_left[VA$age_group == workshop_age & VA$dose == 2] - workshop_calc
}
}
avaliable = avaliable - workshop_doses
} else if (sum(VA$doses_left[VA$priority == priority_num])==0){
priority_num = priority_num+1
priority_group = as.character(unique(VA$age_group[VA$priority == priority_num]))
} else{
stop('negative doses left, reconsider!')
}
} #<end while loop>
}
### formating vax_delivery_outline to align with vaccination_history_TRUE
vax_delivery_outline$date = vax_strategy_start_date + (vax_delivery_outline$day-1)
vax_delivery_outline$vaccine_type = vax_strategy_vaccine_type
if (vax_strategy_vaccine_type %in% c("Moderna","Pfizer")){
vax_delivery_outline$vaccine_mode = 'mRNA'
} else if (vax_strategy_vaccine_type %in% c("AstraZeneca","Johnson & Johnson","Sinopharm","Sinovac")){
vax_delivery_outline$vaccine_mode = 'viral'
}
vax_delivery_outline$coverage_this_date = NA #shouldn't be used anyway
names(vax_delivery_outline)[names(vax_delivery_outline) == 'doses_delivered'] <-'doses_delivered_this_date'
vax_delivery_outline = vax_delivery_outline %>%
select(date,vaccine_type,vaccine_mode,dose,coverage_this_date,doses_delivered_this_date,age_group)
#CHECK
workshop = aggregate(vax_delivery_outline$doses_delivered_this_date,by=list(vax_delivery_outline$age_group),FUN=sum)
colnames(workshop) = c('age_group','doses')
if (round(sum(workshop$doses)) != round(sum(eligible_pop$doses_delivered))){stop('error line 331 of vax strategies function')}
round(sum(workshop$doses))
round(sum(eligible_pop$doses_delivered))
vax_strategy_num_doses
vax_strategy_roll_out_speed
restriction_date
vax_strategy_start_date
restriction_date - vax_strategy_start_date
as.numeric(restriction_date - vax_strategy_start_date) * vax_strategy_roll_out_speed
as.numeric(restriction_date - vax_strategy_start_date +1) * vax_strategy_roll_out_speed
if (round(sum(workshop$doses)) != round(sum(eligible_pop$doses_delivered))| #if not all doses delivered
round(as.numeric(restriction_date - vax_strategy_start_date +1) * vax_strategy_roll_out_speed) != round(sum(workshop$doses)) #and if not all doses at max speed
){stop('error line 331 of vax strategies function')}
ggplot(vax_delivery_outline) + geom_point(aes(x=date,y=doses_delivered_this_date,color=as.factor(age_group),shape=as.factor(dose)))
if (round(sum(workshop$doses)) != round(sum(eligible_pop$doses_delivered))| #if not all doses delivered
round(as.numeric(restriction_date - vax_strategy_start_date +1) * vax_strategy_roll_out_speed) != round(sum(workshop$doses)) #and if not all doses at max speed
){stop('error line 331 of vax strategies function')}
round(as.numeric(restriction_date - vax_strategy_start_date +1) * vax_strategy_roll_out_speed)
round(sum(workshop$doses))
if (round(sum(workshop$doses)) != round(sum(eligible_pop$doses_delivered))& #if not all doses delivered
round(as.numeric(restriction_date - vax_strategy_start_date +1) * vax_strategy_roll_out_speed) != round(sum(workshop$doses)) #and if not all doses at max speed
){stop('error line 331 of vax strategies function')}
source("C:/Users/u6044061/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/(SM run 1) prioritising primary doses.R", echo=TRUE)
if (round(sum(workshop$doses)) != round(sum(eligible_pop$doses_delivered)) & #if not all doses delivered
round(as.numeric(restriction_date - vax_strategy_start_date +1) * vax_strategy_roll_out_speed) != round(sum(workshop$doses)) #and if not all doses at max speed
){
stop('error line 331 of vax strategies function')}
restriction_date
restriction_date = NA
restriction_date > date_start
is.na(restriction_date) == FALSE
if (round(sum(workshop$doses)) != round(sum(eligible_pop$doses_delivered))) { #if not all doses delivered
if ( is.na(restriction_date) == FALSE &
round(as.numeric(restriction_date - vax_strategy_start_date +1) * vax_strategy_roll_out_speed) != round(sum(workshop$doses))){
} else{
stop('error line 331 of vax strategies function')
}
}
is.na(restriction_date) == FALSE
source("C:/Users/u6044061/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/(SM run 1) prioritising primary doses.R", echo=TRUE)
dicounting_rate
discounting_rate
source("C:/Users/u6044061/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/FleetAdmiral.R", echo=TRUE)
source("C:/Users/u6044061/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/FleetAdmiral.R", echo=TRUE)
source("C:/Users/u6044061/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/(run 2)_varying_coverage.R", echo=TRUE)
source("C:/Users/u6044061/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/(run 2)_varying_coverage.R", echo=TRUE)
### (2) Varying levels of coverage - w and w/out children
receipt = 2
outbreak_post_rollout = "off"
#Note: roll-out must be during outbreak, otherwise waning immunity makes vaccinating kids look like a bad idea
source(paste(getwd(),"/(run 2)_varying_coverage.R",sep=""))
averted_table
scenario_plot_list
section = 1
list_plot_commands = section_list[[section]]
list_plot_commands
workshop = warehouse_plot[warehouse_plot$label %in% list_plot_commands, ]
View(workshop)
plot_list = list()
#let's still plot with net outcomes (not differentiated by children and adults)
workshop = workshop %>%
group_by(date,outcome,label,day,time) %>%
summarise(proj = sum(proj),
proj_cum = sum(proj_cum))
for (section in 1:3){
list_plot_commands = section_list[[section]]
workshop = warehouse_plot[warehouse_plot$label %in% list_plot_commands, ]
#let's still plot with net outcomes (not differentiated by children and adults)
workshop = workshop %>%
group_by(date,outcome,label,day,time) %>%
summarise(proj = sum(proj),
proj_cum = sum(proj_cum))
plot_list = list()
for (i in 1:length(unique(workshop$outcome))){
outcome = unique(workshop$outcome)[i]
plot_list [[i]] <- ggplot(data=workshop[workshop$outcome==outcome,]) +
geom_point(aes(x=time,y=proj,color=as.factor(label))) +
labs(title=paste(outcome)) +
theme_bw() +
xlab("") +
ylab("")}
# 1 = death, 2 = hosp, 3 = severe_disease, 4 = YLL, 5 = cases
plot = ggarrange(plot_list[[5]], plot_list[[1]],
common.legend = TRUE,
legend="bottom")
annotate_figure(plot, top = text_grob('absolute outcome by scenario', face = 'bold', size = 16))
scenario_plot_list[[section]] = plot
}
scenario_plot_list
source("C:/Users/u6044061/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/FleetAdmiral.R", echo=TRUE)
source("C:/Users/u6044061/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/SpecialityMedic.R", echo=TRUE)
results_warehouse_SM[[1]][[3]]
render('SpecialityMedic_compiler.Rmd',output_file = file_name)
results_warehouse_SM_comorb = results_warehouse_SM
source("C:/Users/u6044061/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/SpecialityMedic.R", echo=TRUE)
warehouse_plot=results_warehouse[[1]][[2]]
#(A/B) absolute outcome plot
warehouse_plot = warehouse_plot %>% mutate(time = day)
plot_list = list()
for (i in 1:length(unique(warehouse_plot$outcome))){
outcome = unique(warehouse_plot$outcome)[i]
plot_list [[i]] <- ggplot(data=warehouse_plot[warehouse_plot$outcome==outcome,]) +
geom_point(aes(x=time,y=proj,color=as.factor(label))) +
labs(title=paste(outcome)) +
theme_bw() +
xlab("") +
ylab("")}
# 1 = death, 2 = hosp, 3 = severe_disease, 4 = YLL, 5 = cases
plot = ggarrange(plot_list[[5]], plot_list[[1]],
common.legend = TRUE,
legend="bottom")
annotate_figure(plot, top = text_grob('absolute outcome by scenario', face = 'bold', size = 16))
# 1 = death, 2 = hosp, 3 = severe_disease, 4 = YLL, 5 = cases
plot = ggarrange(plot_list[[4]], plot_list[[1]],
common.legend = TRUE,
legend="bottom")
annotate_figure(plot, top = text_grob('absolute outcome by scenario', face = 'bold', size = 16))
# 1 = death, 2 = hosp, 3 = severe_disease, 4 = YLL, 5 = cases
plot = ggarrange(plot_list[[3]], plot_list[[1]],
common.legend = TRUE,
legend="bottom")
annotate_figure(plot, top = text_grob('absolute outcome by scenario', face = 'bold', size = 16))
# 1 = death, 2 = hosp, 3 = severe_disease, 4 = YLL, 5 = cases
plot = ggarrange(plot_list[[3]], plot_list[[1]],
common.legend = TRUE,
legend="bottom")
annotate_figure(plot, top = text_grob('absolute outcome by scenario', face = 'bold', size = 16))
# 1 = death, 2 = hosp, 3 = severe_disease, 4 = YLL, 5 = cases
plot = ggarrange(plot_list[[5]], plot_list[[3]],
common.legend = TRUE,
legend="bottom")
annotate_figure(plot, top = text_grob('absolute outcome by scenario', face = 'bold', size = 16))
# 1 = death, 2 = hosp, 3 = severe_disease, 4 = YLL, 5 = cases
plot = ggarrange(plot_list[[5]], plot_list[[3]],
common.legend = TRUE,
legend="bottom")
annotate_figure(plot, top = text_grob('absolute outcome by scenario', face = 'bold', size = 16))
results_warehouse[[2]][[1]]
workshop = results_warehouse[[2]][[1]]
workshop_2 = workshop %>% ungroup %>%
group_by(scenario) %>%
summarise(death = sum(death),
hosp = sum(hosp),
severe_disease = sum(severe_disease),
YLL = sum(YLL),
cases = sum(cases)) %>%
mutate(macro_age_group = 'net')
workshop = rbind(workshop,workshop_2)
workshop
View(workshop)
workshop_2
