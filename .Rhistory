priority_age = as.character(unique(VA$age_group[VA$priority == priority_num]))
daily_avaliable_doses = data.frame(day=1:vax_strategy_delivery_timeframe,
avaliable = vax_strategy_roll_out_speed)
daily_avaliable_doses = data.frame(day=1:vax_strategy_delivery_timeframe,
avaliable = vax_strategy_roll_out_speed)
#for (day in 1:vax_strategy_delivery_timeframe){
for (day in 1:21){
avaliable = daily_avaliable_doses$avaliable[daily_avaliable_doses$day == day]
while(avaliable>0){
if(VA$doses_left[VA$priority == priority_num & VA$dose == 1]>0){
#if(sum(VA$doses_left[VA$priority == priority_num])>0){
#i.e., while we still have doses to deliver in this priority group
diff_doses = (VA$doses_left[VA$priority == priority_num & VA$dose == 2]-VA$doses_left[VA$priority == priority_num & VA$dose == 1])
#COMEBACK - covering 1st without 2nd first!, should we cover all open age groups, not just priority?
if(vax_dose_strategy >1 & diff_doses >0){
vax_delivery_outline = rbind(vax_delivery_outline,
cbind(day = day,
dose = 2,
age_group = priority_age,
doses_delivered = min(diff_doses,avaliable)))
VA$doses_left[VA$priority == priority_num & VA$dose == 2] =
VA$doses_left[VA$priority == priority_num & VA$dose == 2] -  min(diff_doses,avaliable)
avaliable = avaliable -  min(diff_doses,avaliable)
}
if(VA$doses_left[VA$priority == priority_num & VA$dose == 1] >= avaliable/vax_dose_strategy){
#if number to deliver as complete 'dose' strategy > available doses
#NB: check for dose 1 even when two dose strategy as dose 2 > dose 1 and result in -ve dose one!
vax_delivery_outline = rbind(vax_delivery_outline,
cbind(day = day,
dose = 1,
age_group = priority_age,
doses_delivered = avaliable/vax_dose_strategy))
VA$doses_left[VA$priority == priority_num & VA$dose == 1] =
VA$doses_left[VA$priority == priority_num & VA$dose == 1] - avaliable/vax_dose_strategy
if (vax_dose_strategy == 2){
vax_delivery_outline = rbind(vax_delivery_outline,
cbind(day = day + vax_strategy_vaccine_interval,
dose = 2,
age_group = priority_age,
doses_delivered = avaliable/vax_dose_strategy))
VA$doses_left[VA$priority == priority_num & VA$dose == 2] =
VA$doses_left[VA$priority == priority_num & VA$dose == 2] - avaliable/vax_dose_strategy
daily_avaliable_doses$avaliable[daily_avaliable_doses$day == day+vax_strategy_vaccine_interval] =
daily_avaliable_doses$avaliable[daily_avaliable_doses$day == day+vax_strategy_vaccine_interval] - avaliable/vax_dose_strategy
}
avaliable = 0
}
if(VA$doses_left[VA$priority == priority_num & VA$dose == 1] < avaliable/vax_dose_strategy){
#if number to deliver in 'complete' schedule < available doses
vax_delivery_outline = rbind(vax_delivery_outline,
cbind(day = day ,
dose = 1,
age_group = priority_age,
doses_delivered = VA$doses_left[VA$priority == priority_num & VA$dose == 1]))
VA$doses_left[VA$priority == priority_num & VA$dose == 1] = 0
avaliable = avaliable -  VA$doses_left[VA$priority == priority_num & VA$dose == 1]
if (vax_dose_strategy == 2){
vax_delivery_outline = rbind(vax_delivery_outline,
cbind(day = day + vax_strategy_vaccine_interval,
dose = 2,
age_group = priority_age,
doses_delivered = VA$doses_left[VA$priority == priority_num & VA$dose == 1]))
#same doses delivered to second dose as to first!
VA$doses_left[VA$priority == priority_num & VA$dose == 2] = 0
daily_avaliable_doses$avaliable[daily_avaliable_doses$day == day+vax_strategy_vaccine_interval] =
daily_avaliable_doses$avaliable[daily_avaliable_doses$day == day+vax_strategy_vaccine_interval] - VA$doses_left[VA$priority == priority_num & VA$dose == 1]
}
}
#} else if(sum(VA$doses_left[VA$priority == priority_num])==0){
} else if (VA$doses_left[VA$priority == priority_num & VA$dose == 1] ==0){
priority_num = priority_num+1
priority_age = as.character(unique(VA$age_group[VA$priority == priority_num]))
}
}
}
vax_delivery_outline$day = as.numeric(vax_delivery_outline$day)
VA =  eligible_pop %>%
select(age_group,dose,doses_delivered,priority) %>%
mutate(doses_left = doses_delivered)
vax_strategy_delivery_timeframe = vax_strategy_num_doses/vax_strategy_roll_out_speed #(days)
vax_delivery_outline = data.frame(as.numeric(),as.numeric(),as.character(),as.numeric())
colnames(vax_delivery_outline) = c('day','dose','age_group','doses_delivered')
priority_num = 1
priority_age = as.character(unique(VA$age_group[VA$priority == priority_num]))
daily_avaliable_doses = data.frame(day=1:vax_strategy_delivery_timeframe,
avaliable = vax_strategy_roll_out_speed)
#COMEBACK = need to correct last day so don't overshoot avaliable doses
#for (day in 1:vax_strategy_delivery_timeframe){
for (day in 1:21){
avaliable = daily_avaliable_doses$avaliable[daily_avaliable_doses$day == day]
max_avaliable = avaliable
while(avaliable>0){
if(VA$doses_left[VA$priority == priority_num & VA$dose == 1]>0){
#if(sum(VA$doses_left[VA$priority == priority_num])>0){
#i.e., while we still have doses to deliver in this priority group
diff_doses = (VA$doses_left[VA$priority == priority_num & VA$dose == 2]-VA$doses_left[VA$priority == priority_num & VA$dose == 1])
#COMEBACK - covering 1st without 2nd first!, should we cover all open age groups, not just priority?
if(vax_dose_strategy >1 & diff_doses >0){
vax_delivery_outline = rbind(vax_delivery_outline,
cbind(day = day,
dose = 2,
age_group = priority_age,
doses_delivered = min(diff_doses,avaliable)))
VA$doses_left[VA$priority == priority_num & VA$dose == 2] =
VA$doses_left[VA$priority == priority_num & VA$dose == 2] -  min(diff_doses,avaliable)
avaliable = avaliable -  min(diff_doses,avaliable)
}
if(VA$doses_left[VA$priority == priority_num & VA$dose == 1] >= max_avaliable/vax_dose_strategy &
avaliable >= max_avaliable/vax_dose_strategy){
#if number to deliver as complete 'dose' strategy > available doses
#NB: check for dose 1 even when two dose strategy as dose 2 > dose 1 and result in -ve dose one!
vax_delivery_outline = rbind(vax_delivery_outline,
cbind(day = day,
dose = 1,
age_group = priority_age,
doses_delivered = max_avaliable/vax_dose_strategy))
VA$doses_left[VA$priority == priority_num & VA$dose == 1] =
VA$doses_left[VA$priority == priority_num & VA$dose == 1] - max_avaliable/vax_dose_strategy
if (vax_dose_strategy == 2){
vax_delivery_outline = rbind(vax_delivery_outline,
cbind(day = day + vax_strategy_vaccine_interval,
dose = 2,
age_group = priority_age,
doses_delivered = max_avaliable/vax_dose_strategy))
VA$doses_left[VA$priority == priority_num & VA$dose == 2] =
VA$doses_left[VA$priority == priority_num & VA$dose == 2] - max_avaliable/vax_dose_strategy
daily_avaliable_doses$avaliable[daily_avaliable_doses$day == day+vax_strategy_vaccine_interval] =
daily_avaliable_doses$avaliable[daily_avaliable_doses$day == day+vax_strategy_vaccine_interval] - avaliable/vax_dose_strategy
}
avaliable = 0
}
if(VA$doses_left[VA$priority == priority_num & VA$dose == 1] < avaliable/vax_dose_strategy |
avaliable < max_avaliable/vax_dose_strategy){
#if number to deliver in 'complete' schedule < available doses
dose_to_deliver = min(avaliable/vax_dose_strategy,VA$doses_left[VA$priority == priority_num & VA$dose == 1])
#is this correct??
vax_delivery_outline = rbind(vax_delivery_outline,
cbind(day = day ,
dose = 1,
age_group = priority_age,
doses_delivered = VA$doses_left[VA$priority == priority_num & VA$dose == 1]))
VA$doses_left[VA$priority == priority_num & VA$dose == 1] = 0
avaliable = avaliable -  VA$doses_left[VA$priority == priority_num & VA$dose == 1]
if (vax_dose_strategy == 2){
vax_delivery_outline = rbind(vax_delivery_outline,
cbind(day = day + vax_strategy_vaccine_interval,
dose = 2,
age_group = priority_age,
doses_delivered = VA$doses_left[VA$priority == priority_num & VA$dose == 1]))
#same doses delivered to second dose as to first!
VA$doses_left[VA$priority == priority_num & VA$dose == 2] = 0
daily_avaliable_doses$avaliable[daily_avaliable_doses$day == day+vax_strategy_vaccine_interval] =
daily_avaliable_doses$avaliable[daily_avaliable_doses$day == day+vax_strategy_vaccine_interval] - VA$doses_left[VA$priority == priority_num & VA$dose == 1]
}
}
#} else if(sum(VA$doses_left[VA$priority == priority_num])==0){
} else if (VA$doses_left[VA$priority == priority_num & VA$dose == 1] ==0){
priority_num = priority_num+1
priority_age = as.character(unique(VA$age_group[VA$priority == priority_num]))
}
}
}
day
if(VA$doses_left[VA$priority == priority_num & VA$dose == 1]>0){
#if(sum(VA$doses_left[VA$priority == priority_num])>0){
#i.e., while we still have doses to deliver in this priority group
diff_doses = (VA$doses_left[VA$priority == priority_num & VA$dose == 2]-VA$doses_left[VA$priority == priority_num & VA$dose == 1])
#COMEBACK - covering 1st without 2nd first!, should we cover all open age groups, not just priority?
if(vax_dose_strategy >1 & diff_doses >0){
vax_delivery_outline = rbind(vax_delivery_outline,
cbind(day = day,
dose = 2,
age_group = priority_age,
doses_delivered = min(diff_doses,avaliable)))
VA$doses_left[VA$priority == priority_num & VA$dose == 2] =
VA$doses_left[VA$priority == priority_num & VA$dose == 2] -  min(diff_doses,avaliable)
avaliable = avaliable -  min(diff_doses,avaliable)
}
if(VA$doses_left[VA$priority == priority_num & VA$dose == 1] >= max_avaliable/vax_dose_strategy &
avaliable >= max_avaliable/vax_dose_strategy){
#if number to deliver as complete 'dose' strategy > available doses
#NB: check for dose 1 even when two dose strategy as dose 2 > dose 1 and result in -ve dose one!
vax_delivery_outline = rbind(vax_delivery_outline,
cbind(day = day,
dose = 1,
age_group = priority_age,
doses_delivered = max_avaliable/vax_dose_strategy))
VA$doses_left[VA$priority == priority_num & VA$dose == 1] =
VA$doses_left[VA$priority == priority_num & VA$dose == 1] - max_avaliable/vax_dose_strategy
if (vax_dose_strategy == 2){
vax_delivery_outline = rbind(vax_delivery_outline,
cbind(day = day + vax_strategy_vaccine_interval,
dose = 2,
age_group = priority_age,
doses_delivered = max_avaliable/vax_dose_strategy))
VA$doses_left[VA$priority == priority_num & VA$dose == 2] =
VA$doses_left[VA$priority == priority_num & VA$dose == 2] - max_avaliable/vax_dose_strategy
daily_avaliable_doses$avaliable[daily_avaliable_doses$day == day+vax_strategy_vaccine_interval] =
daily_avaliable_doses$avaliable[daily_avaliable_doses$day == day+vax_strategy_vaccine_interval] - avaliable/vax_dose_strategy
}
avaliable = 0
}
if(VA$doses_left[VA$priority == priority_num & VA$dose == 1] < avaliable/vax_dose_strategy |
avaliable < max_avaliable/vax_dose_strategy){
#if number to deliver in 'complete' schedule < available doses
dose_to_deliver = min(avaliable/vax_dose_strategy,VA$doses_left[VA$priority == priority_num & VA$dose == 1])
#is this correct??
vax_delivery_outline = rbind(vax_delivery_outline,
cbind(day = day ,
dose = 1,
age_group = priority_age,
doses_delivered = VA$doses_left[VA$priority == priority_num & VA$dose == 1]))
VA$doses_left[VA$priority == priority_num & VA$dose == 1] = 0
avaliable = avaliable -  VA$doses_left[VA$priority == priority_num & VA$dose == 1]
if (vax_dose_strategy == 2){
vax_delivery_outline = rbind(vax_delivery_outline,
cbind(day = day + vax_strategy_vaccine_interval,
dose = 2,
age_group = priority_age,
doses_delivered = VA$doses_left[VA$priority == priority_num & VA$dose == 1]))
#same doses delivered to second dose as to first!
VA$doses_left[VA$priority == priority_num & VA$dose == 2] = 0
daily_avaliable_doses$avaliable[daily_avaliable_doses$day == day+vax_strategy_vaccine_interval] =
daily_avaliable_doses$avaliable[daily_avaliable_doses$day == day+vax_strategy_vaccine_interval] - VA$doses_left[VA$priority == priority_num & VA$dose == 1]
}
}
#} else if(sum(VA$doses_left[VA$priority == priority_num])==0){
} else if (VA$doses_left[VA$priority == priority_num & VA$dose == 1] ==0){
priority_num = priority_num+1
priority_age = as.character(unique(VA$age_group[VA$priority == priority_num]))
}
diff_doses = (VA$doses_left[VA$priority == priority_num & VA$dose == 2]-VA$doses_left[VA$priority == priority_num & VA$dose == 1])
#COMEBACK - covering 1st without 2nd first!, should we cover all open age groups, not just priority?
if(vax_dose_strategy >1 & diff_doses >0){
vax_delivery_outline = rbind(vax_delivery_outline,
cbind(day = day,
dose = 2,
age_group = priority_age,
doses_delivered = min(diff_doses,avaliable)))
VA$doses_left[VA$priority == priority_num & VA$dose == 2] =
VA$doses_left[VA$priority == priority_num & VA$dose == 2] -  min(diff_doses,avaliable)
avaliable = avaliable -  min(diff_doses,avaliable)
}
vax_dose_strategy >1 & diff_doses >0
diff_doses
VA =  eligible_pop %>%
select(age_group,dose,doses_delivered,priority) %>%
mutate(doses_left = doses_delivered)
vax_strategy_delivery_timeframe = vax_strategy_num_doses/vax_strategy_roll_out_speed #(days)
vax_delivery_outline = data.frame(as.numeric(),as.numeric(),as.character(),as.numeric())
colnames(vax_delivery_outline) = c('day','dose','age_group','doses_delivered')
priority_num = 1
priority_age = as.character(unique(VA$age_group[VA$priority == priority_num]))
daily_avaliable_doses = data.frame(day=1:vax_strategy_delivery_timeframe,
avaliable = vax_strategy_roll_out_speed)
#for (day in 1:vax_strategy_delivery_timeframe){
for (day in 1:6){
avaliable = daily_avaliable_doses$avaliable[daily_avaliable_doses$day == day]
max_avaliable = avaliable
while(avaliable>0){
if(VA$doses_left[VA$priority == priority_num & VA$dose == 1]>0){
#if(sum(VA$doses_left[VA$priority == priority_num])>0){
#i.e., while we still have doses to deliver in this priority group
diff_doses = (VA$doses_left[VA$priority == priority_num & VA$dose == 2]-VA$doses_left[VA$priority == priority_num & VA$dose == 1])
#COMEBACK - covering 1st without 2nd first!, should we cover all open age groups, not just priority?
if(vax_dose_strategy >1 & diff_doses >0){
vax_delivery_outline = rbind(vax_delivery_outline,
cbind(day = day,
dose = 2,
age_group = priority_age,
doses_delivered = min(diff_doses,avaliable)))
VA$doses_left[VA$priority == priority_num & VA$dose == 2] =
VA$doses_left[VA$priority == priority_num & VA$dose == 2] -  min(diff_doses,avaliable)
avaliable = avaliable -  min(diff_doses,avaliable)
}
if(VA$doses_left[VA$priority == priority_num & VA$dose == 1] >= max_avaliable/vax_dose_strategy &
avaliable >= max_avaliable/vax_dose_strategy){
#if number to deliver as complete 'dose' strategy > available doses
#NB: check for dose 1 even when two dose strategy as dose 2 > dose 1 and result in -ve dose one!
vax_delivery_outline = rbind(vax_delivery_outline,
cbind(day = day,
dose = 1,
age_group = priority_age,
doses_delivered = max_avaliable/vax_dose_strategy))
VA$doses_left[VA$priority == priority_num & VA$dose == 1] =
VA$doses_left[VA$priority == priority_num & VA$dose == 1] - max_avaliable/vax_dose_strategy
if (vax_dose_strategy == 2){
vax_delivery_outline = rbind(vax_delivery_outline,
cbind(day = day + vax_strategy_vaccine_interval,
dose = 2,
age_group = priority_age,
doses_delivered = max_avaliable/vax_dose_strategy))
VA$doses_left[VA$priority == priority_num & VA$dose == 2] =
VA$doses_left[VA$priority == priority_num & VA$dose == 2] - max_avaliable/vax_dose_strategy
daily_avaliable_doses$avaliable[daily_avaliable_doses$day == day+vax_strategy_vaccine_interval] =
daily_avaliable_doses$avaliable[daily_avaliable_doses$day == day+vax_strategy_vaccine_interval] - avaliable/vax_dose_strategy
}
avaliable = 0
}
if(VA$doses_left[VA$priority == priority_num & VA$dose == 1] < avaliable/vax_dose_strategy |
avaliable < max_avaliable/vax_dose_strategy){
#if number to deliver in 'complete' schedule < available doses
dose_to_deliver = min(avaliable/vax_dose_strategy,VA$doses_left[VA$priority == priority_num & VA$dose == 1])
#is this correct??
vax_delivery_outline = rbind(vax_delivery_outline,
cbind(day = day ,
dose = 1,
age_group = priority_age,
doses_delivered = VA$doses_left[VA$priority == priority_num & VA$dose == 1]))
VA$doses_left[VA$priority == priority_num & VA$dose == 1] = 0
avaliable = avaliable -  VA$doses_left[VA$priority == priority_num & VA$dose == 1]
if (vax_dose_strategy == 2){
vax_delivery_outline = rbind(vax_delivery_outline,
cbind(day = day + vax_strategy_vaccine_interval,
dose = 2,
age_group = priority_age,
doses_delivered = VA$doses_left[VA$priority == priority_num & VA$dose == 1]))
#same doses delivered to second dose as to first!
VA$doses_left[VA$priority == priority_num & VA$dose == 2] = 0
daily_avaliable_doses$avaliable[daily_avaliable_doses$day == day+vax_strategy_vaccine_interval] =
daily_avaliable_doses$avaliable[daily_avaliable_doses$day == day+vax_strategy_vaccine_interval] - VA$doses_left[VA$priority == priority_num & VA$dose == 1]
}
}
#} else if(sum(VA$doses_left[VA$priority == priority_num])==0){
} else if (VA$doses_left[VA$priority == priority_num & VA$dose == 1] ==0){
priority_num = priority_num+1
priority_age = as.character(unique(VA$age_group[VA$priority == priority_num]))
}
}
}
day = 6
diff_doses = (VA$doses_left[VA$priority == priority_num & VA$dose == 2]-VA$doses_left[VA$priority == priority_num & VA$dose == 1])
VA =  eligible_pop %>%
select(age_group,dose,doses_delivered,priority) %>%
mutate(doses_left = doses_delivered)
vax_strategy_delivery_timeframe = vax_strategy_num_doses/vax_strategy_roll_out_speed #(days)
vax_delivery_outline = data.frame(as.numeric(),as.numeric(),as.character(),as.numeric())
colnames(vax_delivery_outline) = c('day','dose','age_group','doses_delivered')
priority_num = 1
priority_age = as.character(unique(VA$age_group[VA$priority == priority_num]))
daily_avaliable_doses = data.frame(day=1:vax_strategy_delivery_timeframe,
avaliable = vax_strategy_roll_out_speed)
day = 1
avaliable = daily_avaliable_doses$avaliable[daily_avaliable_doses$day == day]
max_avaliable = avaliable
(VA$doses_left[VA$priority == priority_num & VA$dose == 1]>0)
diff_doses = (VA$doses_left[VA$priority == priority_num & VA$dose == 2]-VA$doses_left[VA$priority == priority_num & VA$dose == 1])
#COMEBACK - covering 1st without 2nd first!, should we cover all open age groups, not just priority?
if(vax_dose_strategy >1 & diff_doses >0){
vax_delivery_outline = rbind(vax_delivery_outline,
cbind(day = day,
dose = 2,
age_group = priority_age,
doses_delivered = min(diff_doses,avaliable)))
VA$doses_left[VA$priority == priority_num & VA$dose == 2] =
VA$doses_left[VA$priority == priority_num & VA$dose == 2] -  min(diff_doses,avaliable)
avaliable = avaliable -  min(diff_doses,avaliable)
}
avaliable
(VA$doses_left[VA$priority == priority_num & VA$dose == 1] >= max_avaliable/vax_dose_strategy &
avaliable >= max_avaliable/vax_dose_strategy
)
cbind(day = day,
dose = 1,
age_group = priority_age,
doses_delivered = max_avaliable/vax_dose_strategy)
vax_delivery_outline = rbind(vax_delivery_outline,
cbind(day = day,
dose = 1,
age_group = priority_age,
doses_delivered = max_avaliable/vax_dose_strategy))
VA$doses_left[VA$priority == priority_num & VA$dose == 1] =
VA$doses_left[VA$priority == priority_num & VA$dose == 1] - max_avaliable/vax_dose_strategy
if (vax_dose_strategy == 2){
vax_delivery_outline = rbind(vax_delivery_outline,
cbind(day = day + vax_strategy_vaccine_interval,
dose = 2,
age_group = priority_age,
doses_delivered = max_avaliable/vax_dose_strategy))
VA$doses_left[VA$priority == priority_num & VA$dose == 2] =
VA$doses_left[VA$priority == priority_num & VA$dose == 2] - max_avaliable/vax_dose_strategy
daily_avaliable_doses$avaliable[daily_avaliable_doses$day == day+vax_strategy_vaccine_interval] =
daily_avaliable_doses$avaliable[daily_avaliable_doses$day == day+vax_strategy_vaccine_interval] - avaliable/vax_dose_strategy
}
avaliable = 0
VA$doses_left[VA$priority == priority_num & VA$dose == 1] < avaliable/vax_dose_strategy |
avaliable < max_avaliable/vax_dose_strategy
age_groups = c(0,4,9,14,19,24,29,34,39,44,49,54,59,64,69,74,79,84,89,94,99,110)
pop_orig <- read.csv("C:/Users/gizem/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/inputs/pop_estimates.csv", header=TRUE)
pop_setting_orig <- pop_orig[pop_orig$country == setting,]
pop_setting <- pop_setting_orig %>%
mutate(agegroup = cut(age,breaks = age_groups, include.lowest = T,labels = age_group_labels))
pop_setting <- aggregate(pop_setting$population, by=list(category=pop_setting$agegroup), FUN=sum)
colnames(pop_setting) <-c('agegroup','pop')
#       (1/4) Setup
####################################################################
#load libraries
library(tidyverse)
library(readr)
library(deSolve)
library(rvest)
library(ggplot2)
library(gridExtra)
age_groups = c(0,4,9,14,19,24,29,34,39,44,49,54,59,64,69,74,79,84,89,94,99,110)
pop_orig <- read.csv("C:/Users/gizem/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/inputs/pop_estimates.csv", header=TRUE)
pop_setting_orig <- pop_orig[pop_orig$country == setting,]
pop_setting <- pop_setting_orig %>%
mutate(agegroup = cut(age,breaks = age_groups, include.lowest = T,labels = age_group_labels))
pop_setting <- aggregate(pop_setting$population, by=list(category=pop_setting$agegroup), FUN=sum)
colnames(pop_setting) <-c('agegroup','pop')
pop <- pop_setting$pop
pop
age_groups = c(0,4,9,14,19,24,29,34,39,44,49,54,59,64,69,74,79,84,89,94,99,110)
pop_orig <- read.csv("C:/Users/gizem/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/inputs/pop_estimates.csv", header=TRUE)
pop_setting_orig <- pop_orig[pop_orig$country == setting,]
pop_setting <- pop_setting_orig %>%
mutate(agegroup = cut(age,breaks = age_groups, include.lowest = T,labels = age_group_labels))
age_groups = c(0,4,9,14,19,24,29,34,39,44,49,54,59,64,69,74,79,84,89,94,99,110)
age_group_labels = c('0-4','5 to 9','10 to 14','15 to 19','20 to 24','24 to 29','30 to 34','35 to 39','40 to 44','45 to 49',
'50 to 54','55 to 59','60 to 64','65 to 69','70 to 74','75 to 79','80 to 84','85 to 89','90 to 94','95 to 100')
pop_orig <- read.csv("C:/Users/gizem/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/inputs/pop_estimates.csv", header=TRUE)
pop_setting_orig <- pop_orig[pop_orig$country == setting,]
pop_setting <- pop_setting_orig %>%
mutate(agegroup = cut(age,breaks = age_groups, include.lowest = T,labels = age_group_labels))
age_groups = c(0,4,9,14,19,24,29,34,39,44,49,54,59,64,69,74,79,84,89,94,110)
age_group_labels = c('0-4','5 to 9','10 to 14','15 to 19','20 to 24','24 to 29','30 to 34','35 to 39','40 to 44','45 to 49',
'50 to 54','55 to 59','60 to 64','65 to 69','70 to 74','75 to 79','80 to 84','85 to 89','90 to 94','95 to 100')
pop_orig <- read.csv("C:/Users/gizem/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/inputs/pop_estimates.csv", header=TRUE)
pop_setting_orig <- pop_orig[pop_orig$country == setting,]
pop_setting <- pop_setting_orig %>%
mutate(agegroup = cut(age,breaks = age_groups, include.lowest = T,labels = age_group_labels))
pop_setting <- aggregate(pop_setting$population, by=list(category=pop_setting$agegroup), FUN=sum)
colnames(pop_setting) <-c('agegroup','pop')
pop <- pop_setting$pop
pop
write.csv(pop_setting,file = 'x_results/pop_scrap.csv')
setting
setting="SLE"
pop_orig <- read.csv("C:/Users/gizem/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/inputs/pop_estimates.csv", header=TRUE)
pop_setting_orig <- pop_orig[pop_orig$country == setting,]
pop_setting <- pop_setting_orig %>%
mutate(agegroup = cut(age,breaks = age_groups, include.lowest = T,labels = age_group_labels))
pop_setting <- aggregate(pop_setting$population, by=list(category=pop_setting$agegroup), FUN=sum)
colnames(pop_setting) <-c('agegroup','pop')
pop <- pop_setting$pop
write.csv(pop_setting,file = 'x_results/pop_scrap.csv')
### (1/5) Age structure of population
#NOTE: this program has been configured so that the age_groups can be modified on a whim,
# however, some other programs aren't as flexible
age_groups = c(0,4,19,29,39,49,59,110)
age_group_labels = c('0-4','5-19','20-29','30-39','40-49','50-59','60-100')
pop_orig <- read.csv("C:/Users/gizem/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/inputs/pop_estimates.csv", header=TRUE)
pop_setting_orig <- pop_orig[pop_orig$country == setting,]
pop_setting <- pop_setting_orig %>%
mutate(agegroup = cut(age,breaks = age_groups, include.lowest = T,labels = age_group_labels))
pop_setting <- aggregate(pop_setting$population, by=list(category=pop_setting$agegroup), FUN=sum)
colnames(pop_setting) <-c('agegroup','pop')
pop <- pop_setting$pop
rm (pop_orig) #keep pop_setting_orig for contact matrix weighting
### (2/5) Contact patterns of population
#CONFIRMATION FROM MARK JIT: .Rdata files are more up to date on GitHub (Prem et al. 2021 paper)
#(A/C) load contact matrix
load(file = "~/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/inputs/contact_all.Rdata")
pop
age_groups = c(0,4,9,14,19,24,29,34,39,44,49,54,59,64,69,74,79,84,89,94,110)
age_group_labels = c('0-4','5 to 9','10 to 14','15 to 19','20 to 24','24 to 29','30 to 34','35 to 39','40 to 44','45 to 49',
'50 to 54','55 to 59','60 to 64','65 to 69','70 to 74','75 to 79','80 to 84','85 to 89','90 to 94','95 to 100')
pop_interim <- read.csv("C:/Users/gizem/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/inputs/pop_estimates.csv", header=TRUE)
pop_interim <- pop_interim[pop_orig$country == setting,]
pop_interim <- pop_interim %>%
mutate(agegroup = cut(age,breaks = age_groups, include.lowest = T,labels = age_group_labels))
pop_interim <- aggregate(pop_interim$population, by=list(category=pop_interim$agegroup), FUN=sum)
colnames(pop_interim) <-c('agegroup','pop')
pop_interim <- pop_interim$pop
age_groups = c(0,4,9,14,19,24,29,34,39,44,49,54,59,64,69,74,79,84,89,94,110)
age_group_labels = c('0-4','5 to 9','10 to 14','15 to 19','20 to 24','24 to 29','30 to 34','35 to 39','40 to 44','45 to 49',
'50 to 54','55 to 59','60 to 64','65 to 69','70 to 74','75 to 79','80 to 84','85 to 89','90 to 94','95 to 100')
pop_interim <- read.csv("C:/Users/gizem/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/inputs/pop_estimates.csv", header=TRUE)
pop_interim <- pop_interim[pop_interim$country == setting,]
pop_interim <- pop_interim %>%
mutate(agegroup = cut(age,breaks = age_groups, include.lowest = T,labels = age_group_labels))
pop_interim <- aggregate(pop_interim$population, by=list(category=pop_interim$agegroup), FUN=sum)
colnames(pop_interim) <-c('agegroup','pop')
pop_interim <- pop_interim$pop
pop_interim
source("~/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/workshop - severe outcome age distribution.R", echo=TRUE)
pop_interim
pop_interim <- pop_interim %>% mutate(pop_percentage = pop/sum(pop_interim$pop))
pop_interim
### Shape of risk
risk_df <- data.frame(x=seq(from =0,to=100,by=20),
y=c(0.001,0.01,0.1,1,10,50))
risk_df
lm(formula = risk_df$y ~ log(risk_df$x))
lm(risk_df$y ~ log(risk_df$x))
### Shape of risk
risk_df <- data.frame(x=seq(from =20,to=100,by=20),
y=c(0.01,0.1,1,10,50))
lm(risk_df$y ~ log(risk_df$x))
### Shape of risk
risk_df <- data.frame(x=seq(from =20,to=80,by=20),
y=c(0.01,0.1,1,10))
lm(risk_df$y ~ log(risk_df$x))
workshop<-lm(risk_df$y ~ log(risk_df$x))
workshop
View(workshop)
### Shape of risk
risk_df <- data.frame(x=seq(from =5,to=100,by=5))
risk_df <- risk_df %>% mutate(y=0.0009*exp(0.1139*x))
risk_df
risk_df = rbind(c(0,0.01),risk_df)
risk_df
