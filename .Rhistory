incidence_log = incidence_log %>% select(date,daily_cases)
fitted_results = list(
FR_parameters = parameters,
FR_next_state = next_state,
FR_incidence_log_tidy = incidence_log_tidy,
FR_incidence_log = incidence_log,
FR_covid19_waves = covid19_waves,
FR_fitting_beta = fitting_beta
)
save(fitted_results, file = paste("1_inputs/fit/fitted_results_",this_setting,Sys.Date(),".Rdata",sep=""))
fit_all_waves(par)
beep()
RR_estimate
### Explore fit
summary(full_fit)
plot(full_fit, plot.type = "bestvalit")
ggplot() +
geom_line(data=workshop,aes(x=date,y=rolling_average),na.rm=TRUE) +
geom_point(data=workshop,aes(x=date,y=reported_cases)) +
plot_standard #+
unique(fitted_results$FR_next_state$risk_group)
#clear the field!
rm(list=ls())
this_setting = setting = " FJI"
### Setup __________________________________________________________________________________________________
#general toggles
fitting = "on"
plotting = "off"; ticket = 0
outbreak_timing = "off" #i.e., no new outbreak if =="after" than new VOC after last vaccine delivery date, if == 'during" new VOC introduced one week from now
vax_strategy_toggle = "off" #no additional vax, use real vax data only
vax_risk_strategy_toggle = "off"
sensitivity_analysis_toggles = list()
waning_toggle_acqusition = TRUE
waning_toggle_severe_outcome = FALSE #let's save some time, this is not used in the modelling scenarios
waning_toggle_rho_acqusition = TRUE
#initial search range of seed dates
if (this_setting == "FJI"){
date_start = as.Date('2021-04-30')
strain_inital = strain_now = 'WT'
covid19_waves = baseline_covid19_waves = data.frame(date = #c(as.Date('2021-06-06'),as.Date('2021-10-21'),as.Date('2022-01-15')), # initial best guess!
c(as.Date('2021-06-09'),as.Date('2021-10-15'),as.Date('2022-02-01')), # previous best guess
strain = c('delta','omicron','omicron'))
} else if (this_setting == "PNG"){
strain_inital = strain_now = 'WT'
baseline_covid19_waves = covid19_waves = data.frame(date = c(as.Date('2021-01-15'),as.Date('2021-09-01'),as.Date('2021-12-01')),
strain = c('WT','delta','omicron'))
date_start = covid19_waves$date[1] - 2
} else if (this_setting == "TLS") {
strain_inital = strain_now = 'WT'
baseline_covid19_waves = covid19_waves = data.frame(
date = c(as.Date('2021-03-01'),as.Date('2021-05-01'),as.Date('2021-11-01')),
strain = c('WT', 'delta', 'omicron'))
date_start = covid19_waves$date[1] - 2
} else if (this_setting == "IDN") {
strain_inital = strain_now = 'WT'
baseline_covid19_waves = covid19_waves = data.frame(date = c(as.Date('2021-04-01'),as.Date('2021-10-15')),
strain = c('delta','omicron'))
date_start = covid19_waves$date[1] - 2
}
model_weeks = as.numeric((Sys.Date()+1-date_start)/7)
#plot standard
plot_standard = theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
#risk group toggles
risk_group_prioritisation_to_date = NA
risk_group_lower_cov_ratio = NA
risk_group_toggle = "on"
risk_group_name = 'adults_with_comorbidities'
RR_estimate = 1.95
### Saving VE for known dates __________________________________________________________________________________
#Load vax history
source(paste(getwd(),"/(function)_VE_time_step.R",sep=""))
source(paste(getwd(),"/(function)_rho_time_step.R",sep=""))
source(paste(getwd(),"/(1)_simulate_setting.R",sep=""))
source(paste(getwd(),"/(function)_rho_time_step.R",sep=""))
intro_raw <- read.csv("1_inputs/GISAID_Oceania.csv", header=TRUE)
intro_raw
setting
this_setting = setting = "FJI"
### Setup __________________________________________________________________________________________________
#general toggles
fitting = "on"
plotting = "off"; ticket = 0
outbreak_timing = "off" #i.e., no new outbreak if =="after" than new VOC after last vaccine delivery date, if == 'during" new VOC introduced one week from now
vax_strategy_toggle = "off" #no additional vax, use real vax data only
vax_risk_strategy_toggle = "off"
sensitivity_analysis_toggles = list()
waning_toggle_acqusition = TRUE
waning_toggle_severe_outcome = FALSE #let's save some time, this is not used in the modelling scenarios
waning_toggle_rho_acqusition = TRUE
#initial search range of seed dates
if (this_setting == "FJI"){
date_start = as.Date('2021-04-30')
strain_inital = strain_now = 'WT'
covid19_waves = baseline_covid19_waves = data.frame(date = #c(as.Date('2021-06-06'),as.Date('2021-10-21'),as.Date('2022-01-15')), # initial best guess!
c(as.Date('2021-06-09'),as.Date('2021-10-15'),as.Date('2022-02-01')), # previous best guess
strain = c('delta','omicron','omicron'))
} else if (this_setting == "PNG"){
strain_inital = strain_now = 'WT'
baseline_covid19_waves = covid19_waves = data.frame(date = c(as.Date('2021-01-15'),as.Date('2021-09-01'),as.Date('2021-12-01')),
strain = c('WT','delta','omicron'))
date_start = covid19_waves$date[1] - 2
} else if (this_setting == "TLS") {
strain_inital = strain_now = 'WT'
baseline_covid19_waves = covid19_waves = data.frame(
date = c(as.Date('2021-03-01'),as.Date('2021-05-01'),as.Date('2021-11-01')),
strain = c('WT', 'delta', 'omicron'))
date_start = covid19_waves$date[1] - 2
} else if (this_setting == "IDN") {
strain_inital = strain_now = 'WT'
baseline_covid19_waves = covid19_waves = data.frame(date = c(as.Date('2021-04-01'),as.Date('2021-10-15')),
strain = c('delta','omicron'))
date_start = covid19_waves$date[1] - 2
}
model_weeks = as.numeric((Sys.Date()+1-date_start)/7)
#plot standard
plot_standard = theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
#risk group toggles
risk_group_prioritisation_to_date = NA
risk_group_lower_cov_ratio = NA
risk_group_toggle = "on"
risk_group_name = 'adults_with_comorbidities'
RR_estimate = 1.95
### Saving VE for known dates __________________________________________________________________________________
#Load vax history
source(paste(getwd(),"/(function)_VE_time_step.R",sep=""))
source(paste(getwd(),"/(function)_rho_time_step.R",sep=""))
source(paste(getwd(),"/(1)_simulate_setting.R",sep=""))
source(paste(getwd(),"/(3)_disease_characteristics.R",sep=""))
source(paste(getwd(),"/(2)_inital_state.R",sep=""))
list_poss_Rdata = list.files(path="1_inputs/fit/",pattern = paste("VE_real_range_",this_setting,"*",sep=''))
if (length(list_poss_Rdata)>0){
list_poss_Rdata_details = double()
for (i in 1:length(list_poss_Rdata)){
list_poss_Rdata_details = rbind(list_poss_Rdata_details,
file.info(paste("1_inputs/fit/",list_poss_Rdata[[i]],sep=''))$mtime)
}
latest_file = list_poss_Rdata[[which.max(list_poss_Rdata_details)]]
load(file = paste("1_inputs/fit/",latest_file,sep=''))
date_list = seq(max(max(VE_real_range$date)+1), # run only dates not yet filled
Sys.Date()+1,
by="days")
} else{
VE_real_range = data.frame()
date_list = seq(max(date_start,min(vaccination_history_TRUE$date)+ min(vaxCovDelay$delay)),
Sys.Date()+1,
by="days")
}
for (i in 1:length(date_list)) {
#date_now
date_now = date_list[i]
#(1/3) save VE as all WT-delta estimates
VE_delta = VE_time_step(
"delta",
date_now,
'any_infection',
VE_waning_LOCAL = VE_waning_distribution, #loaded from (2)
vaccination_history_LOCAL = vaccination_history_TRUE, #loaded from (1)
SA_toggles_local = sensitivity_analysis_toggles) %>%
mutate(date = date_now,
strain = "delta")
#(2/3) save VE as all omicron estimates
VE_omicron = VE_time_step(
"omicron",
date_now,
'any_infection',
VE_waning_LOCAL = VE_waning_distribution, #loaded from (2)
vaccination_history_LOCAL = vaccination_history_TRUE, #loaded from (1)
SA_toggles_local = sensitivity_analysis_toggles) %>%
mutate(date = date_now,
strain = "omicron")
#(3/3) within time step of each run calculate as mixed WT-delta/omicron estimates within omicron shift
VE_real_range = rbind(VE_real_range, VE_delta,VE_omicron)
}
rm(VE_time_step)
save(VE_real_range, file = paste('1_inputs/fit/VE_real_range_',this_setting,'_',Sys.Date(),'.Rdata',sep=''))
#SETUP________________________________________
require('pracma') #contains findpeaks function
#reported_cases remove NA, and within simulation scope
reported_cases = case_history %>% select(date,rolling_average) %>% filter(date > date_start)
reported_cases <- na.omit(reported_cases)
#reported_peaks - peaks in reported daily cases, NB: currently hard coded to FJI
reported_peaks = findpeaks(reported_cases$rolling_average,minpeakheight = 50 ,minpeakdistance = 90, npeaks = 3 )
reported_peaks = reported_cases$date[c(reported_peaks[,2])]
#add third peak
window = reported_cases %>% filter(date>as.Date('2022-05-01'))
third_peak = median(window$date[window$rolling_average == max(window$rolling_average)])
reported_peaks = c(reported_peaks,third_peak)
#fit cutoff dates
if (this_setting == "FJI"){
fit_cutoff_dates = c(as.Date('2021-10-15'),#earliest likely introduction of Omicron
reported_peaks[2] + as.numeric(reported_peaks[3] - reported_peaks[2])/2)
} else if (this_setting == "PNG"){
fit_cutoff_dates = c(as.Date('2021-07-05')) #first good introduction of Delta in PNG
} else if (this_setting == "IDN"){
fit_cutoff_dates =c((sort(reported_peaks)[2]-sort(reported_peaks)[1])/2+sort(reported_peaks)[1],
sort(reported_peaks)[2]+90) #first good introduction of Delta in PNG
}
load(file = "1_inputs/fit/full_fitFJI2023-04-09.Rdata")
### Save fitted result
par = full_fit$optim$bestmem
par
#these were the dates we used when searching for the range of shift dates
baseline_covid19_waves = data.frame(date = c(as.Date('2021-06-06'),as.Date('2021-10-04'),as.Date('2022-02-01')),
strain = c('delta','omicron','omicron'))
fitting = "on"
strain_inital = strain_now = 'WT'
fitting_beta = c(par[1],
par[2],
par[3]
)
covid19_waves = baseline_covid19_waves
covid19_waves$date[1] = covid19_waves$date[1] + round(par[4])
covid19_waves$date[2] = covid19_waves$date[2] + round(par[5])
covid19_waves$date[3] = covid19_waves$date[3] + round(par[6])
date_start = as.Date('2021-04-30')
model_weeks = as.numeric((as.Date('2022-12-31') - date_start)/7)
source(paste(getwd(),"/CommandDeck.R",sep=""),local=TRUE) #15 minutes
#quick search under reporting
increments_list = c(100,50,10,5,1,0.25)
underreporting_tracker = data.frame()
for (repeat_through in 1:length(increments_list)){
increment = increments_list[repeat_through]
if (repeat_through == 1){
search_list1 = search_list2 = search_list3 = seq(50,1000,by=increments_list[repeat_through])
} else{
best_so_far = underreporting_tracker[underreporting_tracker$fit== min(underreporting_tracker$fit, na.rm=TRUE),]
if (nrow(best_so_far)>1){ #pick best_so_far with min under reporting
best_so_far = best_so_far %>% mutate(under_reporting_mean = (wave1+wave2+wave3)/3)
best_so_far = best_so_far[best_so_far$under_reporting_mean == min(best_so_far$under_reporting_mean),]
}
best_so_far = unique(best_so_far)
search_list1 = seq(best_so_far$wave1 - increments_list[repeat_through-1],
best_so_far$wave1 + increments_list[repeat_through-1],
by = increments_list[repeat_through])
search_list2 = seq(best_so_far$wave2 - increments_list[repeat_through-1],
best_so_far$wave2 + increments_list[repeat_through-1],
by = increments_list[repeat_through])
search_list3 = seq(best_so_far$wave3 - increments_list[repeat_through-1],
best_so_far$wave3 + increments_list[repeat_through-1],
by = increments_list[repeat_through])
}
for(under_reporting_wave1 in search_list1){
for (under_reporting_wave2 in search_list2){
for (under_reporting_wave3 in search_list3){
workshop = case_history %>%
select(date,rolling_average) %>%
rename(reported_cases = rolling_average) %>%
right_join(incidence_log, by = "date") %>%
left_join(omicron_shift, by = "date") %>%
rename(omicron = percentage) %>%
mutate(rolling_average = case_when(
date >= min(omicron_shift$date[omicron_shift$wave == 2])  & is.na(omicron) == FALSE ~ rolling_average * (1/under_reporting_wave3*omicron + 1/under_reporting_wave2*(1-omicron)),
date >= min(omicron_shift$date[omicron_shift$wave == 2])  ~ rolling_average * 1/under_reporting_wave3,
date >= min(omicron_shift$date[omicron_shift$wave == 1])  & is.na(omicron) == FALSE ~ rolling_average * (1/under_reporting_wave2*omicron + 1/under_reporting_wave1*(1-omicron)),
date >= min(omicron_shift$date[omicron_shift$wave == 1])  ~ rolling_average * 1/under_reporting_wave2,
date < min(omicron_shift$date[omicron_shift$wave == 1]) ~ rolling_average * 1/under_reporting_wave1)) %>%
mutate(fit_statistic = abs(rolling_average - reported_cases)^2) #%>%
#filter(date<as.Date('2022-10-01'))
fit_statistic = data.frame(
fit = sum(workshop$fit_statistic,
na.rm=TRUE),
wave1 = under_reporting_wave1,
wave2 = under_reporting_wave2,
wave3 = under_reporting_wave3)
underreporting_tracker = rbind(underreporting_tracker,fit_statistic)
}
}
}
}
fit_statistic = min(underreporting_tracker$fit, na.rm=TRUE)
fit_statistic
### Plot under reporting
these_waves = underreporting_tracker[underreporting_tracker$fit == min(underreporting_tracker$fit),]
under_reporting_wave3 = these_waves$wave3
under_reporting_wave2 = these_waves$wave2
under_reporting_wave1 = these_waves$wave1
workshop = case_history %>%
select(date,rolling_average) %>%
rename(reported_cases = rolling_average) %>%
right_join(incidence_log, by = "date") %>%
left_join(omicron_shift, by = "date") %>%
rename(omicron = percentage) %>%
mutate(rolling_average = case_when(
date >= min(omicron_shift$date[omicron_shift$wave == 2])  & is.na(omicron) == FALSE ~ rolling_average * (1/under_reporting_wave3*omicron + 1/under_reporting_wave2*(1-omicron)),
date >= min(omicron_shift$date[omicron_shift$wave == 2])  ~ rolling_average * 1/under_reporting_wave3,
date >= min(omicron_shift$date[omicron_shift$wave == 1])  & is.na(omicron) == FALSE ~ rolling_average * (1/under_reporting_wave2*omicron + 1/under_reporting_wave1*(1-omicron)),
date >= min(omicron_shift$date[omicron_shift$wave == 1])  ~ rolling_average * 1/under_reporting_wave2,
date < min(omicron_shift$date[omicron_shift$wave == 1]) ~ rolling_average * 1/under_reporting_wave1)) %>%
mutate(fit_statistic = abs(rolling_average - reported_cases)^2) #%>%
#geom_vline(xintercept=as.Date('2022-10-01'))
ggplot() +
geom_line(data=incidence_log,aes(x=date,y=rolling_average),na.rm=TRUE) +
plot_standard
ggplot() +
geom_line(data=workshop,aes(x=date,y=rolling_average),na.rm=TRUE) +
geom_point(data=workshop,aes(x=date,y=reported_cases)) +
plot_standard #+
full_fit$optim$bestval
fit_statistic
incidence_log = incidence_log %>% select(date,daily_cases)
fitted_results = list(
FR_parameters = parameters,
FR_next_state = next_state,
FR_incidence_log_tidy = incidence_log_tidy,
FR_incidence_log = incidence_log,
FR_covid19_waves = covid19_waves,
FR_fitting_beta = fitting_beta
)
save(fitted_results, file = paste("1_inputs/fit/fitted_results_",this_setting,Sys.Date(),".Rdata",sep=""))
### Save fitted result for pregnant women
par = full_fit$optim$bestmem
risk_group_name = 'pregnant_women'
RR_estimate =  2.4
incidence_log = incidence_log %>% select(date,daily_cases)
fitted_results = list(
FR_parameters = parameters,
FR_next_state = next_state,
FR_incidence_log_tidy = incidence_log_tidy,
FR_incidence_log = incidence_log,
FR_covid19_waves = covid19_waves,
FR_fitting_beta = fitting_beta
)
save(fitted_results, file = paste("1_inputs/fit/fitted_results_pregnant_women_",this_setting,Sys.Date(),".Rdata",sep=""))
### Save fitted result for pregnant women
par = full_fit$optim$bestmem
risk_group_name = 'pregnant_women'
RR_estimate =  2.4
fitting = "on"
strain_inital = strain_now = 'WT'
fitting_beta = c(par[1],
par[2],
par[3]
)
covid19_waves = baseline_covid19_waves
covid19_waves$date[1] = covid19_waves$date[1] + round(par[4])
covid19_waves$date[2] = covid19_waves$date[2] + round(par[5])
covid19_waves$date[3] = covid19_waves$date[3] + round(par[6])
date_start = as.Date('2021-04-30')
model_weeks = as.numeric((as.Date('2022-12-31') - date_start)/7)
source(paste(getwd(),"/CommandDeck.R",sep=""),local=TRUE) #15 minutes
#quick search under reporting
increments_list = c(100,50,10,5,1,0.25)
underreporting_tracker = data.frame()
for (repeat_through in 1:length(increments_list)){
increment = increments_list[repeat_through]
if (repeat_through == 1){
search_list1 = search_list2 = search_list3 = seq(50,1000,by=increments_list[repeat_through])
} else{
best_so_far = underreporting_tracker[underreporting_tracker$fit== min(underreporting_tracker$fit, na.rm=TRUE),]
if (nrow(best_so_far)>1){ #pick best_so_far with min under reporting
best_so_far = best_so_far %>% mutate(under_reporting_mean = (wave1+wave2+wave3)/3)
best_so_far = best_so_far[best_so_far$under_reporting_mean == min(best_so_far$under_reporting_mean),]
}
best_so_far = unique(best_so_far)
search_list1 = seq(best_so_far$wave1 - increments_list[repeat_through-1],
best_so_far$wave1 + increments_list[repeat_through-1],
by = increments_list[repeat_through])
search_list2 = seq(best_so_far$wave2 - increments_list[repeat_through-1],
best_so_far$wave2 + increments_list[repeat_through-1],
by = increments_list[repeat_through])
search_list3 = seq(best_so_far$wave3 - increments_list[repeat_through-1],
best_so_far$wave3 + increments_list[repeat_through-1],
by = increments_list[repeat_through])
}
for(under_reporting_wave1 in search_list1){
for (under_reporting_wave2 in search_list2){
for (under_reporting_wave3 in search_list3){
workshop = case_history %>%
select(date,rolling_average) %>%
rename(reported_cases = rolling_average) %>%
right_join(incidence_log, by = "date") %>%
left_join(omicron_shift, by = "date") %>%
rename(omicron = percentage) %>%
mutate(rolling_average = case_when(
date >= min(omicron_shift$date[omicron_shift$wave == 2])  & is.na(omicron) == FALSE ~ rolling_average * (1/under_reporting_wave3*omicron + 1/under_reporting_wave2*(1-omicron)),
date >= min(omicron_shift$date[omicron_shift$wave == 2])  ~ rolling_average * 1/under_reporting_wave3,
date >= min(omicron_shift$date[omicron_shift$wave == 1])  & is.na(omicron) == FALSE ~ rolling_average * (1/under_reporting_wave2*omicron + 1/under_reporting_wave1*(1-omicron)),
date >= min(omicron_shift$date[omicron_shift$wave == 1])  ~ rolling_average * 1/under_reporting_wave2,
date < min(omicron_shift$date[omicron_shift$wave == 1]) ~ rolling_average * 1/under_reporting_wave1)) %>%
mutate(fit_statistic = abs(rolling_average - reported_cases)^2) #%>%
#filter(date<as.Date('2022-10-01'))
fit_statistic = data.frame(
fit = sum(workshop$fit_statistic,
na.rm=TRUE),
wave1 = under_reporting_wave1,
wave2 = under_reporting_wave2,
wave3 = under_reporting_wave3)
underreporting_tracker = rbind(underreporting_tracker,fit_statistic)
}
}
}
}
fit_statistic = min(underreporting_tracker$fit, na.rm=TRUE)
incidence_log = incidence_log %>% select(date,daily_cases)
fitted_results = list(
FR_parameters = parameters,
FR_next_state = next_state,
FR_incidence_log_tidy = incidence_log_tidy,
FR_incidence_log = incidence_log,
FR_covid19_waves = covid19_waves,
FR_fitting_beta = fitting_beta
)
unique(next_state$risk_group)
fitted_results = list(
FR_parameters = parameters,
FR_next_state = next_state,
FR_incidence_log_tidy = incidence_log_tidy,
FR_incidence_log = incidence_log,
FR_covid19_waves = covid19_waves,
FR_fitting_beta = fitting_beta
)
save(fitted_results, file = paste("1_inputs/fit/fitted_results_pregnant_women_",this_setting,Sys.Date(),".Rdata",sep=""))
par
covid19_waves
these_waves
save.image("x_results/FJI.Rdata")
setting
rm(list=ls())
master_toggles = list(setting_beta = "FJI",
risk_group_name = "adults_with_comorbidities",
TOGGLE_include_second_booster_elig = FALSE)
### DEPENDENCIES: nil!
if (exists("master_toggles")){
this_risk_group_name = risk_group_name = master_toggles$risk_group_name
setting_beta = master_toggles$setting_beta
TOGGLE_include_second_booster_elig = master_toggles$TOGGLE_include_second_booster_elig
} else{
rm(list=ls())
this_risk_group_name = risk_group_name = "adults_with_comorbidities" #options: pregnant_women, adults_with_comorbidities
setting_beta = "TLS" #options: "FJI", "SLE",PNG_high_beta, PNG_low_beta
TOGGLE_include_second_booster_elig = FALSE
}
setting = this_setting = substr(setting_beta,1,3)
### SET UP MODEL RUN ################################################################
#start timing
time.start.AntiviralSetUp=proc.time()[[3]]
fitting = "off";plotting = "off"
#load latest model run in known dates
if (fitting == "wave_three" & exists("scenario_MASTER") == TRUE){
list_poss_Rdata = list.files(path="1_inputs/fit/",
pattern = paste("start_point_wave_three_",setting_beta,"_v_",scenario_MASTER,"_*",sep=""))
} else if (fitting == "wave_three"){
list_poss_Rdata = list.files(path="1_inputs/fit/",
pattern = paste("start_point_wave_three_",setting_beta,"*",sep=""))
} else if (fitting == "wave_two" & exists("scenario_MASTER") == TRUE){
list_poss_Rdata = list.files(path="1_inputs/fit/",
pattern = paste("start_point_wave_two_",setting_beta,"_v_",scenario_MASTER,"_*",sep=""))
} else if (fitting == "wave_two"){
list_poss_Rdata = list.files(path="1_inputs/fit/",
pattern = paste("start_point_wave_two_",setting_beta,"*",sep=""))
} else{
if (risk_group_name == "pregnant_women"){
list_poss_Rdata = list.files(path="1_inputs/fit/",pattern = paste("fitted_results_pregnant_women_",setting_beta,"*",sep=""))
} else{
list_poss_Rdata = list.files(path="1_inputs/fit/",pattern = paste("fitted_results_",setting_beta,"*",sep=""))
}
}
list_poss_Rdata_details = double()
for (i in 1:length(list_poss_Rdata)){
list_poss_Rdata_details = rbind(list_poss_Rdata_details,
file.info(paste("1_inputs/fit/",list_poss_Rdata[[i]],sep=''))$mtime)
}
latest_file = list_poss_Rdata[[which.max(list_poss_Rdata_details)]]
latest_file
rm(list=ls())
master_toggles = list(setting_beta = "FJI",
risk_group_name = "adults_with_comorbidities",
TOGGLE_include_second_booster_elig = FALSE)
source(paste(getwd(),"/3_antiviral_model/(antiviral) set up.R",sep=""),local=TRUE)
source(paste(getwd(),"/3_antiviral_model/(antiviral)(run).R",sep=""),local=TRUE)
### PREGNANT WOMEN
rm(list=ls())
master_toggles = list(setting_beta = "FJI",
risk_group_name = "pregnant_women",
TOGGLE_include_second_booster_elig = FALSE)
source(paste(getwd(),"/3_antiviral_model/(antiviral) set up.R",sep=""),local=TRUE)
source(paste(getwd(),"/3_antiviral_model/(antiviral)(run) special case pregnant women .R",sep=""),local=TRUE)
warnings()
latest_file
pregnant_setup = RECORD_antiviral_setup$outcomes_without_antivirals
this_risk_group_name = "adults_with_comorbidities"
#load latest antiviralSetUp_* (transmission model run for 1 year)
list_poss_Rdata = list.files(path=paste("x_results/",sep=''),pattern = paste("antiviralSetUp_",setting_beta,"_",this_risk_group_name,"_*",sep=""))
list_poss_Rdata_details = double()
for (i in 1:length(list_poss_Rdata)){
list_poss_Rdata_details = rbind(list_poss_Rdata_details,
file.info(paste('x_results/',list_poss_Rdata[[i]],sep=''))$mtime)
}
latest_file = list_poss_Rdata[[which.max(list_poss_Rdata_details)]]
latest_file
load(file = paste("x_results/",latest_file,sep=''))
compare = RECORD_antiviral_setup$outcomes_without_antivirals
pregnant_setup = pregnant_setup %>% rename(preg_overall = overall, preg = high_risk)
compare = compare %>% left_join(pregnant_setup)
compare = RECORD_antiviral_setup$outcomes_without_antivirals
compare = compare %>% left_join(pregnant_setup,by = c("outcome","vax_scenario"))
View(compare)
compare = compare %>% select(outcome,vax_scenario,overall,preg_overall,high_risk,preg)
options(scipen = 1000)
View(compare)
save.image("x_results/FJI.Rdata")
source("~/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/3_antiviral_model/(antiviral)(plot) outcomes averted by vax vs antiviral_v3.R", echo=TRUE)
source("~/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/3_antiviral_model/(antiviral)(plot) outcomes averted by vax vs antiviral_v3.R", echo=TRUE)
source("~/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/3_antiviral_model/(antiviral)(plot) outcomes averted by vax vs antiviral_v3.R", echo=TRUE)
source("~/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/3_antiviral_model/(antiviral)(plot) outcomes averted by vax vs antiviral_v3.R", echo=TRUE)
source("~/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/3_antiviral_model/(antiviral)(plot) outcomes averted by vax vs antiviral_v3.R", echo=TRUE)
source("~/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/3_antiviral_model/(antiviral)(plot) outcomes averted by vax vs antiviral_v3.R", echo=TRUE)
source("~/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/3_antiviral_model/(antiviral)(plot) outcomes averted by vax vs antiviral_v3.R", echo=TRUE)
