vax_delivery_group             = 'universal',
vax_age_strategy               = "uniform_no_children",            # options: "oldest", "youngest","50_down","uniform"
vax_dose_strategy              = 1,                                # options: 1,2
vax_strategy_vaccine_type      = "Johnson & Johnson" ,             # options: "Moderna","Pfizer","AstraZeneca","Johnson & Johnson","Sinopharm","Sinovac"
vax_strategy_vaccine_interval  = c(90) ,                           #  (days) interval between doses, you must specify multiple intervals if multiple doses e.g. c(21,90)
vax_strategy_max_expected_cov  = 0.88                              # value between 0-1 of age group willing to be vaccinated
)
#general vax strategy toggles
vax_strategy_toggles = vax_strategy_toggles_CURRENT_TARGET =
list(vax_strategy_start_date        = Sys.Date(),
vax_strategy_num_doses         = 99999999, #assume that all adults who are willing have been vaccinated
vax_strategy_roll_out_speed    = 11075 ,                           # doses delivered per day
vax_delivery_group             = 'universal',
vax_age_strategy               = "uniform_no_children",            # options: "oldest", "youngest","50_down","uniform"
vax_dose_strategy              = 1,                                # options: 1,2
vax_strategy_vaccine_type      = "Johnson & Johnson" ,             # options: "Moderna","Pfizer","AstraZeneca","Johnson & Johnson","Sinopharm","Sinovac"
vax_strategy_vaccine_interval  = c(90) ,                           #  (days) interval between doses, you must specify multiple intervals if multiple doses e.g. c(21,90)
vax_strategy_max_expected_cov  = 0.88                              # value between 0-1 of age group willing to be vaccinated
)
risk_group_list = list('adults_with_comorbidities','pregnant_women')
risk_group_uniform_proportion = list()
for (group in 1:length(risk_group_list)){
risk_group_name = risk_group_list[[group]]
#load pop_dn with risk group
pop_risk_group_dn = pop_setting %>%
mutate(risk_group = 'general_public')
if(risk_group_name %in% c('adults_with_comorbidities')){
risk_dn = read.csv('1_inputs/risk_group.csv')
risk_dn = risk_dn[risk_dn$risk_group_name == risk_group_name,]
} else if (risk_group_name %in% c('pregnant_women')){
load(file = "1_inputs/prevalence_pregnancy.Rdata")
risk_dn = prevalence_pregnancy
} else {
stop('risk_group_name not a valid value')
}
risk_dn = risk_dn %>%
select(age_group,prop)
pop_high_risk = pop_setting %>%
left_join(risk_dn, by = "age_group") %>%
mutate(risk_group = risk_group_name,
pop = round(pop*prop)) %>%
select(risk_group,age_group,pop)
pop_general_public   = pop_setting %>%
left_join(risk_dn, by = "age_group") %>%
mutate(risk_group = 'general_public',
pop = round(pop*(1-prop))) %>%
select(risk_group,age_group,pop)
pop_risk_group_dn = rbind(pop_general_public,pop_high_risk)
if (round(sum(pop_risk_group_dn$pop)) != sum(pop)){stop('population by risk group group does not match total population!')}
#__________________________
#calculate proportion of adult population
age_risk_split =  pop_risk_group_dn %>%
mutate(adult_pop = case_when(
age_group %in% c('0 to 4','5 to 9','10 to 17') ~ 0,
TRUE ~ pop)) %>%
mutate(split = adult_pop/sum(adult_pop)) %>%
select(-adult_pop)
if (sum(age_risk_split$split) != 1){stop('(1) simulate setting line 290: dn of doses >1')}
#calculate risk group as proportion of adult population
risk_split = age_risk_split %>% group_by(risk_group) %>% summarise(sum = sum(split))
risk_group_uniform_proportion[[group]] = risk_split$sum[risk_split$risk_group == risk_group_name]
}
###CHECK
risk_group_name = 'adults_with_comorbidities'
risk_group_toggle = "on"
vax_strategy_toggle = "on"
vax_risk_strategy_toggle = "on"
num_risk_groups = 2
source(paste(getwd(),"/(1)_simulate_setting.R",sep=""))
vaccine_coverage_end_history = vaccination_history_TRUE %>%
filter(date == max(vaccination_history_TRUE$date)) %>%
select(dose,vaccine_type,age_group,risk_group,coverage_this_date)
vaccination_history_uniform =
apply_risk_strategy(vax_risk_strategy     = 'Y',
vax_risk_proportion   = risk_group_uniform_proportion[[1]],
vax_doses_general     = 1,
vax_doses_risk        = 1,
risk_group_acceptability = 0.88,
risk_group_accessibility = FALSE,
risk_group_age_broaden   = FALSE
)
real_doses = vaccination_history_TRUE %>%
filter(! age_group %in% c('0 to 4','5 to 9','10 to 17')) %>%
group_by(risk_group,age_group,dose) %>%
summarise(doses = sum(doses_delivered_this_date)) %>%
left_join(pop_risk_group_dn) %>%
mutate(cov=doses/pop) %>%
arrange(dose,age_group)
if (length(unique(na.omit(real_doses$cov[real_doses$dose == 1])))>1 | length(unique(na.omit(round(real_doses$cov[real_doses$dose == 2],digits=2))))>1){
stop('real doses not equal across risk groups')
}
hypoth_doses = vaccination_history_uniform %>%
filter(! age_group %in% c('0 to 4','5 to 9','10 to 17')) %>%
group_by(risk_group,age_group,dose) %>%
summarise(doses = sum(doses_delivered_this_date)) %>%
left_join(pop_risk_group_dn) %>%
mutate(cov=doses/pop) %>%
arrange(dose,age_group)
if (length(unique(na.omit(round(hypoth_doses$cov[hypoth_doses$dose == 1],digits=2))))>1){
stop('hypoth doses not equal across risk groups')
}
if (max(vaccination_history_TRUE$date[vaccination_history_TRUE$risk_group == 'general_public']) !=
max(vaccination_history_TRUE$date[vaccination_history_TRUE$risk_group == risk_group_name]) |
max(vaccination_history_uniform$date[vaccination_history_uniform$risk_group == 'general_public']) !=
max(vaccination_history_uniform$date[vaccination_history_uniform$risk_group == risk_group_name])){
warning('max delivery dates dont align between risk groups')
}
View(hypoth_doses)
vaccination_history_booster =
apply_risk_strategy(vax_risk_strategy     = 'Y',
vax_risk_proportion   = risk_group_uniform_proportion[[1]],
vax_doses_general     = 1,
vax_doses_risk        = 2,
risk_group_acceptability = 0.88,
risk_group_accessibility = FALSE,
risk_group_age_broaden   = FALSE
)
hypoth_doses = vaccination_history_booster %>%
filter(! age_group %in% c('0 to 4','5 to 9','10 to 17')) %>%
group_by(risk_group,age_group,dose) %>%
summarise(doses = sum(doses_delivered_this_date)) %>%
left_join(pop_risk_group_dn) %>%
mutate(cov=doses/pop) %>%
arrange(dose,age_group)
booster_type
booster_dose
hypoth_doses = vaccination_history_booster %>%
mutate(dose = case_when(
vaccine_type == booster_type & dose == booster_dose_number ~ 8,
TRUE ~ dose
)) %>%
filter(! age_group %in% c('0 to 4','5 to 9','10 to 17')) %>%
group_by(risk_group,age_group,dose) %>%
summarise(doses = sum(doses_delivered_this_date)) %>%
left_join(pop_risk_group_dn) %>%
mutate(cov=doses/pop) %>%
arrange(dose,age_group)
if (length(unique(na.omit(round(hypoth_doses$cov[hypoth_doses$dose == 1],digits=2))))>1 |
length(unique(na.omit(round(hypoth_doses$cov[hypoth_doses$dose == 2],digits=2))))>1 |
length(unique(na.omit(round(hypoth_doses$cov[hypoth_doses$dose == 3],digits=2))))>1){
stop('doses not uniform across risk groups')
}
max(vaccination_history_TRUE$date[vaccination_history_TRUE$risk_group == 'general_public']) !=
max(vaccination_history_TRUE$date[vaccination_history_TRUE$risk_group == risk_group_name])
max(vaccination_history_uniform$date[vaccination_history_uniform$risk_group == 'general_public'])
max(vaccination_history_uniform$date[vaccination_history_uniform$risk_group == risk_group_name]))
max(vaccination_history_uniform$date[vaccination_history_uniform$risk_group == risk_group_name])
max(vaccination_history_booster$date[vaccination_history_booster$risk_group == 'general_public']) !=
max(vaccination_history_booster$date[vaccination_history_booster$risk_group == risk_group_name])
View(vaccination_history_booster)
if (length(unique(na.omit(round(hypoth_doses$cov[hypoth_doses$dose == 1],digits=2))))>1 |
length(unique(na.omit(round(hypoth_doses$cov[hypoth_doses$dose == 2],digits=2))))>1 |
length(unique(na.omit(round(hypoth_doses$cov[hypoth_doses$dose == 3],digits=2))))>1){
stop('doses not uniform across risk groups')
}
hypoth_doses = vaccination_history_booster %>%
mutate(dose = case_when(
vaccine_type == booster_type & dose == booster_dose_number ~ 8,
TRUE ~ dose
)) %>%
filter(! age_group %in% c('0 to 4','5 to 9','10 to 17')) %>%
group_by(risk_group,age_group,dose) %>%
summarise(doses = sum(doses_delivered_this_date)) %>%
left_join(pop_risk_group_dn) %>%
mutate(cov=doses/pop) %>%
arrange(dose,age_group)
if (length(unique(na.omit(round(hypoth_doses$cov[hypoth_doses$dose == 1],digits=2))))>1 |
length(unique(na.omit(round(hypoth_doses$cov[hypoth_doses$dose == 2],digits=2))))>1 |
length(unique(na.omit(round(hypoth_doses$cov[hypoth_doses$dose == 3],digits=2))))>1){
stop('doses not uniform across risk groups')
}
unique(na.omit(round(hypoth_doses$cov[hypoth_doses$dose == 3],digits=2)))
unique(na.omit(round(hypoth_doses$cov[hypoth_doses$dose == 8],digits=2)))
max(vaccination_history_booster$date[vaccination_history_booster$risk_group == 'general_public' & vaccination_history_booster$doses_delivered_this_date>0])
max(vaccination_history_booster$date[vaccination_history_booster$risk_group == risk_group_name & vaccination_history_booster$doses_delivered_this_date>0])
View(vaccination_history_booster)
check = vaccination_history_booster %>% group_by(date) %>% summarise(total = sum(doses_delivered_this_date))
ggplot(check) + geom_point(aes(x=date,y=total))
View(check)
check = vaccination_history_booster %>% filter(date>Sys.Date()) %>% group_by(date) %>% summarise(total = sum(doses_delivered_this_date))
ggplot(check) + geom_point(aes(x=date,y=total))
risk_split
age_risk_split
risk_group_name = risk_group_list[[group]]
group = 1
risk_group_name = risk_group_list[[group]]
#load pop_dn with risk group
pop_risk_group_dn = pop_setting %>%
mutate(risk_group = 'general_public')
if(risk_group_name %in% c('adults_with_comorbidities')){
risk_dn = read.csv('1_inputs/risk_group.csv')
risk_dn = risk_dn[risk_dn$risk_group_name == risk_group_name,]
} else if (risk_group_name %in% c('pregnant_women')){
load(file = "1_inputs/prevalence_pregnancy.Rdata")
risk_dn = prevalence_pregnancy
} else {
stop('risk_group_name not a valid value')
}
risk_dn = risk_dn %>%
select(age_group,prop)
risk_dn
pop_high_risk = pop_setting %>%
left_join(risk_dn, by = "age_group") %>%
mutate(risk_group = risk_group_name,
pop = round(pop*prop)) %>%
select(risk_group,age_group,pop)
pop_high_risk
risk_group_name = risk_group_list[[group]]
#load pop_dn with risk group
pop_risk_group_dn = pop_setting %>%
mutate(risk_group = 'general_public')
if(risk_group_name %in% c('adults_with_comorbidities')){
risk_dn = read.csv('1_inputs/risk_group.csv')
risk_dn = risk_dn[risk_dn$risk_group_name == risk_group_name,]
} else if (risk_group_name %in% c('pregnant_women')){
load(file = "1_inputs/prevalence_pregnancy.Rdata")
risk_dn = prevalence_pregnancy
} else {
stop('risk_group_name not a valid value')
}
risk_dn = risk_dn %>%
select(age_group,prop)
pop_high_risk = pop_setting %>%
left_join(risk_dn, by = "age_group") %>%
mutate(risk_group = risk_group_name,
pop = round(pop*prop),
pop_booster = pop*2) %>%
select(risk_group,age_group,pop,pop_booster)
pop_general_public   = pop_setting %>%
left_join(risk_dn, by = "age_group") %>%
mutate(risk_group = 'general_public',
pop = round(pop*(1-prop)),
pop_booster = pop) %>%
select(risk_group,age_group,pop,pop_booster)
pop_risk_group_dn = rbind(pop_general_public,pop_high_risk)
if (round(sum(pop_risk_group_dn$pop)) != sum(pop)){stop('population by risk group group does not match total population!')}
#calculate proportion of adult population
age_risk_split =  pop_risk_group_dn %>%
mutate(adult_pop = case_when(
age_group %in% c('0 to 4','5 to 9','10 to 17') ~ 0,
TRUE ~ pop),
adult_pop_booster = case_when(
age_group %in% c('0 to 4','5 to 9','10 to 17') ~ 0,
TRUE ~ pop_booster)) %>%
mutate(split = adult_pop/sum(adult_pop),
split_booster = adult_pop_booster/sum(adult_pop_booster)) %>%
select(-adult_pop)
sum(age_risk_split$split_booster)
#calculate risk group as proportion of adult population
risk_split = age_risk_split %>% group_by(risk_group) %>% summarise(sum = sum(split))
booster_risk_split = age_risk_split %>% group_by(risk_group) %>% summarise(sum = sum(split_booster))
risk_split
booster_risk_split
risk_group_uniform_booster_proportion[[group]] = booster_risk_split$sum[booster_risk_split$risk_group == risk_group_name]
risk_group_list = list('adults_with_comorbidities','pregnant_women')
risk_group_uniform_proportion = list()
risk_group_uniform_booster_proportion = list()
for (group in 1:length(risk_group_list)){
risk_group_name = risk_group_list[[group]]
#load pop_dn with risk group
pop_risk_group_dn = pop_setting %>%
mutate(risk_group = 'general_public')
if(risk_group_name %in% c('adults_with_comorbidities')){
risk_dn = read.csv('1_inputs/risk_group.csv')
risk_dn = risk_dn[risk_dn$risk_group_name == risk_group_name,]
} else if (risk_group_name %in% c('pregnant_women')){
load(file = "1_inputs/prevalence_pregnancy.Rdata")
risk_dn = prevalence_pregnancy
} else {
stop('risk_group_name not a valid value')
}
risk_dn = risk_dn %>%
select(age_group,prop)
pop_high_risk = pop_setting %>%
left_join(risk_dn, by = "age_group") %>%
mutate(risk_group = risk_group_name,
pop = round(pop*prop),
pop_booster = pop*2) %>%
select(risk_group,age_group,pop,pop_booster)
pop_general_public   = pop_setting %>%
left_join(risk_dn, by = "age_group") %>%
mutate(risk_group = 'general_public',
pop = round(pop*(1-prop)),
pop_booster = pop) %>%
select(risk_group,age_group,pop,pop_booster)
pop_risk_group_dn = rbind(pop_general_public,pop_high_risk)
if (round(sum(pop_risk_group_dn$pop)) != sum(pop)){stop('population by risk group group does not match total population!')}
#__________________________
#calculate proportion of adult population
age_risk_split =  pop_risk_group_dn %>%
mutate(adult_pop = case_when(
age_group %in% c('0 to 4','5 to 9','10 to 17') ~ 0,
TRUE ~ pop),
adult_pop_booster = case_when(
age_group %in% c('0 to 4','5 to 9','10 to 17') ~ 0,
TRUE ~ pop_booster)) %>%
mutate(split = adult_pop/sum(adult_pop),
split_booster = adult_pop_booster/sum(adult_pop_booster)) %>%
select(-adult_pop)
if (sum(age_risk_split$split) != 1){stop('(1) simulate setting line 290: dn of doses >1')}
if (sum(age_risk_split$split_booster) != 1){stop('(1) simulate setting line 290: dn of doses >1')}
#calculate risk group as proportion of adult population
risk_split = age_risk_split %>% group_by(risk_group) %>% summarise(sum = sum(split))
booster_risk_split = age_risk_split %>% group_by(risk_group) %>% summarise(sum = sum(split_booster))
risk_group_uniform_proportion[[group]] = risk_split$sum[risk_split$risk_group == risk_group_name]
risk_group_uniform_booster_proportion[[group]] = booster_risk_split$sum[booster_risk_split$risk_group == risk_group_name]
}
risk_group_uniform_proportion
risk_group_uniform_booster_proportion
vaccination_history_booster =
apply_risk_strategy(vax_risk_strategy     = 'Y',
vax_risk_proportion   = risk_group_uniform_booster_proportion[[1]],
vax_doses_general     = 1,
vax_doses_risk        = 2,
risk_group_acceptability = 0.88,
risk_group_accessibility = FALSE,
risk_group_age_broaden   = FALSE
)
vaccination_history_booster =
apply_risk_strategy(vax_risk_strategy     = 'Y',
vax_risk_proportion   = risk_group_uniform_booster_proportion[[1]],
vax_doses_general     = 1,
vax_doses_risk        = 2,
risk_group_acceptability = 0.88,
risk_group_accessibility = FALSE,
risk_group_age_broaden   = FALSE
)
risk_group_uniform_booster_proportion
risk_group_uniform_booster_proportion[[1]]
vaccination_history_booster =
apply_risk_strategy(vax_risk_strategy     = 'Y',
vax_risk_proportion   = risk_group_uniform_booster_proportion[[1]],
vax_doses_general     = 1,
vax_doses_risk        = 2,
risk_group_acceptability = 0.88,
risk_group_accessibility = FALSE,
risk_group_age_broaden   = FALSE
)
vaccination_history_booster =
apply_risk_strategy(vax_risk_strategy     = 'Y',
vax_risk_proportion   = risk_group_uniform_booster_proportion[[1]],
vax_doses_general     = 1,
vax_doses_risk        = 2,
risk_group_acceptability = 0.88,
risk_group_accessibility = FALSE,
risk_group_age_broaden   = FALSE
)
vax_risk_strategy     = 'Y'
vax_risk_proportion   = risk_group_uniform_booster_proportion[[1]]
vax_doses_general     = 1
vax_doses_risk        = 2
risk_group_acceptability = 0.88
risk_group_accessibility = FALSE
risk_group_age_broaden   = FALSE
### WARNINGS
if (!vax_risk_strategy %in% c('Y','N')){stop('Is the vax strategy on or off? Y/N')}
if (vax_risk_proportion<0 | vax_risk_proportion>1){stop('vax_risk_proportion must be between 0-1 (0%-100%)')}
if (vax_risk_proportion == 0 & vax_risk_strategy == 'Y'){
warning("Giving 0% priority is not priority! I have overwritten vax_risk_strategy to EQ 'N'")
vax_risk_strategy = "N"
}
### BRANCH ONE: Are we prioritising the at risk group at all?
if (vax_risk_strategy == "N"){
#if not, let's use a simple function call
vaccination_history_FINAL =
vax_strategy(vax_strategy_start_date        = vax_strategy_toggles$vax_strategy_start_date,
vax_strategy_num_doses         = vax_strategy_toggles$vax_strategy_num_doses,
vax_strategy_roll_out_speed    = vax_strategy_toggles$vax_strategy_roll_out_speed,
vax_age_strategy               = vax_strategy_toggles$vax_age_strategy,
vax_delivery_group             = 'universal',
vax_dose_strategy              = vax_strategy_toggles$vax_dose_strategy,
vax_strategy_vaccine_type      = vax_strategy_toggles$vax_strategy_vaccine_type,
vax_strategy_vaccine_interval  = vax_strategy_toggles$vax_strategy_vaccine_interval,
vax_strategy_max_expected_cov  = vax_strategy_toggles$vax_strategy_max_expected_cov
)
return(vaccination_history_FINAL)  #ends the function here!
}
### BRANCH TWO: What % priority are the at risk group receiving?
if (risk_group_accessibility == FALSE){
speed_risk_group_rollout =  vax_strategy_toggles$vax_strategy_roll_out_speed* vax_risk_proportion
} else if (risk_group_accessibility == TRUE){
speed_risk_group_rollout = round(sum(pop_high_risk$pop)/(365/12*4.2)) #median first antenatal care visit
}
if (risk_group_age_broaden == TRUE){
save_age_strategy = vax_strategy_toggles$vax_age_strategy
vax_strategy_toggles$vax_age_strategy = 'uniform'
}
at_risk_delivery_outline = vax_strategy(vax_delivery_group = 'at_risk',
vax_dose_strategy              = vax_doses_risk,
vax_strategy_roll_out_speed    = speed_risk_group_rollout,
vax_strategy_max_expected_cov  = risk_group_acceptability,
vax_strategy_start_date        = vax_strategy_toggles$vax_strategy_start_date,
vax_strategy_num_doses         = vax_strategy_toggles$vax_strategy_num_doses,
vax_age_strategy               = vax_strategy_toggles$vax_age_strategy,
vax_strategy_vaccine_type      = vax_strategy_toggles$vax_strategy_vaccine_type,
vax_strategy_vaccine_interval  = vax_strategy_toggles$vax_strategy_vaccine_interval
)
vax_delivery_group = 'at_risk'
vax_dose_strategy              = vax_doses_risk
vax_strategy_roll_out_speed    = speed_risk_group_rollout
vax_strategy_max_expected_cov  = risk_group_acceptability
vax_strategy_start_date        = vax_strategy_toggles$vax_strategy_start_date
vax_strategy_num_doses         = vax_strategy_toggles$vax_strategy_num_doses
vax_age_strategy               = vax_strategy_toggles$vax_age_strategy
vax_strategy_vaccine_type      = vax_strategy_toggles$vax_strategy_vaccine_type
vax_strategy_vaccine_interval  = vax_strategy_toggles$vax_strategy_vaccine_interval
##### SETUP ###################################################################
### WARNINGS
if (vax_strategy_start_date <= max(vaccination_history_TRUE$date)){
warning ('Your hypothetical vaccine campaign start date needs to be in the future!')
}
if (!(vax_strategy_vaccine_type %in% c("Moderna","Pfizer","AstraZeneca","Johnson & Johnson","Sinopharm","Sinovac"))){
stop('pick a valid vaccine type, or check your spelling!')
}
if (vax_delivery_group != "universal" & num_risk_groups == 1){
warning("You need a risk group to have a risk strategy! We have overwritten vax_delivery_group = 'universal'")
vax_delivery_group = 'universal'
}
if (vax_dose_strategy - 1 > length(vax_strategy_vaccine_interval)){
stop('Please specify the interval between each vaccine dose!')
}
### IMPORTS
vax_strategy_vaccine_interval = round(vax_strategy_vaccine_interval)
prioritisation_csv <- read.csv("1_inputs/prioritisation.csv",header=TRUE)
if (vax_delivery_group %in% c('universal','general_public')){ this_risk_group = 'general_public'
} else if (vax_delivery_group == 'at_risk'){ this_risk_group = risk_group_name}
if (vax_delivery_group == 'universal'){ this_pop = data.frame(pop_setting)
} else if (vax_delivery_group == 'at_risk'){ this_pop = pop_risk_group_dn[pop_risk_group_dn$risk_group == risk_group_name,] %>% select(age_group,pop)
} else if (vax_delivery_group == 'general_public'){ this_pop = pop_risk_group_dn[pop_risk_group_dn$risk_group == 'general_public',] %>% select(age_group,pop)}
### IS THIS A BOOSTER?
booster_dose = "N"
vax_proportion_booster = 0
if (vax_dose_strategy == 3){booster_dose = "Y"}
if (vax_dose_strategy == 2 & vax_strategy_vaccine_type == "Johnson & Johnson"){booster_dose = "Y"}
if (booster_dose == "Y"){
booster_dose_number = vax_dose_strategy
num_vax_doses = booster_dose_number
booster_dose_interval = round(vax_strategy_vaccine_interval[vax_dose_strategy-1])
if (booster_dose_interval < 60){warning('Are you sure that there is less than 2 months between primary and booster doses?')}
### IF A BOOSTER WE NEED TO CONSIDER INDIVIDUALS WHO HAVE ALREADY RECIEVED PRIMARY DOSES
#what proportion of the 'at risk' population are untouched by the existing vaccination program?
workshop_cov = vaccination_history_TRUE %>% # current vaccine coverage in at risk
filter(date == max(vaccination_history_TRUE$date) &
risk_group == risk_group_name)
# pop touched by existing vaccination program
workshop_touched = workshop_cov %>%
filter(dose == 1)
workshop_touched = aggregate(workshop_touched$coverage_this_date, by = list(category = workshop_touched$age_group), FUN = sum)
colnames(workshop_touched) = c('age_group','cov')
#consideration of 'unreachable' % either for vaccine hesitancy or access
unreachable = 1-vax_strategy_max_expected_cov
workshop_pop_dn = workshop_touched %>%
left_join(this_pop, by = "age_group") %>%
mutate(pop_touched = pop*cov,
pop_untouched = pop - pop*unreachable - pop*cov)
# calculate proportion to booster / (booster + primary)
vax_proportion_booster = (sum(workshop_pop_dn$pop_touched))/(sum(workshop_pop_dn$pop_untouched)+ sum(workshop_pop_dn$pop_touched))   #NOTE: this is standard assumption of basis of population size
}
##### PRIMARY DOSES ###################################################################################################################################
#####(1/4) Calculate the eligible population ###################################
primary_rollout_speed = vax_strategy_roll_out_speed * (1-vax_proportion_booster)
booster_dose_number = vax_dose_strategy
num_vax_doses = booster_dose_number
booster_dose_interval = round(vax_strategy_vaccine_interval[vax_dose_strategy-1])
if (booster_dose_interval < 60){warning('Are you sure that there is less than 2 months between primary and booster doses?')}
### IF A BOOSTER WE NEED TO CONSIDER INDIVIDUALS WHO HAVE ALREADY RECIEVED PRIMARY DOSES
#what proportion of the 'at risk' population are untouched by the existing vaccination program?
workshop_cov = vaccination_history_TRUE %>% # current vaccine coverage in at risk
filter(date == max(vaccination_history_TRUE$date) &
risk_group == risk_group_name)
# pop touched by existing vaccination program
workshop_touched = workshop_cov %>%
filter(dose == 1)
workshop_touched = aggregate(workshop_touched$coverage_this_date, by = list(category = workshop_touched$age_group), FUN = sum)
colnames(workshop_touched) = c('age_group','cov')
# pop touched by existing vaccination program
workshop_touched = workshop_cov %>%
filter(dose == 1)
workshop_touched
workshop_cov
risk_group_name
vaccination_history_TRUE
unique(vaccination_history_TRUE$risk_group)
risk_group_name = "adults_with_comorbidities"
vaccination_history_booster =
apply_risk_strategy(vax_risk_strategy     = 'Y',
vax_risk_proportion   = risk_group_uniform_booster_proportion[[1]],
vax_doses_general     = 1,
vax_doses_risk        = 2,
risk_group_acceptability = 0.88,
risk_group_accessibility = FALSE,
risk_group_age_broaden   = FALSE
)
source("C:/Users/u6044061/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/(sensitivity)_vax_hest_pregnancy.R", echo=TRUE)
source("C:/Users/u6044061/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/(sensitivity)_vax_hest_pregnancy.R", echo=TRUE)
source("C:/Users/u6044061/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/(sensitivity)_vax_hest_pregnancy.R", echo=TRUE)
source("C:/Users/u6044061/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/(sensitivity)_vax_hest_pregnancy.R", echo=TRUE)
source("C:/Users/u6044061/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/(sensitivity)_vax_hest_pregnancy.R", echo=TRUE)
sensitivity_analysis_toggles
'vax_hesistancy_risk_group' %in% names(sensitivity_analysis_toggles)
write.csv(print,file=paste(rootpath,'x_results/table3',vax_strategy_toggles_CURRENT_TARGET$vax_strategy_vaccine_type,risk_group_name,'vax hest',time,'.csv',sep=''))
results_warehouse_entry[[4]]= print
### reset
risk_group_lower_cov_ratio = NA
sensitivity_analysis_toggles = list()
#________________________________________
current_coverage = c(sum(vaccination_history_POP$coverage_this_date[vaccination_history_POP$date == max(vaccination_history_POP$date) & vaccination_history_POP$dose ==1]),
sum(vaccination_history_POP$coverage_this_date[vaccination_history_POP$date == max(vaccination_history_POP$date) & vaccination_history_POP$dose ==2])) #COMEBACK - if J&J in use!
if ("Johnson & Johnson" %in% unique(vaccination_history_POP$vaccine_type)){warning('True vaccine coverage MUST consider J&J dose 1')}
save.image(file = paste(rootpath,"x_results/sensitivity_analysis_vax_hest_",Sys.Date(),".Rdata",sep=''))
source("C:/Users/u6044061/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/(sensitivity)_Pfizer.R", echo=TRUE)
source("C:/Users/u6044061/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/(sensitivity)_Pfizer.R", echo=TRUE)
