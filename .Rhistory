workshop = workshop %>%
left_join(pop_w, by = c("agegroup_RAW")) %>%
mutate(interim = RR*group_percent)
workshop_sum =  workshop %>%
group_by(outcome,agegroup_model) %>%
summarise(RR = sum(interim),.groups = "keep") %>%
rename(age_group = agegroup_model)
#check
workshop_sum = workshop_sum %>%
left_join(pop_setting, by = c("age_group")) %>%
mutate(interim =RR*pop_percent)
if(sum(workshop_sum$pop_percent) != length(unique(workshop_sum$outcome))){stop('ah!')}
#aggregate(workshop_sum$interim, by=list(category= workshop_sum$outcome), FUN=sum) #1! perfect!
age_distribution_RR =  workshop_sum %>%
select(outcome,age_group,RR)
rm(workshop_sum,workshop,pop_w)
### PART FOUR: RR * pop-level setting-specific estimates of severe outcomes ###########################
#NB: use severe_outcome_country_level (as sampled in part three)
sampled_value = mapply(rlnorm,1,delta_multiplier$lognorm_a, delta_multiplier$lognorm_b)
workshop_d = cbind(delta_multiplier,sampled_value)
workshop_d = workshop_d %>% select(outcome,multiplier = sampled_value)
sampled_value = mapply(runif,1,omicron_multiplier$LB, omicron_multiplier$UB)
workshop_o = cbind(omicron_multiplier,sampled_value)
workshop_o = workshop_o %>% select(outcome,multiplier = sampled_value)
variant_multiplier = workshop_d %>%
mutate(multiplier = case_when(
outcome == 'hosp' ~ multiplier*workshop_o$multiplier[workshop_o$outcome == 'hosp'],
outcome %in% c('ICU','death') ~ multiplier*workshop_o$multiplier[workshop_o$outcome == 'hosp_long'])) #ASSUMPTION: hosp_long proportional to ICU and death
severe_outcome_country_level = severe_outcome_country_level %>%
mutate(pop_est = case_when(
outcome == 'death' ~ pop_est * variant_multiplier$multiplier[variant_multiplier$outcome == 'death'],
outcome == 'severe_disease' ~ pop_est * variant_multiplier$multiplier[variant_multiplier$outcome == 'ICU'], #ASSUMPTION
outcome == 'hosp' ~ pop_est * variant_multiplier$multiplier[variant_multiplier$outcome == 'hosp']
)) %>%
left_join(age_distribution_RR, by = c('outcome')) %>%
mutate(pop_est = pop_est * RR)
# discounting_rate = 0
# #apply discounting using continuous approach, as per larson et al.
# if (discounting_rate >0){YLL_FINAL$life_expectancy = (1/discounting_rate)*(1-exp(-discounting_rate*YLL_FINAL$life_expectancy ))}
YLL_row = severe_outcome_country_level %>%
filter(outcome == 'death') %>%
mutate(outcome = 'YLL') %>%
left_join(YLL_FINAL, by = "age_group") %>%
mutate(pop_est = pop_est*YLL) %>%
select(-YLL)
severe_outcome_country_level = rbind(severe_outcome_country_level,YLL_row)
rm(workshop_d, workshop_o, sampled_value, variant_multiplier,YLL_row)
### PART FIVE: Initalise of VE ########################################################################
##NB: ALWAYS, assume lower VE in older adults and adults with comorbidities
#(1) Adjust so outcome_VE
severe_outcome_country_level = severe_outcome_country_level %>%
mutate(outcome_VE = case_when(
outcome %in% c('death','YLL') ~ 'death',
outcome %in% c('hosp','severe_disease') ~ 'severe_disease'
))
#(2) Load stochastic VE distirbution
#VE_waning_distribution_SO - sample UNIFORM from all point estimates, waning distribution, ratios between age groups etc.
VE_waning_distribution = stochastic_VE()
#(2) Load stochastic VE distirbution
#VE_waning_distribution_SO - sample UNIFORM from all point estimates, waning distribution, ratios between age groups etc.
VE_waning_distribution = stochastic_VE()
##### PART ONE: point estimates of primary schedule ####################################################################################
### (1/2) Inital estimates from IVAC living systematic review
######SAMPLE HERE
options(warn = -1 )
sampled_value = mapply(runif,1,raw_VE_point_est$lower_est, raw_VE_point_est$upper_est)
options(warn = 0)
sampled_value[is.nan(sampled_value)] = NA
VE_estimates = cbind(raw_VE_point_est,sampled_value)
VE_estimates$VE = VE_estimates$sampled_value
#######
#correct so J&J after Sinopharm primary = dose 2 (J&J booster)
VE_estimates$dose[VE_estimates$vaccine_type == 'Johnson & Johnson' & VE_estimates$primary_if_booster == "Sinopharm" & VE_estimates$outcome %in% c('severe_disease','death')] = 2
VE_estimates = VE_estimates  %>% select(strain, vaccine_type, dose, outcome,VE,lower_est,upper_est)
#(A/D) compare VE against death (where available) to VE against severe disease
#Not statistically significantly different to 1 in '(mech shop) VE primary doses point estimates'
#____________________
#(B/D) compare VE against any infection (where avaliable) to symptomatic disease
symptomatic_disease = VE_estimates[VE_estimates$outcome == 'symptomatic_disease',] %>%
select(strain,vaccine_type,dose,VE) %>%
rename(symptomatic_disease = VE)
any_infection = VE_estimates[VE_estimates$outcome == 'any_infection',] %>%
select(strain,vaccine_type,dose,VE) %>%
rename(any_infection = VE)
infection_sympt_ratio = symptomatic_disease %>%
left_join(any_infection, by = c("strain", "vaccine_type", "dose")) %>%
mutate(ratio = any_infection/symptomatic_disease) %>% group_by(strain) %>%
summarise(count = sum(is.na(ratio)),
mean = mean(ratio,na.rm=TRUE),
sd = sd(ratio,na.rm=TRUE),.groups = "keep")
#_________________________
#(C/D) compare VE against omicron (where avaliable) to delta
delta = VE_estimates[VE_estimates$strain == 'delta',] %>%
select(outcome,vaccine_type,dose,VE) %>%
rename(delta = VE)
omicron = VE_estimates[VE_estimates$strain == 'omicron',] %>%
select(outcome,vaccine_type,dose,VE) %>%
rename(omicron = VE)
delta_omicron_ratio = delta %>%
left_join(omicron, by = c("outcome", "vaccine_type", "dose")) %>%
mutate(ratio = omicron/delta) %>%
group_by(outcome) %>%
summarise(count = sum(is.na(ratio)),
mean = mean(ratio,na.rm=TRUE),
sd = sd(ratio,na.rm=TRUE),.groups = "keep")
delta_omicron_ratio$mean[delta_omicron_ratio$outcome == 'death'] = delta_omicron_ratio$mean[delta_omicron_ratio$outcome == 'severe_disease'] #since death is missing
#_________________________
#(D/D) dose one to two
dose_one = VE_estimates[VE_estimates$dose == 1,] %>%
select(strain,outcome,vaccine_type,VE) %>%
rename(dose_one = VE)
dose_two = VE_estimates[VE_estimates$dose == 2,] %>%
select(strain,outcome,vaccine_type,VE) %>%
rename(dose_two = VE)
dose_ratio =  dose_one %>%
left_join(dose_two, by = c("strain", "outcome", "vaccine_type")) %>%
mutate(ratio = dose_one/dose_two) %>%
group_by(outcome) %>%
summarise(count = sum(is.na(ratio)),
mean = mean(ratio,na.rm=TRUE),
sd = sd(ratio,na.rm=TRUE),.groups = "keep")
#___________________________________________________
### (2/2) Impute  values based on calculated ratios
workshop = VE_estimates %>%
mutate(source = case_when(
is.na(VE) == FALSE ~ 'literature',
TRUE ~ 'imputed'
))
#Step One: estimate dose one from dose two
for (s in unique(workshop$strain)){
for (t in unique(workshop$vaccine_type)){
for (o in unique(workshop$outcome)){
workshop_rows = workshop[workshop$strain == s & workshop$vaccine_type == t & workshop$outcome == o, ]
if (workshop_rows$source[workshop_rows$dose == 1] == "imputed" &
workshop_rows$source[workshop_rows$dose == 2] == "literature"){
estimate = workshop_rows$VE[workshop_rows$dose == 2] * dose_ratio$mean[dose_ratio$outcome == o]
workshop$VE[workshop$strain == s & workshop$vaccine_type == t & workshop$outcome == o & workshop$dose == 1] = estimate
workshop$source_extend[workshop$strain == s & workshop$vaccine_type == t & workshop$outcome == o & workshop$dose == 1] = "dose one estimated from dose two"
}
}
}
}
#Step Two: estimate severe_disease <-> death, and acquisition <-> symptomatic
#(A/B) severe_disease <-> death
#close enough to one, thus set equal
for (s in unique(workshop$strain)){
for (t in unique(workshop$vaccine_type)){
for (d in c(1,2)){
workshop_rows = workshop[workshop$strain == s & workshop$vaccine_type == t & workshop$dose == d & workshop$outcome %in% c('death','severe_disease'), ]
#severe_outcome -> death
if (workshop_rows$source[workshop_rows$outcome == 'death'] == "imputed" &
is.na(workshop_rows$source_extend[workshop_rows$outcome == 'death']) &
is.na(workshop_rows$VE[workshop_rows$outcome == 'severe_disease']) == FALSE){ #NOTE ASSUMPTION - may be imputing from already imputed value!!!
estimate = workshop_rows$VE[workshop_rows$outcome == 'severe_disease']
workshop$VE[workshop$strain == s & workshop$vaccine_type == t & workshop$outcome == 'death' & workshop$dose == d] = estimate
workshop$source_extend[workshop$strain == s & workshop$vaccine_type == t & workshop$outcome == 'death' & workshop$dose == d] = "death inferred from severe_disease"
}
#death -> severe_outcome
if (workshop_rows$source[workshop_rows$outcome == 'severe_disease'] == "imputed" &
is.na(workshop_rows$source_extend[workshop_rows$outcome == 'severe_disease']) &
is.na(workshop_rows$VE[workshop_rows$outcome == 'death']) == FALSE){ #NOTE ASSUMPTION - may be imputing from already imputed value!!!
estimate = workshop_rows$VE[workshop_rows$outcome == 'death']
workshop$VE[workshop$strain == s & workshop$vaccine_type == t & workshop$outcome == 'severe_disease' & workshop$dose == d] = estimate
workshop$source_extend[workshop$strain == s & workshop$vaccine_type == t & workshop$outcome == 'severe_disease' & workshop$dose == d] = "severe_disease inferred from death"
}
}
}
}
#(B/B) acquisition <-> symptomatic
for (s in unique(workshop$strain)){
for (t in unique(workshop$vaccine_type)){
for (d in c(1,2)){
workshop_rows = workshop[workshop$strain == s & workshop$vaccine_type == t & workshop$dose == d & workshop$outcome %in% c('any_infection','symptomatic_disease'), ]
#any infection -> symptomatic infection
if (workshop_rows$source[workshop_rows$outcome == 'any_infection'] == "imputed" &
is.na(workshop_rows$source_extend[workshop_rows$outcome == 'any_infection']) &
is.na(workshop_rows$VE[workshop_rows$outcome == 'symptomatic_disease']) == FALSE){ #NOTE ASSUMPTION - may be imputing from already imputed value!!!
estimate = workshop_rows$VE[workshop_rows$outcome == 'symptomatic_disease'] * infection_sympt_ratio$mean[infection_sympt_ratio$strain == s]
workshop$VE[workshop$strain == s & workshop$vaccine_type == t & workshop$outcome == 'any_infection' & workshop$dose == d] = estimate
workshop$source_extend[workshop$strain == s & workshop$vaccine_type == t & workshop$outcome == 'any_infection' & workshop$dose == d] = "any_infection inferred from symptomatic_disease"
}
#symptomatic infection -> any infection
if (workshop_rows$source[workshop_rows$outcome == 'symptomatic_disease'] == "imputed" &
is.na(workshop_rows$source_extend[workshop_rows$outcome == 'symptomatic_disease']) &
is.na(workshop_rows$VE[workshop_rows$outcome == 'any_infection']) == FALSE){ #NOTE ASSUMPTION - may be imputing from already imputed value!!!
estimate = workshop_rows$VE[workshop_rows$outcome == 'any_infection'] * 1/infection_sympt_ratio$mean[infection_sympt_ratio$strain == s]
workshop$VE[workshop$strain == s & workshop$vaccine_type == t & workshop$outcome == 'symptomatic_disease' & workshop$dose == d] = estimate
workshop$source_extend[workshop$strain == s & workshop$vaccine_type == t & workshop$outcome == 'symptomatic_disease' & workshop$dose == d] = "symptomatic_disease inferred from any_infection"
}
}
}
}
#Step Three: estimate omicron from delta
for (o in unique(workshop$outcome)){
for (t in unique(workshop$vaccine_type)){
for (d in c(1,2)){
workshop_rows = workshop[workshop$dose == d & workshop$vaccine_type == t & workshop$outcome == o, ]
if (workshop_rows$source[workshop_rows$strain == "omicron"] == "imputed" &
is.na(workshop_rows$source_extend[workshop_rows$strain == 'omicron']) &
is.na(workshop_rows$VE[workshop_rows$strain == 'delta']) == FALSE){
estimate = workshop_rows$VE[workshop_rows$strain == 'delta'] * delta_omicron_ratio$mean[delta_omicron_ratio$outcome == o]
workshop$VE[workshop$dose == d & workshop$vaccine_type == t & workshop$outcome == o & workshop$strain == "omicron"] = estimate
workshop$source_extend[workshop$dose == d & workshop$vaccine_type == t & workshop$outcome == o & workshop$strain == "omicron"] = "omicron estimated from delta"
}
}
}
}
if (nrow(workshop[is.na(workshop$VE) & workshop$dose < 3,])>0){stop('Some values to go!')}
VE_estimates_imputed = workshop %>%
mutate(vaccine_type_long = case_when(
vaccine_type == "AstraZeneca" ~ "AstraZeneca Vaxzevria (ChAdOx1)",
vaccine_type == "Johnson & Johnson" ~ "Johnson & Johnson Janssen (Ad26.COV2.S)",
vaccine_type == "Moderna" ~ "Moderna Spikevax (mRNA-1273)",
vaccine_type == "Pfizer" ~ "Pfizer-BioNTech Comirnaty (BNT162b2)",
vaccine_type == "Sinopharm" ~ "Sinopharm BIBP vaccine",
vaccine_type == "Sinovac" ~ "Sinovac Biotech CoronaVac"
),
vaccine_mode = case_when(
vaccine_type == 'Pfizer' ~ 'mRNA',
vaccine_type == 'Moderna' ~ 'mRNA',
vaccine_type == 'AstraZeneca' ~ 'viral',
vaccine_type == 'Sinopharm' ~ 'viral',
vaccine_type == 'Sinovac' ~ 'viral',
vaccine_type == 'Johnson & Johnson' ~ 'viral'
),
outcome_family = case_when(
outcome %in% c('any_infection','symptomatic_disease') ~ 'acquisition',
outcome %in% c('severe_disease','death') ~ 'severe_outcome'
))
##### PART TWO: point estimates for booster doses ##############################################################################################################
### (1/2) Inital estimates from IVAC living systematic review
booster_VE_point_est = raw_VE_point_est %>% #loaded in PART ONE
filter(dose == 3 & vaccine_type == 'Pfizer') %>%
select(strain, vaccine_type, primary_if_booster, outcome,VE,lower_est,upper_est) %>%
mutate(primary_if_booster_long = case_when(
primary_if_booster == "AstraZeneca" ~ "AstraZeneca Vaxzevria (ChAdOx1)",
primary_if_booster == "Johnson & Johnson" ~ "Johnson & Johnson Janssen (Ad26.COV2.S)",
primary_if_booster == "Moderna" ~ "Moderna Spikevax (mRNA-1273)",
primary_if_booster == "Pfizer" ~ "Pfizer-BioNTech Comirnaty (BNT162b2)",
primary_if_booster == "Sinopharm" ~ "Sinopharm BIBP vaccine",
primary_if_booster == "Sinovac" ~ "Sinovac Biotech CoronaVac"
))
######SAMPLE HERE
options(warn = -1 )
sampled_value = mapply(runif,1,booster_VE_point_est$lower_est, booster_VE_point_est$upper_est)
options(warn = 0)
sampled_value[is.nan(sampled_value)] = NA
VE_estimates = cbind(booster_VE_point_est,sampled_value)
VE_estimates$VE = VE_estimates$sampled_value
#Average across estimates from IVAC living systematic review
VE_estimates = VE_estimates %>%
select(strain, vaccine_type, primary_if_booster, outcome,VE) %>%
group_by(strain, vaccine_type, primary_if_booster, outcome) %>%
summarise(VE = sum(VE)/n(),.groups = "keep")
#Impute missing values based on previous analysis (NB:only 'any_infection' needs imputing)
imputed_rows = VE_estimates %>%
filter(outcome == 'symptomatic_disease' & (!primary_if_booster %in% unique(VE_estimates$primary_if_booster[VE_estimates$outcome == 'any_infection']))) %>%
mutate(VE = VE * infection_sympt_ratio$mean[infection_sympt_ratio$strain == 'omicron'],
outcome = 'any_infection')
VE_estimates = rbind(VE_estimates,imputed_rows)
#Save point estimate for booster doses
VE_booster_estimates = VE_estimates %>%
mutate(dose = 3,
vaccine_type_long = case_when(
vaccine_type == "AstraZeneca" ~ "AstraZeneca Vaxzevria (ChAdOx1)",
vaccine_type == "Johnson & Johnson" ~ "Johnson & Johnson Janssen (Ad26.COV2.S)",
vaccine_type == "Moderna" ~ "Moderna Spikevax (mRNA-1273)",
vaccine_type == "Pfizer" ~ "Pfizer-BioNTech Comirnaty (BNT162b2)",
vaccine_type == "Sinopharm" ~ "Sinopharm BIBP vaccine",
vaccine_type == "Sinovac" ~ "Sinovac Biotech CoronaVac"
),
vaccine_mode = case_when(
vaccine_type == 'Pfizer' ~ 'mRNA',
vaccine_type == 'Moderna' ~ 'mRNA',
vaccine_type == 'AstraZeneca' ~ 'viral',
vaccine_type == 'Sinopharm' ~ 'viral',
vaccine_type == 'Sinovac' ~ 'viral',
vaccine_type == 'Johnson & Johnson' ~ 'viral'
),
outcome_family = case_when(
outcome %in% c('any_infection','symptomatic_disease') ~ 'acquisition',
outcome %in% c('severe_disease','death') ~ 'severe_outcome'
))
#rm(list=ls())
raw <- raw_VE_severe_outcomes
######SAMPLE HERE
sampled_value = mapply(runif,1,raw$LB, raw$UB)
raw = cbind(raw,sampled_value)
raw$VE = raw$sampled_value
###(1/3) Predict distribution
predicted_distribution = data.frame()
plot_list = list()
for (j in 1:length(unique(raw$age_group))){
subplot_list = list()
for (i in 1: length(unique(raw$dose))){
workshop_real = raw[raw$dose == unique(raw$dose)[i] &
raw$age_group == unique(raw$age_group)[j],]
attach(workshop_real)
model = lm(VE~days)
#summary(model)
model_rsquared = summary(model)$adj.r.squared
detach(workshop_real)
rm(workshop_real)
time <- seq(0, 365)
workshop_predicted <- predict(model,list(days=time))
workshop_predicted = data.frame(cbind(days = time, VE = workshop_predicted))
workshop_predicted = workshop_predicted %>%
mutate(age_group = unique(raw$age_group)[j],
dose = unique(raw$dose)[i],
rsquared = model_rsquared )
predicted_distribution = rbind(predicted_distribution,workshop_predicted)
}
}
predicted_distribution = predicted_distribution %>% mutate(plot_label = paste(age_group,"(R squared",round(rsquared,digits=3)))
###(2/3) Apply predicted distributions
#(A) calculate internal
apply_distribution <- predicted_distribution %>%
mutate(outcome_family =  'severe_outcome') %>%
group_by(age_group,dose) %>%
mutate(VE_internal = VE / max(VE)) %>%
ungroup() %>%
select(dose,age_group,outcome_family,days,VE_internal)
#(B) Calculate ratio between age groups
workshop_overall = raw %>%
filter(age_group == 'overall') %>%
rename(VE_overall = VE) %>%
select(dose,days,VE_overall)
workshop_age = raw %>%
filter(! age_group == 'overall') %>%
left_join(workshop_overall, by = c('dose','days')) %>%
mutate(VE_overall = VE/VE_overall)
apply_ratio = workshop_age %>% filter(days == 22) %>% rename(VE_ratio = VE_overall,agegroup_RAW = age_group) %>% select(dose,agegroup_RAW,VE_ratio)
#(C) Convert ratio to age groups in model
CS_age_groupings = c(0,59,79,110) #age groupings in VE estimate data
pop_RAW <- pop_estimates %>%
mutate(agegroup_RAW = cut(age,breaks = CS_age_groupings, include.lowest = T, labels = unique(apply_ratio$agegroup_RAW)),
agegroup_MODEL = cut(age,breaks = age_groups_num, include.lowest = T, labels = age_group_labels)) %>%
ungroup() %>%
group_by(agegroup_MODEL) %>%
mutate(model_group_percent = population/sum(population))
apply_ratio_MODEL = pop_RAW %>% left_join(apply_ratio) %>%
mutate(interim = model_group_percent * VE_ratio) %>%
group_by(dose,agegroup_MODEL) %>%
summarise(VE_ratio = sum(interim),.groups = "keep") %>%
rename(age_group = agegroup_MODEL) %>%
arrange(dose) %>%
mutate(schedule = case_when(
dose > 2 ~ 'booster',
TRUE ~ 'primary'
))  %>%
ungroup() %>%
select(-dose)
apply_ratio_MODEL = pop_RAW %>%
left_join(apply_ratio, by = "agegroup_RAW") %>%
mutate(interim = model_group_percent * VE_ratio) %>%
group_by(dose,agegroup_MODEL) %>%
summarise(VE_ratio = sum(interim),.groups = "keep") %>%
rename(age_group = agegroup_MODEL) %>%
arrange(dose) %>%
mutate(schedule = case_when(
dose > 2 ~ 'booster',
TRUE ~ 'primary'
))  %>%
ungroup() %>%
select(-dose)
workshop = apply_distribution %>%
rename(agegroup_RAW = age_group)
workshop = pop_RAW %>% left_join(workshop) %>%
mutate(interim = model_group_percent * VE_internal) %>%
group_by(dose,agegroup_MODEL,days) %>%
summarise(VE_internal = sum(interim),.groups = "keep") %>%
rename(age_group = agegroup_MODEL)
apply_distribution_MODEL = workshop %>% arrange(dose)  %>%
mutate(schedule = case_when(
dose > 2 ~ 'booster',
TRUE ~ 'primary' #copy dose 2 for dose 1
)) %>%
ungroup() %>%
select(-dose)
workshop = pop_RAW %>% left_join(workshop) %>%
mutate(interim = model_group_percent * VE_internal) %>%
group_by(dose,agegroup_MODEL,days) %>%
summarise(VE_internal = sum(interim),.groups = "keep") %>%
rename(age_group = agegroup_MODEL)
workshop = apply_distribution %>%
rename(agegroup_RAW = age_group)
workshop = pop_RAW %>% left_join(workshop) %>%
mutate(interim = model_group_percent * VE_internal) %>%
group_by(dose,agegroup_MODEL,days) %>%
summarise(VE_internal = sum(interim),.groups = "keep") %>%
rename(age_group = agegroup_MODEL)
source("C:/Users/u6044061/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/(antiviral)(function) stochastic_VE.R", echo=TRUE)
#(2) Load stochastic VE distirbution
#VE_waning_distribution_SO - sample UNIFORM from all point estimates, waning distribution, ratios between age groups etc.
VE_waning_distribution = stochastic_VE()
#(3) Calculate VE against severe outcome by day
VE_tracker = data.frame()
num_time_steps
system.time({VE_time_step(strain_now,date_start+day,outcome)})
0.15*2*365
#(1) load VE_distribution
VE_distribution <- VE_waning_distribution[VE_waning_distribution$outcome == outcome &
VE_waning_distribution$strain == strain_now,]
#(1) load VE_distribution
VE_distribution <- VE_waning_distribution[VE_waning_distribution$outcome == outcome &
VE_waning_distribution$strain == strain_now,]
if (strain_now == 'WT'){
VE_distribution <- VE_waning_distribution[VE_waning_distribution$outcome == outcome &
VE_waning_distribution$strain == 'delta',]
}
if ('VE_older_adults' %in% names(sensitivity_analysis_toggles)){
if ('age_group' %in% colnames(VE_distribution)){
if (length(unique(VE_distribution$age_group)) == 1){
VE_distribution = VE_distribution %>% ungroup() %>% select(-age_group)
}
}
}
#(2) doses delivered to this date
vax_to_this_date <- vaccination_history_FINAL[vaccination_history_FINAL$date <= date_now,]
if (nrow(vaccination_history_FINAL[vaccination_history_FINAL$dose == 8,])>0){
booster_type = unique(vaccination_history_FINAL$vaccine_type[vaccination_history_FINAL$dose == 8])
vaccination_history_FINAL[vaccination_history_FINAL$dose == 8,]
if (booster_type == 'Johnson & Johnson'){
booster_dose_number = 2
} else{
booster_dose_number = 3
}
vax_to_this_date = vax_to_this_date %>% mutate(
dose = case_when(
dose == 8 ~ booster_dose_number,
TRUE ~ dose
))
}
vax_to_this_date <- vax_to_this_date %>%
select(risk_group,vaccine_type,dose,date,age_group,doses_delivered_this_date) %>%
rename(doses = doses_delivered_this_date)
total_doses_up_to_this_date <- vax_to_this_date %>%
group_by(risk_group,vaccine_type,dose,age_group) %>%
summarise(total_delivered = sum(doses),.groups = "keep")
vax_to_this_date <- vax_to_this_date %>%
left_join(total_doses_up_to_this_date, by = c("risk_group", "vaccine_type", "dose", "age_group")) %>%
mutate(prop = case_when(
total_delivered >0 ~ doses/total_delivered,
total_delivered == 0 ~ 0
),
days = as.numeric(date_now - date ))
#<interlude> to add together all days >365 to 365
meddling <- vax_to_this_date[vax_to_this_date$days > 364,]
if(length(unique(meddling$days))>1){
meddling <- meddling %>%
group_by(risk_group,vaccine_type,dose,age_group) %>%
summarise(prop = sum(prop),.groups = "keep") %>%
mutate(days=365)
vax_to_this_date <- rbind(vax_to_this_date[vax_to_this_date$days<365,c(colnames(meddling))],
meddling)
}
meddling
#(3) Bring VE d'n and AIR history together
if ('age_group' %in% colnames(VE_distribution) ){
workshop <- vax_to_this_date %>%
left_join(VE_distribution, by = c("vaccine_type", "dose", "days",'age_group')) %>%
select(risk_group,vaccine_type,dose,days,age_group,VE_days,prop) %>%
mutate(VE_weighted = VE_days*prop)
} else{
workshop <- vax_to_this_date %>%
left_join(VE_distribution, by = c("vaccine_type", "dose", "days")) %>%
select(risk_group,vaccine_type,dose,days,age_group,VE_days,prop) %>%
mutate(VE_weighted = VE_days*prop)
}
#(4) Aggregate to estimate population VE for doses
workshop <- workshop %>%
group_by(risk_group,dose,vaccine_type,age_group) %>%
summarise(VE = sum(VE_weighted),.groups = "keep")
if(nrow(workshop[round(workshop$VE,digits=2)>1,])){stop('VE > 1!')}
#<interim> add none covered vaccines
if (exists("vax_type_list") == FALSE){ vax_type_list =unique(vaccination_history_FINAL$vaccine_type)}
if (exists("age_group_labels") == FALSE){ age_group_labels =unique(vaccination_history_FINAL$age_group)}
if (exists("num_vax_doses") == FALSE){ num_vax_doses = length(unique(vaccination_history_FINAL$dose[vaccination_history_FINAL$dose != 8]))}
if (exists("risk_group_labels") == FALSE){ risk_group_labels =unique(vaccination_history_FINAL$risk_group)}
for (t in 1:length(vax_type_list)){
for (i in 1:length(age_group_labels)){
for (d in 1:num_vax_doses){
for (r in 1:length(risk_group_labels)){
this_vax = vax_type_list[t]
if (!( this_vax %in% unique(workshop$vaccine_type[workshop$risk_group == risk_group_labels[r] & workshop$dose == d & workshop$age_group == age_group_labels[i]]))){
workshop2 = crossing(risk_group = risk_group_labels[r],
dose = d,
vaccine_type = this_vax,
age_group = age_group_labels[i],
VE =0)
workshop = rbind(workshop,workshop2)
}
}
}
}
}
workshop[is.na(workshop)] <-0
VE_tidy = workshop
system.time({for (outcome in c('death','severe_disease')){
for (day in 0:num_time_steps){
workshop = VE_time_step(strain_now,date_start+day,outcome)
workshop = workshop %>% mutate(date=day,
outcome_VE=outcome)
VE_tracker = rbind(VE_tracker,workshop)
}
}})
226/60
Sys.time()
time = Sys.time()
time = gsub(':','-',time)
source("C:/Users/u6044061/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/(antiviral)(plot) outcomes averted by vax vs antiviral.R", echo=TRUE)
source("C:/Users/u6044061/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/(antiviral)(plot) outcomes averted by vax vs antiviral.R", echo=TRUE)
