#       (4/4) Basic plots
# ####################################################################
# NOTE: more advanced plots in scripts title '(plot)_...'
if (ticket ==1){
#raw number - daily and cumulative
plot1 <- ggplot() +
geom_line(data=incidence_log,aes(x=date,y=rolling_average),na.rm=TRUE) +
geom_point(data=case_history[case_history$date>date_start & case_history$date <max(incidence_log$date),],
aes(x=date,y=rolling_average*underascertainment_est),na.rm=TRUE) +
xlab("") +
scale_x_date(date_breaks="1 month", date_labels="%b") +
ylab("daily cases") +
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
axis.line = element_line(color = 'black'))
plot2 <- ggplot() +
geom_line(data=incidence_log,aes(x=date,y=cumulative_incidence),na.rm=TRUE) +
xlab("") +
scale_x_date(date_breaks="1 month", date_labels="%b") +
ylab("cumulative cases") +
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
axis.line = element_line(color = 'black'))
#grid.arrange(plot1, plot2, nrow=2)
#number as % of whole population
lay <- rbind(c(1,2),c(3,3))
plot1 <-
ggplot() +
geom_line(data=incidence_log,aes(x=date,y=rolling_average_percentage),na.rm=TRUE) +
geom_point(data=case_history[case_history$date>date_start & case_history$date <max(incidence_log$date),],
aes(x=date,y=rolling_average*100*underascertainment_est/sum(pop)),na.rm=TRUE) +
xlab("") +
scale_x_date(date_breaks="1 month", date_labels="%b") +
ylab("daily cases % whole pop") +
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
axis.line = element_line(color = 'black'))
plot2 <- ggplot() +
geom_line(data=incidence_log,aes(x=date,y=Reff),na.rm=TRUE) +
xlab("") +
scale_x_date(date_breaks="1 month", date_labels="%b") +
#ylim(0,6) +
ylab("Reff") +
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
axis.line = element_line(color = 'black'))
plot3<- ggplot() +
geom_line(data=incidence_log,aes(x=date,y=cumulative_incidence_percentage),na.rm=TRUE) +
xlab("") +
scale_x_date(date_breaks="1 month", date_labels="%b") +
ylab("cumulative cases % whole pop") +
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
axis.line = element_line(color = 'black'))
if (debug == "on"){
plot4 = ggplot(rho_tracker_dataframe) + geom_line(aes(x=date,y=rho))
plot5 = ggplot(VE_tracker_dataframe) + geom_line(aes(x=date,y=VE,color=as.factor(dose)))
lay <- rbind(c(1,2),c(3,3),c(4,5))
grid.arrange(plot1, plot2, plot3,plot4,plot5, layout_matrix = lay)
} else{
grid.arrange(plot1, plot2, plot3, layout_matrix = lay)
}
}
#####(6/7) Multiplying severe outcomes by VE
#(A/C) calculate VE against severe outcomes by day
if (ticket == 1 | vax_strategy_toggle == "on"){ #only have to run when vax strategy changing
VE_tracker = data.frame()
for (outcome in c('death','severe_disease')){
for (day in 1:(model_weeks*7) ){
workshop = VE_time_step(strain_inital,date_start+day,outcome)
workshop = workshop %>% mutate(date=day,
outcome_VE=outcome)
VE_tracker = rbind(VE_tracker,workshop)
}
}
VE_tracker$date = date_start + VE_tracker$date
workshop = crossing(dose = 0,
risk_group = risk_group_labels,
vaccine_type = "unvaccinated",
age_group = age_group_labels,
VE = 0,
date = unique(VE_tracker$date),
outcome_VE=unique(VE_tracker$outcome))
VE_tracker = rbind(VE_tracker,workshop)
}
VE_time_step(strain_inital,date_start+day,outcome)
View(VE_tracker)
unique(VE_estimates_imputed$outcome)
#
#   workshop = crossing(dose = 0,
#                       risk_group = risk_group_labels,
#                       vaccine_type = "unvaccinated",
#                       age_group = age_group_labels,
#                       VE = 0,
#                       date = unique(VE_tracker$date),
#                       outcome_VE=unique(VE_tracker$outcome))
#   VE_tracker = rbind(VE_tracker,workshop)
# }
VE_tracker= crossing(risk_group = risk_group_labels,
dose = seq(1,D),
vaccine_type = vax_type_list,
age_group = age_group_labels,
date = unique(incidence_log$date),
outcome_VE = c('death','severe_disease'))
colnames(VE_estimates_imputed)
strain_now
workshop = VE_estimates_imputed %>% filter(strain = strain_now) %>% select(vaccine_type,dose,outcome,VE)
workshop = VE_estimates_imputed %>% filter(strain == strain_now) %>% select(vaccine_type,dose,outcome,VE)
workshop
workshop = VE_estimates_imputed %>% filter(strain == strain_now) %>%
select(vaccine_type,dose,outcome,VE) %>% mutate(VE=VE/100)
workshop
VE_tracker = VE_tracker %>% left_join(workshop)
#
#   workshop = crossing(dose = 0,
#                       risk_group = risk_group_labels,
#                       vaccine_type = "unvaccinated",
#                       age_group = age_group_labels,
#                       VE = 0,
#                       date = unique(VE_tracker$date),
#                       outcome_VE=unique(VE_tracker$outcome))
#   VE_tracker = rbind(VE_tracker,workshop)
# }
VE_tracker= crossing(risk_group = risk_group_labels,
dose = seq(1,D),
vaccine_type = vax_type_list,
age_group = age_group_labels,
date = unique(incidence_log$date),
outcome = c('death','severe_disease'))
workshop = VE_estimates_imputed %>% filter(strain == strain_now) %>%
select(vaccine_type,dose,outcome,VE) %>% mutate(VE=VE/100)
VE_tracker = VE_tracker %>% left_join(workshop)
#(B/C)
load(file = '1_inputs/severe_outcome_FINAL.Rdata') #adjusted values from Qatar
if (risk_group_toggle == "on"){
severe_outcomes_list = unique(severe_outcome_FINAL$outcome)
severe_outcome_FINAL_wRisk = data.frame()
for (o in 1:length(severe_outcomes_list)){
this_outcome = severe_outcomes_list[o]
for (i in 1:num_age_groups){
this_age = age_group_labels[i]
row = severe_outcome_FINAL %>% filter(outcome == this_outcome & age_group == this_age)
IR = row$percentage
P = pop_setting$pop[pop_setting$age_group == this_age]
P_general = pop_risk_group_dn$pop[pop_risk_group_dn$risk_group == 'general_public' & pop_risk_group_dn$age_group == this_age]
P_risk = pop_risk_group_dn$pop[pop_risk_group_dn$risk_group == risk_group_name & pop_risk_group_dn$age_group == this_age]
if (P != (P_general+P_risk)){stop('Line 15 P_general + P_risk != P_overall')}
IR_gen = ((IR*P)/((RR_estimate*P_risk)/P_general +1))/P_general
IR_risk = ((IR*P)/(P_general/(RR_estimate*P_risk) +1))/P_risk
row_gen = row %>% mutate(percentage = IR_gen,risk_group = 'general_public')
row_risk = row %>% mutate(percentage = IR_risk,risk_group = risk_group_name)
severe_outcome_FINAL_wRisk = rbind(severe_outcome_FINAL_wRisk,row_gen,row_risk)
}
}
severe_outcome_FINAL_wRisk$percentage[is.na(severe_outcome_FINAL_wRisk$percentage)]=0
severe_outcome_FINAL = severe_outcome_FINAL_wRisk
}
#(C/C) calculate severe outcome incidence by vax_status
severe_outcome_this_run = severe_outcome_FINAL %>% left_join(VE_tracker) %>%
mutate(percentage = percentage*(1-VE)) %>%
select(date,outcome,outcome_long,age_group,risk_group,vaccine_type,dose,percentage)
time.end=proc.time()[[3]]
source(paste(getwd(),"/(function)_severe_outcome_proj.R",sep=""))
View(severe_outcome_FINAL)
#
#   workshop = crossing(dose = 0,
#                       risk_group = risk_group_labels,
#                       vaccine_type = "unvaccinated",
#                       age_group = age_group_labels,
#                       VE = 0,
#                       date = unique(VE_tracker$date),
#                       outcome_VE=unique(VE_tracker$outcome))
#   VE_tracker = rbind(VE_tracker,workshop)
# }
VE_tracker= crossing(risk_group = risk_group_labels,
dose = seq(1,D),
vaccine_type = vax_type_list,
age_group = age_group_labels,
date = unique(incidence_log$date),
outcome_VE = c('death','severe_disease'))
workshop = VE_estimates_imputed %>% filter(strain == strain_now) %>%
select(vaccine_type,dose,outcome,VE) %>% mutate(VE=VE/100) %>%
rename(outcome_VE = outcome)
VE_tracker = VE_tracker %>% left_join(workshop)
#(B/C)
load(file = '1_inputs/severe_outcome_FINAL.Rdata') #adjusted values from Qatar
if (risk_group_toggle == "on"){
severe_outcomes_list = unique(severe_outcome_FINAL$outcome)
severe_outcome_FINAL_wRisk = data.frame()
for (o in 1:length(severe_outcomes_list)){
this_outcome = severe_outcomes_list[o]
for (i in 1:num_age_groups){
this_age = age_group_labels[i]
row = severe_outcome_FINAL %>% filter(outcome == this_outcome & age_group == this_age)
IR = row$percentage
P = pop_setting$pop[pop_setting$age_group == this_age]
P_general = pop_risk_group_dn$pop[pop_risk_group_dn$risk_group == 'general_public' & pop_risk_group_dn$age_group == this_age]
P_risk = pop_risk_group_dn$pop[pop_risk_group_dn$risk_group == risk_group_name & pop_risk_group_dn$age_group == this_age]
if (P != (P_general+P_risk)){stop('Line 15 P_general + P_risk != P_overall')}
IR_gen = ((IR*P)/((RR_estimate*P_risk)/P_general +1))/P_general
IR_risk = ((IR*P)/(P_general/(RR_estimate*P_risk) +1))/P_risk
row_gen = row %>% mutate(percentage = IR_gen,risk_group = 'general_public')
row_risk = row %>% mutate(percentage = IR_risk,risk_group = risk_group_name)
severe_outcome_FINAL_wRisk = rbind(severe_outcome_FINAL_wRisk,row_gen,row_risk)
}
}
severe_outcome_FINAL_wRisk$percentage[is.na(severe_outcome_FINAL_wRisk$percentage)]=0
severe_outcome_FINAL = severe_outcome_FINAL_wRisk
}
#(C/C) calculate severe outcome incidence by vax_status
severe_outcome_this_run = severe_outcome_FINAL %>% left_join(VE_tracker) %>%
mutate(percentage = percentage*(1-VE)) %>%
select(date,outcome,outcome_long,age_group,risk_group,vaccine_type,dose,percentage)
time.end=proc.time()[[3]]
source(paste(getwd(),"/(function)_severe_outcome_proj.R",sep=""))
#       (4/4) Basic plots
# ####################################################################
# NOTE: more advanced plots in scripts title '(plot)_...'
if (ticket ==1){
#raw number - daily and cumulative
plot1 <- ggplot() +
geom_line(data=incidence_log,aes(x=date,y=rolling_average),na.rm=TRUE) +
geom_point(data=case_history[case_history$date>date_start & case_history$date <max(incidence_log$date),],
aes(x=date,y=rolling_average*underascertainment_est),na.rm=TRUE) +
xlab("") +
scale_x_date(date_breaks="1 month", date_labels="%b") +
ylab("daily cases") +
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
axis.line = element_line(color = 'black'))
plot2 <- ggplot() +
geom_line(data=incidence_log,aes(x=date,y=cumulative_incidence),na.rm=TRUE) +
xlab("") +
scale_x_date(date_breaks="1 month", date_labels="%b") +
ylab("cumulative cases") +
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
axis.line = element_line(color = 'black'))
#grid.arrange(plot1, plot2, nrow=2)
#number as % of whole population
lay <- rbind(c(1,2),c(3,3))
plot1 <-
ggplot() +
geom_line(data=incidence_log,aes(x=date,y=rolling_average_percentage),na.rm=TRUE) +
geom_point(data=case_history[case_history$date>date_start & case_history$date <max(incidence_log$date),],
aes(x=date,y=rolling_average*100*underascertainment_est/sum(pop)),na.rm=TRUE) +
xlab("") +
scale_x_date(date_breaks="1 month", date_labels="%b") +
ylab("daily cases % whole pop") +
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
axis.line = element_line(color = 'black'))
plot2 <- ggplot() +
geom_line(data=incidence_log,aes(x=date,y=Reff),na.rm=TRUE) +
xlab("") +
scale_x_date(date_breaks="1 month", date_labels="%b") +
#ylim(0,6) +
ylab("Reff") +
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
axis.line = element_line(color = 'black'))
plot3<- ggplot() +
geom_line(data=incidence_log,aes(x=date,y=cumulative_incidence_percentage),na.rm=TRUE) +
xlab("") +
scale_x_date(date_breaks="1 month", date_labels="%b") +
ylab("cumulative cases % whole pop") +
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
axis.line = element_line(color = 'black'))
if (debug == "on"){
plot4 = ggplot(rho_tracker_dataframe) + geom_line(aes(x=date,y=rho))
plot5 = ggplot(VE_tracker_dataframe) + geom_line(aes(x=date,y=VE,color=as.factor(dose)))
lay <- rbind(c(1,2),c(3,3),c(4,5))
grid.arrange(plot1, plot2, plot3,plot4,plot5, layout_matrix = lay)
} else{
grid.arrange(plot1, plot2, plot3, layout_matrix = lay)
}
}
max(case_history$date)
baseline_date_start = as.Date('2022-06-01')
if(outbreak_post_rollout == "on"){
date_start = max(vaccination_history_FINAL$date)
seed_date = baseline_date_start
}else if(outbreak_post_rollout == "off"){ #i.e. rolling out vaccine during outbreak
date_start = baseline_date_start
seed_date = baseline_date_start
}
date_start > max(case_history$date)
initialRecovered
initialRecovered = seroprev %>% left_join(pop_setting) %>% mutate(R = seroprev*pop/100) %>%
select(age_group,R)
recovered_risk = initialRecovered %>% left_join(risk_dn) %>%
mutate(risk_group = risk_group_name,
R = R*prop) %>%
select(risk_group,age_group,R)
recovered_general_public   = initialRecovered %>% left_join(risk_dn) %>%
mutate(risk_group = 'general_public',
R = R*(1-prop)) %>%
select(risk_group,age_group,R)
initialRecovered = rbind(recovered_general_public,recovered_risk)
initialRecovered
View(case_history)
initialRecovered = seroprev %>% left_join(pop_setting) %>% mutate(R = seroprev*pop/100) %>%
select(age_group,R)
initialRecovered
workshop = sum(initalRecovered$R)
workshop = sum(initialRecovered$R)
workshop
time = seq(date_start-lengthInfectionDerivedImmunity,date_start)
time = seq(1,365)
time = date_start - time
time
workshop = as.data.frame(time)
date = seq(1,365)
date = date_start - date
workshop = as.data.frame(date)
workshop$daily_cases = sum(initialRecovered$R)
View(workshop)
date = seq(1,lengthInfectionDerivedImmunity)
date = date_start - date
workshop = as.data.frame(date)
workshop$daily_cases = sum(initialRecovered$R)/lengthInfectionDerivedImmunity
#       (1/4) Setup
####################################################################
#load libraries
library(readr)
library(deSolve)
library(rvest)
library(ggplot2)
library(gridExtra)
library(ggpubr)
library(tidyverse)
debug = "on"
#rm(list=ls())  # clear global environment
if (Sys.info()[['user']] == 'u6044061'){ rootpath = 'C:/Users/u6044061/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/'
}else if (Sys.info()[['user']] == 'gizem'){ rootpath = 'C:/Users/gizem/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/'}
#_________________________________________________________________
#       (2/4) User choice / Model toggles
####################################################################
setting = "SLE"
baseline_date_start = as.Date('2022-06-01')
if(outbreak_post_rollout == "on"){
date_start = max(vaccination_history_FINAL$date)
seed_date = baseline_date_start
}else if(outbreak_post_rollout == "off"){ #i.e. rolling out vaccine during outbreak
date_start = baseline_date_start
seed_date = baseline_date_start
}
strain_inital = 'omicron'             #options:'WT','delta','omicron'
model_weeks = 52          # how many weeks should the model run for?
complete_model_runs = 1   # when >1 samples randomly from distribution of parameters (where available)
#vax_strategy_toggle = "on"
# vax_strategy_toggles =
#   list(vax_strategy_start_date                  = as.Date('2022-08-20'),
#        vax_strategy_num_doses         = 2090592,
#        vax_strategy_roll_out_speed    = 11075 ,               # doses delivered per day
#        vax_delivery_group             = 'universal',
#        vax_age_strategy               = "uniform_no_children",            # options: "oldest", "youngest","50_down","uniform", OTHER?
#        vax_dose_strategy              = 1,                    # options: 1,2
#        vax_strategy_vaccine_type      = "Johnson & Johnson" ,            # options: "Moderna","Pfizer","AstraZeneca","Johnson & Johnson","Sinopharm","Sinovac"
#        vax_strategy_vaccine_interval  = 7*3 ,                 # (days) interval between first and second dose
#        vax_strategy_max_expected_cov  = 0.88                   # value between 0-1 of age group willing to be vaccinated (vaccine hesitancy est in discussion)
#   )
#RR_estimate = 2
#risk_group_toggle = "off"
#risk_group_name = "adults_with_comorbidities" #options: pregnant_women, adults_with_comorbidities
#vax_risk_strategy_toggle = "off"
#waning_toggle_rho_acqusition = TRUE
#rho_severe_disease = "on"
NPI_outbreak_toggle = "delta_peaks"   #options: final, delta_peaks
underascertainment_est = 43
behaviour_mod = 0  #0.268 if start 01/03/21
uniform_mod=1
#__________________________________________________________________
#       (3/4) Run model
# ####################################################################
##(A) Simulate setting
# time saving tactics! Load setting if not yet loaded
if (complete_model_runs == 1){run_type="point"
} else if (complete_model_runs > 1){run_type="rand"}
if (setting == "PNG"){setting_long = "Papua New Guinea"
} else if (setting == "SLE"){setting_long = "Sierra Leone"}
if (risk_group_toggle == "on"){
num_risk_groups = 2
} else{ num_risk_groups = 1; vax_risk_strategy_toggle = "off"}
num_disease_classes = 4                                 # SEIR
if (exists("prev_setting") == FALSE){ prev_setting = "NONE"}
if (exists("prev_risk_num") == FALSE){ prev_risk_num = "NONE"}
if (exists("prev_risk_group") == FALSE){ prev_risk_group = "NONE"}
if (setting != prev_setting | num_risk_groups != prev_risk_num | risk_group_name != prev_risk_group){source(paste(getwd(),"/(1)_simulate_setting.R",sep=""))} #load setting stats if new setting
prev_setting = setting
prev_risk_num = num_risk_groups
prev_risk_group = risk_group_name
seed = 0.001*sum(pop)
#making some interim variables to assist with configuring states
num_vax_doses = D = length(unique(vaccination_history_TRUE$dose))  # dose 1, dose 2, COMEBACK no boosters yet in these settings
vax_type_list = sort(unique(vaccination_history_TRUE$vaccine_type))
num_vax_types = T = length(unique(vaccination_history_TRUE$vaccine_type))
num_vax_classes = num_vax_doses*num_vax_types + 1                 # + 1 for unvaccinated
##(B) Load functions
source(paste(getwd(),"/(function)_COVID_ODE.R",sep=""))
source(paste(getwd(),"/(function)_VE_time_step.R",sep=""))
source(paste(getwd(),"/(function)_rho_time_step.R",sep=""))
source(paste(getwd(),"/(function)_vax_strategies.R",sep=""))
source(paste(getwd(),"/(function)_vax_strategies_risk.R",sep=""))
source(paste(getwd(),"/(3)_disease_characteristics.R",sep=""))
source(paste(getwd(),"/(2)_inital_state.R",sep=""))
source("C:/Users/u6044061/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/CommandDeck.R", echo=TRUE)
source("C:/Users/u6044061/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/FleetAdmiral.R", echo=TRUE)
waning_shape_plot_list = ggplot() +
geom_line(data=waning_to_plot[waning_to_plot$strain == strain_test,],
aes(x=days,y=VE_days,color=as.factor(immunity)),na.rm=TRUE) +
labs(title=(paste("Waning of VE against infection","(",strain_test,")"))) +
xlab("days since vaccination") +
ylab("% max protection") +
ylim(0,1)+
theme_bw() +
theme(panel.grid.major = element_blank(),panel.grid.minor = element_blank())
6615/60/60
save.image(file = paste("x_results/complete_model_run_",Sys.Date(),".Rdata",sep=''))
time = Sys.time()
time = gsub(':','-',time)
file_name = paste( "x_results/Vaccine allocation project results",time)
file_name = gsub(' ','_',file_name)
library(rmarkdown); library(tinytex)
render('results_report_compiler_v2.Rmd',output_file = file_name)
source("C:/Users/u6044061/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/SpecialityMedic.R", echo=TRUE)
ticket
#reinfection ratio
exposed_log = exposed_log_tidy %>% ungroup() %>% pivot_wider(
id_cols = c(date,age_group),
names_from = infection_type,
values_from = exposed)
View(exposed_log_tidy)
workshop = subset(exposed_log, select = -c(time))
workshop = pivot_longer(
workshop,
cols = colnames(workshop)[1]:colnames(workshop)[2*J],
names_to = 'temp',
values_to = 'exposed'
)
exposed_log = sol_log_unedited %>%
select(1, (skip + 2):(skip + 2*J + 1))
View(exposed_log)
exposed_log = exposed_log %>%
filter (time %% time_step == 0, rowSums(exposed_log) != time) %>%
mutate(date =  date_start + time)
workshop = subset(exposed_log, select = -c(time))
workshop = pivot_longer(
workshop,
cols = colnames(workshop)[1]:colnames(workshop)[2*J],
names_to = 'temp',
values_to = 'exposed'
)
View(workshop)
length(sol_log_unedited)
(num_disease_classes+1)*(num_age_groups*num_vax_classes)
(num_disease_classes+1)*(num_age_groups*num_vax_classes)*RISK
### EXPOSED LOG TIDY
skip = (num_disease_classes+1)*(num_age_groups*num_vax_classes)*RISK
exposed_log = sol_log_unedited %>%
select(1, (skip + 2):(skip + 2*J + 1))
colnames(sol_log_unedited)
exposed_log = exposed_log %>%
filter (time %% time_step == 0, rowSums(exposed_log) != time) %>%
mutate(date =  date_start + time)
workshop = subset(exposed_log, select = -c(time))
workshop = pivot_longer(
workshop,
cols = colnames(workshop)[1]:colnames(workshop)[2*J],
names_to = 'temp',
values_to = 'exposed'
)
workshop$temp = as.numeric(workshop$temp) - skip
workshop2=as.data.frame(unique(workshop$temp)); colnames(workshop2)=c('temp')
workshop2$age_group = rep(age_group_labels,2) #smallest subdivision is age
workshop2 = workshop2 %>% mutate(infection_type = case_when(
temp <= num_age_groups ~ "new_infection",
temp > num_age_groups ~ "reinfection"))
exposed_log = workshop %>% left_join(workshop2)
exposed_log_tidy = subset(exposed_log,select=-c(temp))
#reinfection ratio
exposed_log = exposed_log_tidy %>% ungroup() %>% pivot_wider(
id_cols = c(date,age_group),
names_from = infection_type,
values_from = exposed)
exposed_log = exposed_log %>% mutate(reinfection_ratio = reinfection/(new_infection+reinfection))
ggplot(exposed_log) + geom_line(aes(x=date,y=reinfection_ratio,color=as.factor(age_group)))
source("C:/Users/u6044061/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/SpecialityMedic.R", echo=TRUE)
round(sum(workshop$doses)
)
ticket
