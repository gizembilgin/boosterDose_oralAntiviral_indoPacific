sum(pop)
exists("prev_setting"
)
setting != prev_setting
setting
prev_setting
source("C:/Users/u6044061/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/(3)_disease_characteristics.R", echo=TRUE)
source("C:/Users/u6044061/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/(4)_time_step.R", echo=TRUE)
sum(next_state)-sum(pop)
sum(next_state)
sum(pop)
source("C:/Users/u6044061/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/(2)_inital_state.R", echo=TRUE)
###### (1/3) Vaccination
#(A/B) Coverage
#(i/iv) Delay
vaccine_coverage_delay_1 = 21 #number of days till protection from first dose, COMEBACK - J&J full protection after 14 days? (single dose vaccine)
vaccine_coverage_delay_2 = 14 #number of days till protection from second dose
vaccine_coverage_delay = c(vaccine_coverage_delay_1,vaccine_coverage_delay_2)
#(ii/iv) #Vaccine coverage at end of true history
vaccine_coverage_end_history = crossing(dose = c(1:num_vax_doses),
vaccine_type = unique(vaccination_history_FINAL$vaccine_type),
age_group = age_group_labels,
cov = c(0))
for (i in 1:J){ # age
for (t in 1:T){  # vaccine type
for (d in 1:D){ # vaccine dose
C = i + J*(t+(d-1)*T) - J
workshop_type =  unique(vaccination_history_TRUE$vaccine_type)[t]
workshop_age = age_group_labels[i]
if (workshop_type == "Johnson & Johnson" & d == 2){#avoid J&J dose 2, otherwise NA and stuffs up vax_type order
} else{
workshop_value =
vaccination_history_POP$coverage_this_date[
vaccination_history_POP$date == max(vaccination_history_POP$date)
& vaccination_history_POP$dose == d
& vaccination_history_POP$vaccine_type == workshop_type]/100 * multiplier[i]
vaccine_coverage_end_history$cov[
vaccine_coverage_end_history$dose == d &
vaccine_coverage_end_history$vaccine_type == workshop_type &
vaccine_coverage_end_history$age_group == workshop_age
] = max(workshop_value,0)
}
}
}
}
#(ii/iv) #Vaccine coverage at end of true history
vaccine_coverage_end_history = crossing(dose = c(1:num_vax_doses),
vaccine_type = unique(vaccination_history_FINAL$vaccine_type),
age_group = age_group_labels,
cov = c(0))
for (i in 1:J){ # age
for (t in 1:T){  # vaccine type
for (d in 1:D){ # vaccine dose
C = i + J*(t+(d-1)*T) - J
workshop_type =  unique(vaccination_history_TRUE$vaccine_type)[t]
workshop_age = age_group_labels[i]
if (workshop_type == "Johnson & Johnson" & d == 2){#avoid J&J dose 2, otherwise NA and stuffs up vax_type order
} else{
workshop_value =
vaccination_history_POP$coverage_this_date[
vaccination_history_POP$date == max(vaccination_history_POP$date)
& vaccination_history_POP$dose == d
& vaccination_history_POP$vaccine_type == workshop_type]/100 * multiplier[i]
vaccine_coverage_end_history$cov[
vaccine_coverage_end_history$dose == d &
vaccine_coverage_end_history$vaccine_type == workshop_type &
vaccine_coverage_end_history$age_group == workshop_age
] = max(workshop_value,0)
}
}
}
}
View(vaccination_history_TRUE)
D
T
J
workshop_type =  unique(vaccination_history_TRUE$vaccine_type)[t]
workshop_type
length(unique(vaccination_history_TRUE$vaccine_type))
T
#       (1/4) Setup
####################################################################
#load libraries
library(tidyverse)
library(readr)
library(deSolve)
library(rvest)
library(ggplot2)
library(gridExtra)
if (Sys.info()[['user']] == 'u6044061'){ rootpath = 'C:/Users/u6044061/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/'
}else if (Sys.info()[['user']] == 'Gizem'){ rootpath = 'C:/Users/gizem/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/'}
#rm(list=ls())  # clear global environment
#_________________________________________________________________
#       (2/4) User choice / Model toggles
####################################################################
setting = "SLE"
date_start = as.Date('2022-04-01')  #note, '2020-03-01' used for current WT behaviour_mod fit (02/02/2022); and '2022-04-01 for simulations
model_weeks = 10          # how many weeks should the model run for?, 24 PNG fit
complete_model_runs = 1   # when >1 samples randomly from distribution of parameters (where available)
strain_inital = 'delta'             #options:'WT','delta'
seed = 0.001
NPI_outbreak_toggle = "delta_peaks"   #options: final, delta_peaks
underascertainment_est = 43
behaviour_mod = 0  #0.268 if start 01/03
uniform_mod=1
seroprev_year = 2022 #COMEBACK - tie this to date_start!
vax_strategy_plot = "on" #to add hypothetical vaccination campaign
vax_strategy_toggles =
list(vax_strategy_start_date                  = as.Date('2022-04-20'),
vax_strategy_num_doses         = as.integer(1000000),
vax_strategy_roll_out_speed    = 50000 ,               # doses delivered per day
vax_age_strategy               = "oldest",            # options: "oldest", "youngest","50_down","uniform", OTHER?
vax_dose_strategy              = 2,                    # options: 1,2
vax_strategy_vaccine_type      = "Pfizer" ,            # options: "Moderna","Pfizer","AstraZeneca","Johnson & Johnson","Sinopharm","Sinovac"
vax_strategy_vaccine_interval  = 7*3 ,                 # (days) interval between first and second dose
vax_strategy_max_expected_cov  = 0.8                   # value between 0-1 (equivalent to %) of age group willing to be vaccinated
)
#__________________________________________________________________
#       (3/4) Run model
# ####################################################################
##(A) Load functions
source(paste(getwd(),"/(function)_COVID_ODE.R",sep=""))
source(paste(getwd(),"/(function)_VE_time_step.R",sep=""))
source(paste(getwd(),"/(function)_vax_strategies.R",sep=""))
##(B) Simulate setting
# time saving tactics! Load setting if not yet loaded
if (complete_model_runs == 1){run_type="point"
} else if (complete_model_runs > 1){run_type="rand"}
if (setting == "PNG"){setting_long = "Papua New Guinea"
} else if (setting == "SLE"){setting_long = "Sierra Leone"}
if (exists("prev_setting") == FALSE){ prev_setting = "NONE"}
if (setting != prev_setting){source(paste(getwd(),"/(1)_simulate_setting.R",sep=""))} #load setting stats if new setting
prev_setting = setting
#making some interim variables to assist with configuring states
seed = sum(pop)*seed
num_disease_classes = 4                                 # SEIR
num_vax_doses = D = length(unique(vaccination_history_TRUE$dose))  # dose 1, dose 2, COMEBACK no boosters yet in these settings
vax_type_list = sort(unique(vaccination_history_TRUE$vaccine_type))
num_vax_types = T = length(unique(vaccination_history_TRUE$vaccine_type))
num_vax_classes = num_vax_doses*num_vax_types + 1                 # + 1 for unvaccinated
num_total_classes = (num_disease_classes+1)*(num_age_groups*num_vax_classes) #+1 for incidence tracker
source("C:/Users/u6044061/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/(4)_time_step.R", echo=TRUE)
source("C:/Users/u6044061/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/(2)_inital_state.R", echo=TRUE)
source("C:/Users/u6044061/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/CommandDeck.R", echo=TRUE)
source("C:/Users/u6044061/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/CommandDeck.R", echo=TRUE)
#       (1/4) Setup
####################################################################
#load libraries
library(tidyverse)
library(readr)
library(deSolve)
library(rvest)
library(ggplot2)
library(gridExtra)
if (Sys.info()[['user']] == 'u6044061'){ rootpath = 'C:/Users/u6044061/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/'
}else if (Sys.info()[['user']] == 'Gizem'){ rootpath = 'C:/Users/gizem/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/'}
#rm(list=ls())  # clear global environment
#_________________________________________________________________
#       (2/4) User choice / Model toggles
####################################################################
setting = "SLE"
date_start = as.Date('2022-04-01')  #note, '2020-03-01' used for current WT behaviour_mod fit (02/02/2022); and '2022-04-01 for simulations
model_weeks = 10          # how many weeks should the model run for?, 24 PNG fit
complete_model_runs = 1   # when >1 samples randomly from distribution of parameters (where available)
strain_inital = 'delta'             #options:'WT','delta'
seed = 0.001
NPI_outbreak_toggle = "delta_peaks"   #options: final, delta_peaks
underascertainment_est = 43
behaviour_mod = 0  #0.268 if start 01/03
uniform_mod=1
seroprev_year = 2022 #COMEBACK - tie this to date_start!
vax_strategy_plot = "on" #to add hypothetical vaccination campaign
vax_strategy_toggles =
list(vax_strategy_start_date                  = as.Date('2022-04-20'),
vax_strategy_num_doses         = as.integer(1000000),
vax_strategy_roll_out_speed    = 50000 ,               # doses delivered per day
vax_age_strategy               = "oldest",            # options: "oldest", "youngest","50_down","uniform", OTHER?
vax_dose_strategy              = 2,                    # options: 1,2
vax_strategy_vaccine_type      = "Pfizer" ,            # options: "Moderna","Pfizer","AstraZeneca","Johnson & Johnson","Sinopharm","Sinovac"
vax_strategy_vaccine_interval  = 7*3 ,                 # (days) interval between first and second dose
vax_strategy_max_expected_cov  = 0.8                   # value between 0-1 (equivalent to %) of age group willing to be vaccinated
)
#__________________________________________________________________
source("C:/Users/u6044061/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/(4)_time_step.R", echo=TRUE)
source(paste(getwd(),"/(function)_COVID_ODE.R",sep=""))
source(paste(getwd(),"/(function)_VE_time_step.R",sep=""))
source(paste(getwd(),"/(function)_vax_strategies.R",sep=""))
source("C:/Users/u6044061/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/(4)_time_step.R", echo=TRUE)
##(B) Simulate setting
# time saving tactics! Load setting if not yet loaded
if (complete_model_runs == 1){run_type="point"
} else if (complete_model_runs > 1){run_type="rand"}
if (setting == "PNG"){setting_long = "Papua New Guinea"
} else if (setting == "SLE"){setting_long = "Sierra Leone"}
if (exists("prev_setting") == FALSE){ prev_setting = "NONE"}
if (setting != prev_setting){source(paste(getwd(),"/(1)_simulate_setting.R",sep=""))} #load setting stats if new setting
prev_setting = setting
source("C:/Users/u6044061/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/(4)_time_step.R", echo=TRUE)
source(paste(getwd(),"/(3)_disease_characteristics.R",sep=""))
source("C:/Users/u6044061/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/(4)_time_step.R", echo=TRUE)
#making some interim variables to assist with configuring states
seed = sum(pop)*seed
num_disease_classes = 4                                 # SEIR
num_vax_doses = D = length(unique(vaccination_history_TRUE$dose))  # dose 1, dose 2, COMEBACK no boosters yet in these settings
vax_type_list = sort(unique(vaccination_history_TRUE$vaccine_type))
num_vax_types = T = length(unique(vaccination_history_TRUE$vaccine_type))
num_vax_classes = num_vax_doses*num_vax_types + 1                 # + 1 for unvaccinated
num_total_classes = (num_disease_classes+1)*(num_age_groups*num_vax_classes) #+1 for incidence tracker
source(paste(getwd(),"/(4)_time_step.R",sep=""))
source(paste(getwd(),"/(2)_inital_state.R",sep=""))
source(paste(getwd(),"/(4)_time_step.R",sep=""))
source("C:/Users/u6044061/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/CommandDeck.R", echo=TRUE)
#making some interim variables to assist with configuring states
seed = sum(pop)*seed
num_disease_classes = 4                                 # SEIR
num_vax_doses = D = length(unique(vaccination_history_TRUE$dose))  # dose 1, dose 2, COMEBACK no boosters yet in these settings
vax_type_list = sort(unique(vaccination_history_TRUE$vaccine_type))
num_vax_types = T = length(unique(vaccination_history_TRUE$vaccine_type))
num_vax_classes = num_vax_doses*num_vax_types + 1                 # + 1 for unvaccinated
num_total_classes = (num_disease_classes+1)*(num_age_groups*num_vax_classes) #+1 for incidence tracker
###### (1/3) Vaccination
#(A/B) Coverage
#(i/iv) Delay
vaccine_coverage_delay_1 = 21 #number of days till protection from first dose, COMEBACK - J&J full protection after 14 days? (single dose vaccine)
vaccine_coverage_delay_2 = 14 #number of days till protection from second dose
vaccine_coverage_delay = c(vaccine_coverage_delay_1,vaccine_coverage_delay_2)
#(ii/iv) #Vaccine coverage at end of true history
vaccine_coverage_end_history = crossing(dose = c(1:num_vax_doses),
vaccine_type = unique(vaccination_history_FINAL$vaccine_type),
age_group = age_group_labels,
cov = c(0))
for (i in 1:J){ # age
for (t in 1:T){  # vaccine type
for (d in 1:D){ # vaccine dose
C = i + J*(t+(d-1)*T) - J
workshop_type =  unique(vaccination_history_TRUE$vaccine_type)[t]
workshop_age = age_group_labels[i]
if (workshop_type == "Johnson & Johnson" & d == 2){#avoid J&J dose 2, otherwise NA and stuffs up vax_type order
} else{
workshop_value =
vaccination_history_POP$coverage_this_date[
vaccination_history_POP$date == max(vaccination_history_POP$date)
& vaccination_history_POP$dose == d
& vaccination_history_POP$vaccine_type == workshop_type]/100 * multiplier[i]
vaccine_coverage_end_history$cov[
vaccine_coverage_end_history$dose == d &
vaccine_coverage_end_history$vaccine_type == workshop_type &
vaccine_coverage_end_history$age_group == workshop_age
] = max(workshop_value,0)
}
}
}
}
num_vax_doses
vax_type_list
num_vax_classes
num_total_classes
#(iii/iv) Add hypothetical campaign (if 'on')
if (vax_strategy_plot == "on"){
vaccination_history_FINAL =
vax_strategy(vax_strategy_start_date        = vax_strategy_toggles$vax_strategy_start_date,
vax_strategy_num_doses         = vax_strategy_toggles$vax_strategy_num_doses,
vax_strategy_roll_out_speed    = vax_strategy_toggles$vax_strategy_roll_out_speed,
vax_age_strategy               = vax_strategy_toggles$vax_age_strategy,
vax_dose_strategy              = vax_strategy_toggles$vax_dose_strategy,
vax_strategy_vaccine_type      = vax_strategy_toggles$vax_strategy_vaccine_type,
vax_strategy_vaccine_interval  = vax_strategy_toggles$vax_strategy_vaccine_interval,
vax_strategy_max_expected_cov  = vax_strategy_toggles$vax_strategy_max_expected_cov
)
#recalculate!
num_vax_doses = D = length(unique(vaccination_history_FINAL$dose))  # dose 1, dose 2, COMEBACK no boosters yet in these settings
vax_type_list = sort(unique(vaccination_history_FINAL$vaccine_type))
num_vax_types = T = length(unique(vaccination_history_FINAL$vaccine_type))
num_vax_classes = num_vax_doses*num_vax_types + 1                 # + 1 for unvaccinated
num_total_classes = (num_disease_classes+1)*(num_age_groups*num_vax_classes) #+1 for incidence tracker
} else {
vaccination_history_FINAL = vaccination_history_TRUE
}
num_total_classes
num_vax_classes
vax_type_list
View(vaccination_history_FINAL)
source("C:/Users/u6044061/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/CommandDeck.R", echo=TRUE)
#       (1/4) Setup
####################################################################
#load libraries
library(tidyverse)
library(readr)
library(deSolve)
library(rvest)
library(ggplot2)
library(gridExtra)
if (Sys.info()[['user']] == 'u6044061'){ rootpath = 'C:/Users/u6044061/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/'
}else if (Sys.info()[['user']] == 'Gizem'){ rootpath = 'C:/Users/gizem/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/'}
#rm(list=ls())  # clear global environment
#_________________________________________________________________
#       (2/4) User choice / Model toggles
####################################################################
setting = "SLE"
date_start = as.Date('2022-04-01')  #note, '2020-03-01' used for current WT behaviour_mod fit (02/02/2022); and '2022-04-01 for simulations
model_weeks = 10          # how many weeks should the model run for?, 24 PNG fit
complete_model_runs = 1   # when >1 samples randomly from distribution of parameters (where available)
strain_inital = 'delta'             #options:'WT','delta'
seed = 0.001
NPI_outbreak_toggle = "delta_peaks"   #options: final, delta_peaks
underascertainment_est = 43
behaviour_mod = 0  #0.268 if start 01/03
uniform_mod=1
seroprev_year = 2022 #COMEBACK - tie this to date_start!
vax_strategy_plot = "on" #to add hypothetical vaccination campaign
vax_strategy_toggles =
list(vax_strategy_start_date                  = as.Date('2022-04-20'),
vax_strategy_num_doses         = as.integer(1000000),
vax_strategy_roll_out_speed    = 50000 ,               # doses delivered per day
vax_age_strategy               = "oldest",            # options: "oldest", "youngest","50_down","uniform", OTHER?
vax_dose_strategy              = 2,                    # options: 1,2
vax_strategy_vaccine_type      = "Pfizer" ,            # options: "Moderna","Pfizer","AstraZeneca","Johnson & Johnson","Sinopharm","Sinovac"
vax_strategy_vaccine_interval  = 7*3 ,                 # (days) interval between first and second dose
vax_strategy_max_expected_cov  = 0.8                   # value between 0-1 (equivalent to %) of age group willing to be vaccinated
)
#__________________________________________________________________
#       (3/4) Run model
# ####################################################################
##(A) Load functions
source(paste(getwd(),"/(function)_COVID_ODE.R",sep=""))
source(paste(getwd(),"/(function)_VE_time_step.R",sep=""))
source(paste(getwd(),"/(function)_vax_strategies.R",sep=""))
##(B) Simulate setting
# time saving tactics! Load setting if not yet loaded
if (complete_model_runs == 1){run_type="point"
} else if (complete_model_runs > 1){run_type="rand"}
if (setting == "PNG"){setting_long = "Papua New Guinea"
} else if (setting == "SLE"){setting_long = "Sierra Leone"}
if (exists("prev_setting") == FALSE){ prev_setting = "NONE"}
if (setting != prev_setting){source(paste(getwd(),"/(1)_simulate_setting.R",sep=""))} #load setting stats if new setting
prev_setting = setting
#making some interim variables to assist with configuring states
seed = sum(pop)*seed
num_disease_classes = 4                                 # SEIR
num_vax_doses = D = length(unique(vaccination_history_TRUE$dose))  # dose 1, dose 2, COMEBACK no boosters yet in these settings
vax_type_list = sort(unique(vaccination_history_TRUE$vaccine_type))
num_vax_types = T = length(unique(vaccination_history_TRUE$vaccine_type))
num_vax_classes = num_vax_doses*num_vax_types + 1                 # + 1 for unvaccinated
num_total_classes = (num_disease_classes+1)*(num_age_groups*num_vax_classes) #+1 for incidence tracker
source(paste(getwd(),"/(3)_disease_characteristics.R",sep=""))
###### (1/3) Vaccination
#(A/B) Coverage
#(i/iv) Delay
vaccine_coverage_delay_1 = 21 #number of days till protection from first dose, COMEBACK - J&J full protection after 14 days? (single dose vaccine)
vaccine_coverage_delay_2 = 14 #number of days till protection from second dose
vaccine_coverage_delay = c(vaccine_coverage_delay_1,vaccine_coverage_delay_2)
#(ii/iv) #Vaccine coverage at end of true history
vaccine_coverage_end_history = crossing(dose = c(1:num_vax_doses),
vaccine_type = unique(vaccination_history_FINAL$vaccine_type),
age_group = age_group_labels,
cov = c(0))
for (i in 1:J){ # age
for (t in 1:T){  # vaccine type
for (d in 1:D){ # vaccine dose
C = i + J*(t+(d-1)*T) - J
workshop_type =  unique(vaccination_history_TRUE$vaccine_type)[t]
workshop_age = age_group_labels[i]
if (workshop_type == "Johnson & Johnson" & d == 2){#avoid J&J dose 2, otherwise NA and stuffs up vax_type order
} else{
workshop_value =
vaccination_history_POP$coverage_this_date[
vaccination_history_POP$date == max(vaccination_history_POP$date)
& vaccination_history_POP$dose == d
& vaccination_history_POP$vaccine_type == workshop_type]/100 * multiplier[i]
vaccine_coverage_end_history$cov[
vaccine_coverage_end_history$dose == d &
vaccine_coverage_end_history$vaccine_type == workshop_type &
vaccine_coverage_end_history$age_group == workshop_age
] = max(workshop_value,0)
}
}
}
}
#(iii/iv) Add hypothetical campaign (if 'on')
if (vax_strategy_plot == "on"){
vaccination_history_FINAL =
vax_strategy(vax_strategy_start_date        = vax_strategy_toggles$vax_strategy_start_date,
vax_strategy_num_doses         = vax_strategy_toggles$vax_strategy_num_doses,
vax_strategy_roll_out_speed    = vax_strategy_toggles$vax_strategy_roll_out_speed,
vax_age_strategy               = vax_strategy_toggles$vax_age_strategy,
vax_dose_strategy              = vax_strategy_toggles$vax_dose_strategy,
vax_strategy_vaccine_type      = vax_strategy_toggles$vax_strategy_vaccine_type,
vax_strategy_vaccine_interval  = vax_strategy_toggles$vax_strategy_vaccine_interval,
vax_strategy_max_expected_cov  = vax_strategy_toggles$vax_strategy_max_expected_cov
)
#recalculate!
num_vax_doses = D = length(unique(vaccination_history_FINAL$dose))  # dose 1, dose 2, COMEBACK no boosters yet in these settings
vax_type_list = sort(unique(vaccination_history_FINAL$vaccine_type))
num_vax_types = T = length(unique(vaccination_history_FINAL$vaccine_type))
num_vax_classes = num_vax_doses*num_vax_types + 1                 # + 1 for unvaccinated
num_total_classes = (num_disease_classes+1)*(num_age_groups*num_vax_classes) #+1 for incidence tracker
} else {
vaccination_history_FINAL = vaccination_history_TRUE
}
vax_type_list
num_vax_classes
num_total_classes
vaccine_coverage
View(vaccine_coverage)
unique(vaccination_history_TRUE)
T
vaccine_coverage = crossing(dose = c(1:num_vax_doses),
vaccine_type = unique(vaccination_history_FINAL$vaccine_type),
age_group = age_group_labels,
cov = c(0)) # CHECKED:vaccine coverage long like E/I/R structure
T
i
t
workshop_type =  unique(vaccination_history_FINAL$vaccine_type)[t]
workshop_age = age_group_labels[i]
workshop_type
workshop_age
((date_start - vaccine_coverage_delay[d])<= max(vaccination_history_POP$date) &
(date_start - vaccine_coverage_delay[d])>= min(vaccination_history_POP$date))
(date_start - vaccine_coverage_delay[d])> max(vaccination_history_POP$date)
workshop_type
vax_type_list[t]
for (i in 1:J){ # age
for (t in 1:T){  # vaccine type
for (d in 1:D){ # vaccine dose
C = i + J*(t+(d-1)*T) - J
workshop_type =  unique(vaccination_history_FINAL$vaccine_type)[t]
workshop_age = age_group_labels[i]
if (workshop_type == "Johnson & Johnson" & d == 2){ #avoid J&J dose 2, otherwise NA and stuffs up vax_type order
} else{
if ((date_start - vaccine_coverage_delay[d])<= max(vaccination_history_POP$date) &
(date_start - vaccine_coverage_delay[d])>= min(vaccination_history_POP$date)){
workshop_value =  vaccination_history_POP$coverage_this_date[
vaccination_history_POP$date == date_start - vaccine_coverage_delay[d]
& vaccination_history_POP$dose == d
& vaccination_history_POP$vaccine_type == workshop_type] / 100 * multiplier[i]
vaccine_coverage$cov[
vaccine_coverage$dose == d &
vaccine_coverage$vaccine_type == workshop_type &
vaccine_coverage$age_group == workshop_age
] = max(workshop_value,0)
} else if ((date_start - vaccine_coverage_delay[d])> max(vaccination_history_POP$date)){
workshop_value =
vaccination_history_POP$coverage_this_date[
vaccination_history_POP$date == max(vaccination_history_POP$date)
& vaccination_history_POP$dose == d
& vaccination_history_POP$vaccine_type == workshop_type]/100 * multiplier[i]
vaccine_coverage$cov[
vaccine_coverage$dose == d &
vaccine_coverage$vaccine_type == workshop_type &
vaccine_coverage$age_group == workshop_age
] =  max(workshop_value,0)
}
}
}
}
}
source("C:/Users/u6044061/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/CommandDeck.R", echo=TRUE)
source("C:/Users/u6044061/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/CommandDeck.R", echo=TRUE)
source("C:/Users/u6044061/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/CommandDeck.R", echo=TRUE)
VE
(date_start - vaccine_coverage_delay[d])>= min(vaccination_history_POP$date)
VE = VE_inital = VE_time_step(strain_inital,date_start,'acquisition')
VE
sum(State)
sum(state0)
sum(state0)
sum(state)
sum(pop)
vaccine_coverage$cov[vaccine_coverage$dose == d &
vaccine_coverage$age_group == age_group_labels[i] &
vaccine_coverage$vaccine_type == vax_type_list[t]
]
vaccine_coverage$cov[B-J]
source("C:/Users/u6044061/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/(2)_inital_state.R", echo=TRUE)
source("C:/Users/u6044061/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/CommandDeck.R", echo=TRUE)
for (t in 1:num_vax_types){ #iterating over vaccine types
this_vax = vax_type_list[t]
this_vax_history = vaccination_history_FINAL[vaccination_history_FINAL$vaccine_type == this_vax,]
# (1/3) recorded vax
#COMEBACK delay of J&J first does is 21 days, is this right?
if (nrow(this_vax_history[this_vax_history$date == as.Date(date_now) - vaccine_coverage_delay_1,]) >0){
dose_one <- as.numeric(this_vax_history$doses_delivered_this_date[this_vax_history$date==as.Date(date_now) - vaccine_coverage_delay_1 & this_vax_history$dose==1])
}else { dose_one = rep(0,num_age_groups)}
if (nrow(this_vax_history[this_vax_history$date == as.Date(date_now) - vaccine_coverage_delay_2,]) >0){
dose_two <- as.numeric(this_vax_history$doses_delivered_this_date[this_vax_history$date==as.Date(date_now) - vaccine_coverage_delay_2 & this_vax_history$dose==2])
}  else { dose_two = rep(0,num_age_groups)}
if (this_vax == "Johnson & Johnson") {dose_two = rep(0,num_age_groups)}
#NB: no booster dose yet!
VR_this_step <- cbind(dose_one,dose_two)
for (i in 1:num_age_groups){ # across age groups
increase_one = VR_this_step[i,1]
increase_two = VR_this_step[i,2]
for (j in 1:4){ #let's assume all SEIR vaccinated
#for (d in 1:D){ #COMEBACK could shorten code with dose  B = i + J*(t+(d-1)*T)
prop1 = prev_state[j,i]     / sum(prev_state[,i])       # prop unvax in SEIR
prop2 = prev_state[j,i+J*t] / sum(prev_state[,i+J*t]) # prop dose one
if (is.nan(prop1) == TRUE){prop1=0}
if (is.nan(prop2) == TRUE){prop2=0}
next_state[j,i]         = next_state[j,i] - increase_one*prop1
next_state[j,i+J*t]     = next_state[j,i+J*t] + increase_one*prop1-increase_two*prop2
next_state[j,i+J*(t+T)] = next_state[j,i+J*(t+T)] + increase_two * prop2
#}
}
}
}
t
this_vax = vax_type_list[t]
this_vax
source("C:/Users/u6044061/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/CommandDeck.R", echo=TRUE)
View(incidence_log)
as.Date('2022-05-15')-date_start
