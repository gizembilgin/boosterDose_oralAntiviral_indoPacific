age_groups = c(0,4,9,14,19,24,29,34,39,44,49,54,59,64,69,74,79,84,89,94,99,110)
pop_orig <- read.csv("C:/Users/gizem/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/inputs/pop_estimates.csv", header=TRUE)
pop_setting_orig <- pop_orig[pop_orig$country == setting,]
pop_setting <- pop_setting_orig %>%
mutate(agegroup = cut(age,breaks = age_groups, include.lowest = T,labels = age_group_labels))
pop_setting <- aggregate(pop_setting$population, by=list(category=pop_setting$agegroup), FUN=sum)
colnames(pop_setting) <-c('agegroup','pop')
pop <- pop_setting$pop
pop
age_groups = c(0,4,9,14,19,24,29,34,39,44,49,54,59,64,69,74,79,84,89,94,99,110)
pop_orig <- read.csv("C:/Users/gizem/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/inputs/pop_estimates.csv", header=TRUE)
pop_setting_orig <- pop_orig[pop_orig$country == setting,]
pop_setting <- pop_setting_orig %>%
mutate(agegroup = cut(age,breaks = age_groups, include.lowest = T,labels = age_group_labels))
age_groups = c(0,4,9,14,19,24,29,34,39,44,49,54,59,64,69,74,79,84,89,94,99,110)
age_group_labels = c('0-4','5 to 9','10 to 14','15 to 19','20 to 24','24 to 29','30 to 34','35 to 39','40 to 44','45 to 49',
'50 to 54','55 to 59','60 to 64','65 to 69','70 to 74','75 to 79','80 to 84','85 to 89','90 to 94','95 to 100')
pop_orig <- read.csv("C:/Users/gizem/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/inputs/pop_estimates.csv", header=TRUE)
pop_setting_orig <- pop_orig[pop_orig$country == setting,]
pop_setting <- pop_setting_orig %>%
mutate(agegroup = cut(age,breaks = age_groups, include.lowest = T,labels = age_group_labels))
age_groups = c(0,4,9,14,19,24,29,34,39,44,49,54,59,64,69,74,79,84,89,94,110)
age_group_labels = c('0-4','5 to 9','10 to 14','15 to 19','20 to 24','24 to 29','30 to 34','35 to 39','40 to 44','45 to 49',
'50 to 54','55 to 59','60 to 64','65 to 69','70 to 74','75 to 79','80 to 84','85 to 89','90 to 94','95 to 100')
pop_orig <- read.csv("C:/Users/gizem/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/inputs/pop_estimates.csv", header=TRUE)
pop_setting_orig <- pop_orig[pop_orig$country == setting,]
pop_setting <- pop_setting_orig %>%
mutate(agegroup = cut(age,breaks = age_groups, include.lowest = T,labels = age_group_labels))
pop_setting <- aggregate(pop_setting$population, by=list(category=pop_setting$agegroup), FUN=sum)
colnames(pop_setting) <-c('agegroup','pop')
pop <- pop_setting$pop
pop
write.csv(pop_setting,file = 'x_results/pop_scrap.csv')
setting
setting="SLE"
pop_orig <- read.csv("C:/Users/gizem/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/inputs/pop_estimates.csv", header=TRUE)
pop_setting_orig <- pop_orig[pop_orig$country == setting,]
pop_setting <- pop_setting_orig %>%
mutate(agegroup = cut(age,breaks = age_groups, include.lowest = T,labels = age_group_labels))
pop_setting <- aggregate(pop_setting$population, by=list(category=pop_setting$agegroup), FUN=sum)
colnames(pop_setting) <-c('agegroup','pop')
pop <- pop_setting$pop
write.csv(pop_setting,file = 'x_results/pop_scrap.csv')
### (1/5) Age structure of population
#NOTE: this program has been configured so that the age_groups can be modified on a whim,
# however, some other programs aren't as flexible
age_groups = c(0,4,19,29,39,49,59,110)
age_group_labels = c('0-4','5-19','20-29','30-39','40-49','50-59','60-100')
pop_orig <- read.csv("C:/Users/gizem/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/inputs/pop_estimates.csv", header=TRUE)
pop_setting_orig <- pop_orig[pop_orig$country == setting,]
pop_setting <- pop_setting_orig %>%
mutate(agegroup = cut(age,breaks = age_groups, include.lowest = T,labels = age_group_labels))
pop_setting <- aggregate(pop_setting$population, by=list(category=pop_setting$agegroup), FUN=sum)
colnames(pop_setting) <-c('agegroup','pop')
pop <- pop_setting$pop
rm (pop_orig) #keep pop_setting_orig for contact matrix weighting
### (2/5) Contact patterns of population
#CONFIRMATION FROM MARK JIT: .Rdata files are more up to date on GitHub (Prem et al. 2021 paper)
#(A/C) load contact matrix
load(file = "~/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/inputs/contact_all.Rdata")
pop
age_groups = c(0,4,9,14,19,24,29,34,39,44,49,54,59,64,69,74,79,84,89,94,110)
age_group_labels = c('0-4','5 to 9','10 to 14','15 to 19','20 to 24','24 to 29','30 to 34','35 to 39','40 to 44','45 to 49',
'50 to 54','55 to 59','60 to 64','65 to 69','70 to 74','75 to 79','80 to 84','85 to 89','90 to 94','95 to 100')
pop_interim <- read.csv("C:/Users/gizem/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/inputs/pop_estimates.csv", header=TRUE)
pop_interim <- pop_interim[pop_orig$country == setting,]
pop_interim <- pop_interim %>%
mutate(agegroup = cut(age,breaks = age_groups, include.lowest = T,labels = age_group_labels))
pop_interim <- aggregate(pop_interim$population, by=list(category=pop_interim$agegroup), FUN=sum)
colnames(pop_interim) <-c('agegroup','pop')
pop_interim <- pop_interim$pop
age_groups = c(0,4,9,14,19,24,29,34,39,44,49,54,59,64,69,74,79,84,89,94,110)
age_group_labels = c('0-4','5 to 9','10 to 14','15 to 19','20 to 24','24 to 29','30 to 34','35 to 39','40 to 44','45 to 49',
'50 to 54','55 to 59','60 to 64','65 to 69','70 to 74','75 to 79','80 to 84','85 to 89','90 to 94','95 to 100')
pop_interim <- read.csv("C:/Users/gizem/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/inputs/pop_estimates.csv", header=TRUE)
pop_interim <- pop_interim[pop_interim$country == setting,]
pop_interim <- pop_interim %>%
mutate(agegroup = cut(age,breaks = age_groups, include.lowest = T,labels = age_group_labels))
pop_interim <- aggregate(pop_interim$population, by=list(category=pop_interim$agegroup), FUN=sum)
colnames(pop_interim) <-c('agegroup','pop')
pop_interim <- pop_interim$pop
pop_interim
source("~/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/workshop - severe outcome age distribution.R", echo=TRUE)
pop_interim
pop_interim <- pop_interim %>% mutate(pop_percentage = pop/sum(pop_interim$pop))
pop_interim
### Shape of risk
risk_df <- data.frame(x=seq(from =0,to=100,by=20),
y=c(0.001,0.01,0.1,1,10,50))
risk_df
lm(formula = risk_df$y ~ log(risk_df$x))
lm(risk_df$y ~ log(risk_df$x))
### Shape of risk
risk_df <- data.frame(x=seq(from =20,to=100,by=20),
y=c(0.01,0.1,1,10,50))
lm(risk_df$y ~ log(risk_df$x))
### Shape of risk
risk_df <- data.frame(x=seq(from =20,to=80,by=20),
y=c(0.01,0.1,1,10))
lm(risk_df$y ~ log(risk_df$x))
workshop<-lm(risk_df$y ~ log(risk_df$x))
workshop
View(workshop)
### Shape of risk
risk_df <- data.frame(x=seq(from =5,to=100,by=5))
risk_df <- risk_df %>% mutate(y=0.0009*exp(0.1139*x))
risk_df
risk_df = rbind(c(0,0.01),risk_df)
risk_df
day
vax_strategy_roll_out_speed
VA$doses_left[VA$priority == priority_num & VA$dose == 1]>0
VA$doses_left[VA$priority == priority_num & VA$dose == 1]
#####(2/3) Enact strategy ######################################################
###(A/C) Calculate the eligible population
# = % max poss coverage * pop_size - existing vaccine coverage
eligible_pop = data.frame(pop_setting)
#set max poss coverage
eligible_pop$pop = round(eligible_pop$pop * vax_strategy_max_expected_cov)
colnames(eligible_pop) = c('age_group','eligible_individuals')
#make long by dose
workshop = data.frame()
for (i in 1:num_vax_doses){
this_dose = as.data.frame(eligible_pop) %>% mutate(dose = i)
workshop = rbind(workshop,this_dose)
}
#load libraries
library(tidyverse)
library(readr)
library(deSolve)
library(rvest)
library(ggplot2)
library(gridExtra)
workshop = data.frame()
for (i in 1:num_vax_doses){
this_dose = as.data.frame(eligible_pop) %>% mutate(dose = i)
workshop = rbind(workshop,this_dose)
}
eligible_pop= workshop
eligible_pop
#remove already vaccinated individuals
existing_coverage = data.frame(eligible_pop$age_group,eligible_pop$dose,rep(0,num_age_groups*num_vax_doses))
colnames(existing_coverage) = c('age_group','dose','cov_to_date')
for (t in 1:num_vax_types){
for (d in 1:num_vax_doses){
#need to sum across vaccine_coverage (as this is vaccination_history_FINAL split across age groups)
existing_coverage$cov_to_date[existing_coverage$dose == d] =
existing_coverage$cov_to_date[existing_coverage$dose == d] + vaccine_coverage_end_history[(J*(t+(d-1)*T) - J+1):(J*(t+(d-1)*T))]
}
}
existing_coverage
eligible_pop <- eligible_pop %>% left_join(existing_coverage) %>%
mutate(eligible_individuals = round(eligible_individuals *(1-cov_to_date))) %>%
select(age_group,dose,eligible_individuals)
eligible_pop
#NOTE: some with dose 2 > dose 1
eligible_pop$eligible_individuals[eligible_pop$dose == 2] - eligible_pop$eligible_individuals[eligible_pop$dose == 1]
sum(eligible_pop$eligible_individuals[eligible_pop$dose == 2] - eligible_pop$eligible_individuals[eligible_pop$dose == 1])/sum(pop)
100*sum(eligible_pop$eligible_individuals[eligible_pop$dose == 2] - eligible_pop$eligible_individuals[eligible_pop$dose == 1])/sum(pop)
View(existing_coverage)
View(vaccination_history_FINAL)
cov_to_date
existing_coverage
max(vaccination_history_FINAL$date)
vaccine_coverage_end_history
vaccination_history_FINAL$coverage_this_date[
vaccination_history_FINAL$date == max(vaccination_history_FINAL$date)
]]
vaccination_history_FINAL$coverage_this_date[
vaccination_history_FINAL$date == max(vaccination_history_FINAL$date)
]
max(vaccination_history_FINAL$date)
multiplier
#COMEBACK - arbitrary uniform distribution of vaccines into age classes >19 years old
#age_group_labels = c('0-4','5-19','20-29','30-39','40-49','50-59','60-100')
multiplier =  sum(pop)/sum(pop[3:num_age_groups])
multiplier
source("~/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/CommandDeck.R", echo=TRUE)
#       (1/4) Setup
####################################################################
#load libraries
library(tidyverse)
library(readr)
library(deSolve)
library(rvest)
library(ggplot2)
library(gridExtra)
#       (2/4) User choice / Model toggles
####################################################################
setting = "PNG"
date_start = as.Date('2022-04-01')  #note, '2020-03-01' used for current WT behaviour_mod fit (02/02/2022); and '2022-04-01 for simulations
model_weeks = 10          # how many weeks should the model run for?, 24 PNG fit
complete_model_runs = 1   # when >1 samples randomly from distribution of parameters (where available)
strain_inital = 'delta'             #options:'WT','delta'
seed = 50/100000
NPI_outbreak_toggle = "delta_peaks"   #options: final, delta_peaks
underascertainment_est = 43
behaviour_mod = 0  #0.268 if start 01/03
uniform_mod=1
seroprev_year = 2022 #COMEBACK - tie this to date_start!
#       (3/4) Run model
# ####################################################################
##(A) Load functions
source(paste(getwd(),"/(function)_COVID_ODE.R",sep=""))
source(paste(getwd(),"/(function)_VE_time_step.R",sep=""))
##(B) Simulate setting
# time saving tactics! Load setting if not yet loaded
if (setting == "PNG"){setting_long = "Papua New Guinea"
} else if (setting == "SLE"){setting_long = "Sierra Leone"}
if (exists("prev_setting") == FALSE){ prev_setting = "NONE"}
if (setting != prev_setting){source(paste(getwd(),"/(1)_simulate_setting.R",sep=""))} #load setting stats if new setting
prev_setting = setting
#making some interim variables to assist with configuring states
seed = sum(pop)*seed
num_disease_classes = 4                                 # SEIR
num_age_groups = J = length(age_group_labels)           # 0-4,5-11,12-15,16-29,30-59,60+
num_vax_doses = D = length(unique(vaccination_history_FINAL$dose))  # dose 1, dose 2, COMEBACK no boosters yet in these settings
vax_type_list = sort(unique(vaccination_history_FINAL$vaccine_type))
num_vax_types = T = length(unique(vaccination_history_FINAL$vaccine_type))
num_vax_classes = num_vax_doses*num_vax_types + 1                 # + 1 for unvaccinated
num_total_classes = (num_disease_classes+1)*(num_age_groups*num_vax_classes) #+1 for incidence tracker
source(paste(getwd(),"/(2)_inital_state.R",sep=""))
##(C) Run the model!
if (complete_model_runs == 1){run_type="point"
} else if (complete_model_runs > 1){run_type="rand"}
incidence_log_tracker=data.frame()
source(paste(getwd(),"/(3)_disease_characteristics.R",sep=""))
strain = strain_inital
# (ii) proportion of cases symptomatic
if (run_type == "point"){gamma=1-0.133
}else if (run_type == "rand"){gamma=1-rnorm(1,mean=0.133,sd=0.0102)}     #confidence interval around Meru's ACT specific analysis
gamma = rep(gamma,num_age_groups)
suscept <- read.csv("1_inputs/susceptibility.csv",header=TRUE)
suscept = suscept$susceptibility
#(iii) modification factor on infectiousness of asymptomatic cases
lota = 0.5 #taken from Doherty Institute estimate
### (B/E) Latent period
if (run_type == "point"){
if (strain_inital == 'delta' | strain_inital == 'WT'){
AverageLatentPeriod = 3.71
} else if (strain_inital == 'omicron'){
AverageLatentPeriod = 2.22
}
}else if (run_type == "rand"){AverageLatentPeriod = rlnorm(1,meanlog = 1.3, sd=0.2)}
lambda = 1/AverageLatentPeriod
### (C/E) Symptomatic period
if (run_type == "point"){
if (strain_inital == 'delta' | strain_inital == 'WT'){
AverageSymptomaticPeriod = 10.9
} else if (strain_inital == 'omicron'){
AverageSymptomaticPeriod = 9.87
}
}else if (run_type == "rand"){AverageSymptomaticPeriod = runif(1,min=7,max=14)} #taken from Zachreson et al., 2021, COMEBACK use ACT bounds
delta = 1/AverageSymptomaticPeriod
### (D/E) Waning of infection-derived immunity
lengthInfectionDerivedImmunity = 180 #days
omega = 1/lengthInfectionDerivedImmunity
load(file = "1_inputs/NG_rho.Rdata")
if (strain_inital == 'delta' | strain_inital == 'WT'){
rho = mean(immunity_from_infection$ve_predict_mean[immunity_from_infection$outcome == "acquisition" &
immunity_from_infection$strain == 'delta' & immunity_from_infection$days<=lengthInfectionDerivedImmunity])
} else if (strain_inital == 'omicron'){
rho = mean(immunity_from_infection$ve_predict_mean[immunity_from_infection$outcome == "acquisition" &
immunity_from_infection$strain == 'omicron' & immunity_from_infection$days<=lengthInfectionDerivedImmunity])
}
### (E/E) Beta - fitting parameter
if (NPI_toggle == 'stringency'){ NPI_estimates = NPI_estimates_full[,-c(3)]
} else if (NPI_toggle == 'contain_health'){ NPI_estimates = NPI_estimates_full[,-c(2)]}
colnames(NPI_estimates) <- c('date','NPI')
if(date_start <=max(NPI_estimates$date)){
NPI_inital = NPI_estimates$NPI[NPI_estimates$date==date_start]
} else {
if (NPI_outbreak_toggle == "final"){
NPI_inital = NPI_estimates$NPI[NPI_estimates$date == max(NPI_estimates$date)] # peak is 40.8
}
if (NPI_outbreak_toggle == "delta_peaks"){
#NPI_inital = NPI_estimates$NPI[NPI_estimates$date == as.Date('2021-07-07')] #peak is 62.3
NPI_inital = mean(NPI_estimates$NPI[NPI_estimates$date > as.Date('2021-01-01')&NPI_estimates$date<as.Date('2021-08-01')])
#average of two delta peaks in 2021
}
}
NPI = NPI_inital = as.numeric(NPI_inital)/100
#LIMITATION WARNING: no age-specific susceptibility to infection is included (no delta data available)
source(paste(getwd(),"/(function)_calculate_R0_Reff.R",sep=""))
#### This program calculates R0, and Reff
require(tidyverse)
#(A) setup
if (strain == 'WT'){R0_to_fit = 2.79
} else if (strain == "delta"){R0_to_fit = 5.08}
contact_matrix_adjust = matrix(data = 0, nrow = num_age_groups, ncol = num_age_groups)
for (i in 1:num_age_groups){
for (j in 1:num_age_groups){
contact_matrix_adjust[i,j] = contact_matrix[i,j] * pop[i]/pop[j]
}
}
contact_matrix_adjust
contact_matrix
pop
pop
i
j
pop[i]/pop[j]
num_age_groups
rm(list=ls())                                                               # clear global environment
source("~/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/CommandDeck.R", echo=TRUE)
source("~/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/(2)_inital_state.R", echo=TRUE)
source("~/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/(2)_inital_state.R", echo=TRUE)
source("~/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/CommandDeck.R", echo=TRUE)
vax_age_strategy = "oldest"
vax_dose_strategy = 2
vax_strategy_vaccine_type = "AstraZeneca"
#options: "Moderna","Pfizer","AstraZeneca","Johnson & Johnson","Sinopharm","Sinovac"
if (vax_strategy_vaccine_type == "Johnson & Johnson"){vax_dose_strategy == 1}
vax_strategy_vaccine_interval = 7*3 #(days) interval between first and second dose
vax_strategy_num_doses = as.integer(10000000)
vax_strategy_max_expected_cov = 0.8 #between 0-1 % of total age group expected to be vaccinated
vax_strategy_start_date = as.Date('2022-01-20')
vax_strategy_roll_out_speed = 50000 #doses delivered per day
#####(2/3) Enact strategy ######################################################
###(A/C) Calculate the eligible population
# = % max poss coverage * pop_size - existing vaccine coverage
eligible_pop = data.frame(pop_setting)
#set max poss coverage
eligible_pop$pop = round(eligible_pop$pop * vax_strategy_max_expected_cov)
colnames(eligible_pop) = c('age_group','eligible_individuals')
pop
eligible_pop
pop*0.8
#make long by dose
workshop = data.frame()
for (i in 1:num_vax_doses){
this_dose = as.data.frame(eligible_pop) %>% mutate(dose = i)
workshop = rbind(workshop,this_dose)
}
eligible_pop= workshop
eligible_pop
#remove already vaccinated individuals
existing_coverage = data.frame(eligible_pop$age_group,eligible_pop$dose,rep(0,num_age_groups*num_vax_doses))
colnames(existing_coverage) = c('age_group','dose','cov_to_date')
for (t in 1:num_vax_types){
for (d in 1:num_vax_doses){
#need to sum across vaccine_coverage (as this is vaccination_history_FINAL split across age groups)
existing_coverage$cov_to_date[existing_coverage$dose == d] =
existing_coverage$cov_to_date[existing_coverage$dose == d] + vaccine_coverage_end_history[(J*(t+(d-1)*T) - J+1):(J*(t+(d-1)*T))]
}
}
eligible_pop <- eligible_pop %>% left_join(existing_coverage) %>%
mutate(eligible_individuals = round(eligible_individuals *(1-cov_to_date))) %>%
select(age_group,dose,eligible_individuals)
eligible_pop
existing_coverage
#####(2/3) Enact strategy ######################################################
eligible_pop = data.frame(pop_setting)
eligible_pop
colnames(eligible_pop) = c('age_group','eligible_individuals')
eligible_pop
eligible_pop = data.frame(pop_setting)
colnames(eligible_pop) = c('age_group','eligible_individuals')
#make long by dose
workshop = data.frame()
for (i in 1:num_vax_doses){
this_dose = as.data.frame(eligible_pop) %>% mutate(dose = i)
workshop = rbind(workshop,this_dose)
}
eligible_pop= workshop
eligible_pop
pop
#remove already vaccinated individuals
existing_coverage = data.frame(eligible_pop$age_group,eligible_pop$dose,rep(0,num_age_groups*num_vax_doses))
colnames(existing_coverage) = c('age_group','dose','cov_to_date')
for (t in 1:num_vax_types){
for (d in 1:num_vax_doses){
#need to sum across vaccine_coverage (as this is vaccination_history_FINAL split across age groups)
existing_coverage$cov_to_date[existing_coverage$dose == d] =
existing_coverage$cov_to_date[existing_coverage$dose == d] + vaccine_coverage_end_history[(J*(t+(d-1)*T) - J+1):(J*(t+(d-1)*T))]
}
}
existing_coverage
multiplier
eligible_pop <- eligible_pop %>% left_join(existing_coverage) %>%
mutate(eligible_individuals = round(eligible_individuals *(1-cov_to_date)))
eligible_pop
eligible_pop %>% group_by(dose) %>% summarise(eligible_pop=n())
eligible_pop <- aggregate(eligible_pop$eligible_individuals, by=list(eligible_pop$dose), FUN=sum)
eligible_pop
eligible_pop$/pop
eligible_pop$x/sum(pop)
#####(2/3) Enact strategy ######################################################
###(A/C) Calculate the eligible population
eligible_pop = data.frame(pop_setting)
colnames(eligible_pop) = c('age_group','eligible_individuals')
#make long by dose
workshop = data.frame()
for (i in 1:num_vax_doses){
this_dose = as.data.frame(eligible_pop) %>% mutate(dose = i)
workshop = rbind(workshop,this_dose)
}
eligible_pop= workshop
#remove already vaccinated individuals
existing_coverage = data.frame(eligible_pop$age_group,eligible_pop$dose,rep(0,num_age_groups*num_vax_doses))
colnames(existing_coverage) = c('age_group','dose','cov_to_date')
for (t in 1:num_vax_types){
for (d in 1:num_vax_doses){
#need to sum across vaccine_coverage (as this is vaccination_history_FINAL split across age groups)
existing_coverage$cov_to_date[existing_coverage$dose == d] =
existing_coverage$cov_to_date[existing_coverage$dose == d] + vaccine_coverage_end_history[(J*(t+(d-1)*T) - J+1):(J*(t+(d-1)*T))]
}
}
eligible_pop <- eligible_pop %>% left_join(existing_coverage) %>%
mutate(eligible_individuals = round(eligible_individuals *(1-cov_to_date))) %>%
select(age_group,dose,eligible_individuals)
1-aggregate(eligible_pop$eligible_individuals, by=list(eligible_pop$dose), FUN=sum)$x/sum(pop)
workshop <- vaccination_history_FINAL[vaccination_history_FINAL$date == as.Date('2022-02-22'),]
aggregate(workshop$coverage_this_date, by=list(workshop$dose), FUN=sum)
1-aggregate(eligible_pop$eligible_individuals, by=list(eligible_pop$dose), FUN=sum)$x/sum(pop)
## CHECK - aligns!
1-aggregate(eligible_pop$eligible_individuals, by=list(eligible_pop$dose), FUN=sum)$x/sum(pop)
workshop <- vaccination_history_FINAL[vaccination_history_FINAL$date == as.Date('2022-02-22'),]
aggregate(workshop$coverage_this_date, by=list(workshop$dose), FUN=sum)
eligible_pop
eligible_pop = data.frame(pop_setting)
colnames(eligible_pop) = c('age_group','eligible_individuals')
#make long by dose
workshop = data.frame()
for (i in 1:num_vax_doses){
this_dose = as.data.frame(eligible_pop) %>% mutate(dose = i)
workshop = rbind(workshop,this_dose)
}
eligible_pop= workshop
#remove already vaccinated individuals
existing_coverage = data.frame(eligible_pop$age_group,eligible_pop$dose,rep(0,num_age_groups*num_vax_doses))
colnames(existing_coverage) = c('age_group','dose','cov_to_date')
for (t in 1:num_vax_types){
for (d in 1:num_vax_doses){
#need to sum across vaccine_coverage (as this is vaccination_history_FINAL split across age groups)
existing_coverage$cov_to_date[existing_coverage$dose == d] =
existing_coverage$cov_to_date[existing_coverage$dose == d] + vaccine_coverage_end_history[(J*(t+(d-1)*T) - J+1):(J*(t+(d-1)*T))]
}
}
## CHECK - aligns!
workshop<- eligible_pop %>% left_join(existing_coverage) %>%
mutate(eligible_individuals = round(eligible_individuals *(1-cov_to_date))) %>%
select(age_group,dose,eligible_individuals)
1-aggregate(workshop$eligible_individuals, by=list(workshop$dose), FUN=sum)$x/sum(pop)
workshop <- vaccination_history_FINAL[vaccination_history_FINAL$date == as.Date('2022-02-22'),]
aggregate(workshop$coverage_this_date, by=list(workshop$dose), FUN=sum)
#now remove
unreachable = 1-vax_strategy_max_expected_cov
eligible_pop <- eligible_pop %>% left_join(existing_coverage) %>%
mutate(eligible_individuals = round(eligible_individuals *(1-(cov_to_date+unreachable)))) %>%
select(age_group,dose,eligible_individuals)
eligible_pop
#NOTE: some with dose 2 > dose 1
#Assume covered by existing vaccine supply and/or never likely to get second dose?
eligible_pop$eligible_individuals[eligible_pop$dose == 2] - eligible_pop$eligible_individuals[eligible_pop$dose == 1]
100*sum(eligible_pop$eligible_individuals[eligible_pop$dose == 2] - eligible_pop$eligible_individuals[eligible_pop$dose == 1])/sum(pop)
#NOTE: some with dose 2 > dose 1
#Assume covered by existing vaccine supply and/or never likely to get second dose?
check = eligible_pop$eligible_individuals[eligible_pop$dose == 2] -
eligible_pop$eligible_individuals[eligible_pop$dose == 1] -
vaccination_history_FINAL$coverage_this_date[vaccination_history_FINAL$date = max(vaccination_history_FINAL$date) & vaccination_history_FINAL$vaccine_type == "Johnson & Johnson"]
#NOTE: some with dose 2 > dose 1
#Assume covered by existing vaccine supply and/or never likely to get second dose?
check = eligible_pop$eligible_individuals[eligible_pop$dose == 2] -
eligible_pop$eligible_individuals[eligible_pop$dose == 1] -
vaccination_history_FINAL$coverage_this_date[vaccination_history_FINAL$date == max(vaccination_history_FINAL$date) & vaccination_history_FINAL$vaccine_type == "Johnson & Johnson"]
check
eligible_pop$eligible_individuals[eligible_pop$dose == 2] -
eligible_pop$eligible_individuals[eligible_pop$dose == 1]
100*sum(eligible_pop$eligible_individuals[eligible_pop$dose == 2] - eligible_pop$eligible_individuals[eligible_pop$dose == 1])/sum(pop) -
vaccination_history_FINAL$coverage_this_date[vaccination_history_FINAL$date == max(vaccination_history_FINAL$date) & vaccination_history_FINAL$vaccine_type == "Johnson & Johnson"]
#NOTE: some with dose 2 > dose 1
#Assume covered by existing vaccine supply and/or never likely to get second dose?
eligible_pop$eligible_individuals[eligible_pop$dose == 2] - eligible_pop$eligible_individuals[eligible_pop$dose == 1]
100*sum(eligible_pop$eligible_individuals[eligible_pop$dose == 2] - eligible_pop$eligible_individuals[eligible_pop$dose == 1])/sum(pop) -
vaccination_history_FINAL$coverage_this_date[vaccination_history_FINAL$date == max(vaccination_history_FINAL$date) & vaccination_history_FINAL$vaccine_type == "Johnson & Johnson"]
#NOTE: some with dose 2 > dose 1
#Assume covered by existing vaccine supply and/or never likely to get second dose?
sum(eligible_pop$eligible_individuals[eligible_pop$dose == 2] - eligible_pop$eligible_individuals[eligible_pop$dose == 1]) -
vaccination_history_FINAL$coverage_this_date[vaccination_history_FINAL$date == max(vaccination_history_FINAL$date) & vaccination_history_FINAL$vaccine_type == "Johnson & Johnson"] * sum(pop)
#NOTE: some with dose 2 > dose 1
#Assume covered by existing vaccine supply and/or never likely to get second dose?
sum(eligible_pop$eligible_individuals[eligible_pop$dose == 2] - eligible_pop$eligible_individuals[eligible_pop$dose == 1]) -
vaccination_history_FINAL$coverage_this_date[vaccination_history_FINAL$date == max(vaccination_history_FINAL$date) & vaccination_history_FINAL$vaccine_type == "Johnson & Johnson"] * sum(pop)
sum(eligible_pop$eligible_individuals[eligible_pop$dose == 2] - eligible_pop$eligible_individuals[eligible_pop$dose == 1])
#NOTE: some with dose 2 > dose 1
#Assume covered by existing vaccine supply and/or never likely to get second dose?
workshoP_JJ =  vaccination_history_FINAL$coverage_this_date[vaccination_history_FINAL$date == max(vaccination_history_FINAL$date) & vaccination_history_FINAL$vaccine_type == "Johnson & Johnson"]
#NOTE: some with dose 2 > dose 1
#Assume covered by existing vaccine supply and/or never likely to get second dose?
workshop_JJ =  vaccination_history_FINAL$coverage_this_date[vaccination_history_FINAL$date == max(vaccination_history_FINAL$date) & vaccination_history_FINAL$vaccine_type == "Johnson & Johnson"]
sum(eligible_pop$eligible_individuals[eligible_pop$dose == 2] - eligible_pop$eligible_individuals[eligible_pop$dose == 1]) -
workshop_JJ/100* sum(pop)
#NOTE: some with dose 2 > dose 1
#Assume covered by existing vaccine supply and/or never likely to get second dose?
workshop_JJ =  vaccination_history_FINAL$coverage_this_date[vaccination_history_FINAL$date == max(vaccination_history_FINAL$date) & vaccination_history_FINAL$vaccine_type == "Johnson & Johnson"]
diff_dose_one_two  = sum(eligible_pop$eligible_individuals[eligible_pop$dose == 2] - eligible_pop$eligible_individuals[eligible_pop$dose == 1])
diff_dose_one_two - workshop_JJ/100* sum(pop)
100*diff_dose_one_two/sum(pop) - workshop_JJ
setting
vax_type_list
pop
pop/sum(pop)
0.173*sum(pop)
source("~/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/CommandDeck.R", echo=TRUE)
sum(pop)
sum(pop)*0.4
setting
sum(pop)
sum(pop)*(0.516-0.18)
sum(pop)*(0.516-0.18)/(10*30)
sum(pop)*(0.516-0.18)/(9*30)
