group_by(outcome) %>%
summarise(overall = sum(proj))
#adding some extra detail
append_high_risk = severe_outcome_log_tidy  %>%
filter(format(date,format = "%Y") == 2023) %>%
filter(risk_group == risk_group_name) %>%
group_by(outcome) %>%
summarise(high_risk = sum(proj))
append_booster_doses = booster_doses_delivered %>%
summarise(overall = sum(doses_delivered)) %>%
mutate(outcome = 'booster_doses_delivered')
append_booster_doses_risk = booster_doses_delivered %>%
filter(risk_group == risk_group_name) %>%
rename(high_risk = doses_delivered) %>%
mutate(outcome = 'booster_doses_delivered') %>%
select(-risk_group)
outcomes_without_antivirals = rbind(outcomes_without_antivirals,append_booster_doses)
append_risk = rbind(append_high_risk,append_booster_doses_risk)
outcomes_without_antivirals = outcomes_without_antivirals %>% left_join(append_risk, by = 'outcome')
#ASSUMPTION: only symptomatic cases lead to severe outcomes
prop_sympt = param_age %>%
filter(country == setting) %>%
ungroup() %>%
filter(param == 'prop_sympt') %>%
select(-param)
likelihood_severe_outcome = severe_outcome_this_run %>%
filter(date >= date_start) %>%
left_join(reinfection_protection, by = c("date", "age_group")) %>%
mutate(percentage = percentage*(1-protection)) %>%
select(-outcome_long,-protection) %>%
left_join(prop_sympt,by= c('age_group' = 'agegroup')) %>%
mutate(percentage = percentage * (1/value)) %>%
select(-value)
###need to include variables which inform vaccination scenario and target group
outcomes_without_antivirals = outcomes_without_antivirals %>%
mutate(vax_scenario = vax_strategy_description,
vax_scenario_risk_group = risk_group_name)
likelihood_severe_outcome = likelihood_severe_outcome %>%
mutate(vax_scenario = vax_strategy_description,
vax_scenario_risk_group = risk_group_name)
incidence_log_tidy = incidence_log_tidy %>%
filter(date >= date_start) %>%
mutate(vax_scenario = vax_strategy_description,
vax_scenario_risk_group = risk_group_name)
exposed_log = exposed_log %>%
mutate(vax_scenario = vax_strategy_description,
vax_scenario_risk_group = risk_group_name)
incidence_log = incidence_log %>%
mutate(vax_scenario = vax_strategy_description,
vax_scenario_risk_group = risk_group_name)
vaccination_history_FINAL = vaccination_history_FINAL %>%
mutate(vax_scenario = vax_strategy_description,
vax_scenario_risk_group = risk_group_name)
RECORD_outcomes_without_antivirals = rbind(RECORD_outcomes_without_antivirals,outcomes_without_antivirals)
RECORD_likelihood_severe_outcome   = rbind(RECORD_likelihood_severe_outcome,likelihood_severe_outcome)
RECORD_incidence_log_tidy          = rbind(RECORD_incidence_log_tidy,incidence_log_tidy)
RECORD_vaccination_history_FINAL   = rbind(RECORD_vaccination_history_FINAL,vaccination_history_FINAL)
RECORD_exposed_log                 = rbind(RECORD_exposed_log,exposed_log)
RECORD_incidence_log               = rbind(RECORD_incidence_log,incidence_log)
RECORD_antiviral_setup = list(outcomes_without_antivirals = RECORD_outcomes_without_antivirals,
prop_sympt = prop_sympt, #only static dependency
likelihood_severe_outcome = RECORD_likelihood_severe_outcome,
incidence_log_tidy = RECORD_incidence_log_tidy,
exposed_log = RECORD_exposed_log,
incidence_log = RECORD_incidence_log,
vaccination_history_FINAL = RECORD_vaccination_history_FINAL,
generic_booster_toggles = RECORD_generic_booster_toggles)
save(RECORD_antiviral_setup, file = paste(rootpath,"x_results/antiviralSetUp_",setting_beta,"_",this_risk_group_name,"_",Sys.Date(),".Rdata",sep=''))
sensitivity_analysis_toggles
ticket
commands
unique(RECORD_outcomes_without_antivirals$vax_scenario)
ticket = 6
commands = queue[[ticket]]
commands
VE_loop = 0
vax_strategy_description = commands$vax_strategy_description
risk_group_name = commands$risk_group_name
risk_group_toggle = commands$risk_group_toggle
booster_toggles = commands$booster_toggles
if ('risk_group_toggle' %in% names(commands)) { risk_group_toggle = commands$risk_group_toggle}
if ('vax_strategy_toggles' %in% names(commands)) { vax_strategy_toggles = commands$vax_strategy_toggles}
if ('vax_risk_strategy_toggle' %in% names(commands)) { vax_risk_strategy_toggle = commands$vax_risk_strategy_toggle}
if ('apply_risk_strategy_toggles' %in% names(commands)) { apply_risk_strategy_toggles = commands$apply_risk_strategy_toggles}
if ('vax_strategy_description_long' %in% names(commands)) { vax_strategy_description = paste(vax_strategy_description,commands$vax_strategy_description_long,sep=': ')}
if (risk_group_name == "pregnant_women"){
RR_estimate  = RR_default =  2.4
} else if (risk_group_name == "adults_with_comorbidities"){
RR_estimate  = RR_default = 1.95
}
source(paste(getwd(),"/CommandDeck.R",sep=""),local=TRUE)
#check outcomes without antivirals! running ticket = 6, then need to re-run Antiviral run and see plot!
date_now
outcome
day
ticket
setting
date_now
outcome
VE_tracker
day
for (day in 140:num_time_steps){
workshop = VE_time_step(strain_now,date_start+day,outcome)
workshop = workshop %>% mutate(date=day,
outcome_VE=outcome)
VE_tracker = rbind(VE_tracker,workshop)
}
#       (1/2) Setup
####################################################################
#load libraries
library(readr)
library(deSolve)
library(rvest)
library(ggplot2)
library(gridExtra)
library(ggpubr)
library(tidyverse)
day
outcome
for (day in 140:num_time_steps){
workshop = VE_time_step(strain_now,date_start+day,outcome)
workshop = workshop %>% mutate(date=day,
outcome_VE=outcome)
VE_tracker = rbind(VE_tracker,workshop)
}
VE_tracker$date = date_start + VE_tracker$date
workshop = crossing(risk_group = risk_group_labels,
dose = 0,
vaccine_type = "unvaccinated",
age_group = age_group_labels,
date = unique(incidence_log$date),
outcome_VE = c('death','severe_disease'),
VE = 0)
VE_tracker = rbind(VE_tracker,workshop)
if ('VE_adults_comorb' %in% names(sensitivity_analysis_toggles)){
VE_tracker =  VE_tracker %>%
mutate(VE = case_when(
risk_group == risk_group_name & age_group %in% c("30 to 44","45 to 59") ~ VE * sensitivity_analysis_toggles$VE_adults_comorb,
TRUE ~ VE
))
}
#(B/C)
load(file = '1_inputs/severe_outcome_FINAL.Rdata')
severe_outcome_FINAL = severe_outcome_FINAL %>% filter(country == setting)
if (risk_group_toggle == "on"){
#if risk-group included, then adjust general population incidence rate so pop-level estimates stay the same
severe_outcomes_list = unique(severe_outcome_FINAL$outcome)
severe_outcome_FINAL_wRisk = data.frame()
for (o in 1:length(severe_outcomes_list)){
this_outcome = severe_outcomes_list[o]
for (i in 1:num_age_groups){
this_age = age_group_labels[i]
row = severe_outcome_FINAL %>% filter(outcome == this_outcome & age_group == this_age)
IR = row$percentage
P = pop_setting$pop[pop_setting$age_group == this_age]
P_general = pop_risk_group_dn$pop[pop_risk_group_dn$risk_group == 'general_public' & pop_risk_group_dn$age_group == this_age]
P_risk = pop_risk_group_dn$pop[pop_risk_group_dn$risk_group == risk_group_name & pop_risk_group_dn$age_group == this_age]
if (P != (P_general+P_risk)){stop('Line 15 P_general + P_risk != P_overall')}
IR_gen = ((IR*P)/((RR_estimate*P_risk)/P_general +1))/P_general
IR_risk = ((IR*P)/(P_general/(RR_estimate*P_risk) +1))/P_risk
row_gen = row %>% mutate(percentage = IR_gen,risk_group = 'general_public')
row_risk = row %>% mutate(percentage = IR_risk,risk_group = risk_group_name)
severe_outcome_FINAL_wRisk = rbind(severe_outcome_FINAL_wRisk,row_gen,row_risk)
}
}
severe_outcome_FINAL_wRisk$percentage[is.na(severe_outcome_FINAL_wRisk$percentage)]=0
severe_outcome_FINAL = severe_outcome_FINAL_wRisk
rm(IR_gen, IR_risk, row_gen, row_risk, severe_outcomes_list, severe_outcome_FINAL_wRisk, row, this_age, P, P_general, P_risk)
}
#(C/C) calculate severe outcome incidence by vax_status
if (risk_group_toggle == "on"){
if (risk_group_name == "pregnant_women"){  # Add excess neonatal deaths due to increased risk of stillbirth or preterm delivery
#ASSUMPTION - no dependence on pregnant woman's age
stillbirth_prev = 15.6/1000
stillbirth_risk = 1.80
preterm_prev = 6.2/1000
preterm_risk = 1.47
row = crossing(outcome = 'neonatal_deaths',
outcome_long = 'adverse pregnancy outcome resulting in neonatal death',
age_group  = age_group_labels,
percentage = ((stillbirth_risk-1)*stillbirth_prev + (preterm_risk-1)*preterm_prev),
variant = strain_now,
outcome_VE = 'severe_disease',
risk_group = 'pregnant_women')
severe_outcome_FINAL = bind_rows(severe_outcome_FINAL,row)
rm(row, stillbirth_prev, stillbirth_risk, preterm_prev, preterm_risk)
}
severe_outcome_this_run = severe_outcome_FINAL %>%
left_join(VE_tracker, by = c("age_group", "outcome_VE", "risk_group")) %>%
mutate(percentage = percentage*(1-VE)) %>%
select(date,outcome,outcome_long,age_group,risk_group,vaccine_type,dose,percentage)
} else{
severe_outcome_this_run = severe_outcome_FINAL %>%
left_join(VE_tracker, by = c("age_group", "outcome_VE")) %>%
mutate(percentage = percentage*(1-VE)) %>%
select(date,outcome,outcome_long,age_group,risk_group,vaccine_type,dose,percentage)
}
rm(VE_tracker, VE_time_step, severe_outcome_FINAL,workshop)
incidence_log_tracker <-rbind(incidence_log_tracker,incidence_log[,c('daily_cases','date')])
source(paste(getwd(),"/(6)_severe_outcome_proj.R",sep=""),local=TRUE)
if (complete_model_runs>1){
summary_over_runs <-
incidence_log_tracker %>%
group_by(date) %>%
dplyr::summarise(average_daily_cases = mean(daily_cases),
UCI = CI(daily_cases)[1],
LCI = CI(daily_cases)[3])
}
rm(incidence_log_tracker)
#       (4/4) Basic plots
#####################################################################
plot_standard = theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
axis.line = element_line(color = 'black'))
if (exists("plotting") == FALSE){plotting = "off"}
if (ticket == 1 | plotting == "on"){
incidence_log_plot = incidence_log %>% filter(date >= date_start) %>%
mutate(           cumulative_incidence = cumsum(daily_cases),
cumulative_incidence_percentage = 100*cumsum(daily_cases)/sum(pop))
plot1 <- ggplot() +
geom_line(data=incidence_log_plot,aes(x=date,y=rolling_average),na.rm=TRUE) +
xlab("") +
scale_x_date(date_breaks="1 month", date_labels="%b") +
ylab("daily cases") +
ylim(0,150000)+
plot_standard
plot2 <- ggplot() +
geom_line(data=incidence_log_plot,aes(x=date,y=cumulative_incidence),na.rm=TRUE) +
xlab("") +
scale_x_date(date_breaks="1 month", date_labels="%b") +
ylab("cumulative cases") +
plot_standard
grid.arrange(plot1, plot2, nrow=2)
}
if (debug == "on" | fitting_details == "on"){
#number as % of whole population
lay <- rbind(c(1,2),c(3,3))
plot1 <-
ggplot() +
geom_line(data=incidence_log_plot,aes(x=date,y=rolling_average_percentage),na.rm=TRUE) +
xlab("") + #ylim(0,1.0)+
scale_x_date(date_breaks="1 month", date_labels="%b") +
ylab("daily cases % whole pop") +
plot_standard
plot2 <- ggplot() +
geom_line(data=Reff_tracker,aes(x=date,y=Reff),na.rm=TRUE) +
xlab("") +
scale_x_date(date_breaks="1 month", date_labels="%b") +
#ylim(0,6) +
ylab("Reff") +
plot_standard
plot3<- ggplot() +
geom_line(data=incidence_log_plot,aes(x=date,y=cumulative_incidence_percentage),na.rm=TRUE) +
xlab("") +
scale_x_date(date_breaks="1 month", date_labels="%b") +
ylab("cumulative cases % whole pop") +
plot_standard
grid.arrange(plot1, plot2, plot3, layout_matrix = lay)
plot4 = ggplot(rho_tracker_dataframe) + geom_line(aes(x=date,y=rho))
plot5 = ggplot(VE_tracker_dataframe) + geom_line(aes(x=date,y=VE,color=as.factor(dose)))
lay <- rbind(c(1,2),c(3,3),c(4,5))
grid.arrange(plot1,plot2,plot3,plot4,plot5, layout_matrix = lay)
}
#__________________________________________________________________
outcomes_without_antivirals = severe_outcome_log_tidy  %>%
filter(format(date,format = "%Y") == 2023) %>%
group_by(outcome) %>%
summarise(overall = sum(proj))
#adding some extra detail
append_high_risk = severe_outcome_log_tidy  %>%
filter(format(date,format = "%Y") == 2023) %>%
filter(risk_group == risk_group_name) %>%
group_by(outcome) %>%
summarise(high_risk = sum(proj))
append_booster_doses = booster_doses_delivered %>%
summarise(overall = sum(doses_delivered)) %>%
mutate(outcome = 'booster_doses_delivered')
append_booster_doses_risk = booster_doses_delivered %>%
filter(risk_group == risk_group_name) %>%
rename(high_risk = doses_delivered) %>%
mutate(outcome = 'booster_doses_delivered') %>%
select(-risk_group)
outcomes_without_antivirals = rbind(outcomes_without_antivirals,append_booster_doses)
append_risk = rbind(append_high_risk,append_booster_doses_risk)
outcomes_without_antivirals = outcomes_without_antivirals %>% left_join(append_risk, by = 'outcome')
#ASSUMPTION: only symptomatic cases lead to severe outcomes
prop_sympt = param_age %>%
filter(country == setting) %>%
ungroup() %>%
filter(param == 'prop_sympt') %>%
select(-param)
likelihood_severe_outcome = severe_outcome_this_run %>%
filter(date >= date_start) %>%
left_join(reinfection_protection, by = c("date", "age_group")) %>%
mutate(percentage = percentage*(1-protection)) %>%
select(-outcome_long,-protection) %>%
left_join(prop_sympt,by= c('age_group' = 'agegroup')) %>%
mutate(percentage = percentage * (1/value)) %>%
select(-value)
###need to include variables which inform vaccination scenario and target group
outcomes_without_antivirals = outcomes_without_antivirals %>%
mutate(vax_scenario = vax_strategy_description,
vax_scenario_risk_group = risk_group_name)
likelihood_severe_outcome = likelihood_severe_outcome %>%
mutate(vax_scenario = vax_strategy_description,
vax_scenario_risk_group = risk_group_name)
incidence_log_tidy = incidence_log_tidy %>%
filter(date >= date_start) %>%
mutate(vax_scenario = vax_strategy_description,
vax_scenario_risk_group = risk_group_name)
exposed_log = exposed_log %>%
mutate(vax_scenario = vax_strategy_description,
vax_scenario_risk_group = risk_group_name)
incidence_log = incidence_log %>%
mutate(vax_scenario = vax_strategy_description,
vax_scenario_risk_group = risk_group_name)
vaccination_history_FINAL = vaccination_history_FINAL %>%
mutate(vax_scenario = vax_strategy_description,
vax_scenario_risk_group = risk_group_name)
RECORD_outcomes_without_antivirals = rbind(RECORD_outcomes_without_antivirals,outcomes_without_antivirals)
RECORD_likelihood_severe_outcome   = rbind(RECORD_likelihood_severe_outcome,likelihood_severe_outcome)
RECORD_incidence_log_tidy          = rbind(RECORD_incidence_log_tidy,incidence_log_tidy)
RECORD_vaccination_history_FINAL   = rbind(RECORD_vaccination_history_FINAL,vaccination_history_FINAL)
RECORD_exposed_log                 = rbind(RECORD_exposed_log,exposed_log)
RECORD_incidence_log               = rbind(RECORD_incidence_log,incidence_log)
View(RECORD_outcomes_without_antivirals)
sensitivity_analysis_toggles = list()
RECORD_antiviral_setup = list(outcomes_without_antivirals = RECORD_outcomes_without_antivirals,
prop_sympt = prop_sympt, #only static dependency
likelihood_severe_outcome = RECORD_likelihood_severe_outcome,
incidence_log_tidy = RECORD_incidence_log_tidy,
exposed_log = RECORD_exposed_log,
incidence_log = RECORD_incidence_log,
vaccination_history_FINAL = RECORD_vaccination_history_FINAL,
generic_booster_toggles = RECORD_generic_booster_toggles)
save.image(file = paste(rootpath,"x_results/antiviralSetUp_fullImage_",setting_beta,"_",this_risk_group_name,"_",Sys.Date(),".Rdata",sep=''))
save(RECORD_antiviral_setup, file = paste(rootpath,"x_results/antiviralSetUp_",setting_beta,"_",this_risk_group_name,"_",Sys.Date(),".Rdata",sep=''))
setting_beta
risk_group_name
TOGGLE_include_second_booster_elig
source(paste(getwd(),"/(antiviral)(run).R",sep=""),local=TRUE)
MASTER_RECORD_antiviral_model_simulations = data.frame()
settings_to_plot = c("FJI")
risk_groups_to_plot = c("adults_with_comorbidities")
for (r in 1:length(risk_groups_to_plot)){
this_risk_group = risk_groups_to_plot[r]
for (i in 1:length(settings_to_plot)){
this_setting = settings_to_plot[i]
list_poss_Rdata = list.files(path=paste(rootpath,"x_results/",sep=''),pattern = paste("AntiviralRun_",this_setting,"_",this_risk_group,"*",sep=""))
if (length(list_poss_Rdata)>0){
list_poss_Rdata_details = double()
for (j in 1:length(list_poss_Rdata)){
list_poss_Rdata_details = rbind(list_poss_Rdata_details,
file.info(paste(rootpath,'x_results/',list_poss_Rdata[[j]],sep=''))$mtime)
}
latest_file = list_poss_Rdata[[which.max(list_poss_Rdata_details)]]
load(file = paste(rootpath,"x_results/",latest_file,sep=''))
#load(file = paste(rootpath,'x_results/',"AntiviralRun_PNG_low_beta2023-02-04 11-50-47.Rdata",sep = ''))
if (this_setting == "PNG_low_beta" & !("PNG_high_beta" %in% settings_to_plot)){this_setting = "PNG"}
df_this_setting = RECORD_antiviral_model_simulations %>% mutate(setting_beta = this_setting)
MASTER_RECORD_antiviral_model_simulations = rbind(MASTER_RECORD_antiviral_model_simulations,df_this_setting)
}
}
}
RECORD_antiviral_model_simulations = MASTER_RECORD_antiviral_model_simulations
### PLOT (1/2) Vax vs. antivirals ##############################################
RECORD_antiviral_model_simulations = RECORD_antiviral_model_simulations %>%
mutate(vax_scenario_short = case_when(
vax_scenario == "all willing adults vaccinated with a primary schedule plus booster dose: assume booster to all adults who have previously recieved two booster doses"  ~
"booster to all 2nd booster",
vax_scenario == "all willing adults vaccinated with a primary schedule and high risk group recieve a booster: assume booster to all adults who have previously recieved two booster doses" ~
"booster to high-risk prev 2nd booster",
vax_scenario == "all willing adults vaccinated with a primary schedule plus booster dose: assume booster to all adults who have previously recieved a primary schedule" ~
"booster to all prev primary",
vax_scenario ==  "all willing adults vaccinated with a primary schedule plus booster dose: assume booster to all adults who have previously recieved a first booster dose" ~
"booster to all 1st booster",
vax_scenario == "all willing adults vaccinated with a primary schedule and high risk group recieve a booster: assume booster to all adults who have previously recieved a primary schedule" ~
"booster to high-risk prev primary",
vax_scenario ==  "all willing adults vaccinated with a primary schedule and high risk group recieve a booster: assume booster to all adults who have previously recieved a first booster dose" ~
"booster to high-risk prev 1st booster",
vax_scenario == "all willing adults vaccinated with a primary schedule" ~
"no booster"
))
LIST_outcomes = list('severe_disease',
'hosp',
'death',
'YLL'
)
### PLOT dose-impact of nirmatrelvir_ritonavir and booster doses
#option 1: boxplot
# workshop = RECORD_antiviral_model_simulations %>%
#   filter(antiviral_type == "nirmatrelvir_ritonavir" | intervention == 'vaccine') %>%
#   filter(antiviral_target_group == 'adults_with_comorbidities' | intervention == 'vaccine') %>%
#   filter( !(intervention == 'vaccine' & evaluation_group == 'high_risk')) %>% #change eval group here to change from high-risk to pop-level plot
#   #filter(!(intervention == 'vaccine' & vax_scenario == 'all willing adults vaccinated with a primary schedule plus booster dose')) %>%
#   #filter(result %in% c("average_doses_per_outcome_averted","UCI_doses_per_outcome_averted","LCI_doses_per_outcome_averted")) %>%
#   filter(result %in% c("doses_per_outcome_averted")) %>%
#   mutate(intervention = case_when(
#    # intervention == 'antiviral' ~ paste('antiviral starting',antiviral_start_date),
#     intervention == 'vaccine' ~ paste('booster starting 2023-03-01'),
#     TRUE ~ intervention
#   )) %>%
#   filter(value>0) %>%
#   #filter(vax_scenario_short != "booster to high-risk prev first booster") %>%
#   filter(intervention == 'booster starting 2023-03-01')
#option 2: median and IQR plot
workshop = RECORD_antiviral_model_simulations %>%
filter(vax_scenario_risk_group == "adults_with_comorbidities") %>%
filter(antiviral_type == "nirmatrelvir_ritonavir" | intervention == 'vaccine') %>%
filter(antiviral_target_group == 'adults_with_comorbidities' | intervention == 'vaccine') %>%
filter( evaluation_group == 'pop_level') %>% #change eval group here to change from high-risk to pop-level plot
filter(result %in% c("doses_per_outcome_averted")) %>%
mutate(intervention = case_when(
intervention == 'vaccine' ~ paste('booster dose starting 2023-03-01'),
TRUE ~ intervention
)) %>% group_by(setting_beta,intervention,outcome,antiviral_type,antiviral_target_group,evaluation_group,vax_scenario,vax_scenario_risk_group,result,vax_scenario_short) %>%
summarise(median = median(value), LQ = quantile(value,probs=0.25), UQ = quantile(value,probs=0.75))
options(warn = -1)
plot_list = list()
for (a in 1:length(LIST_outcomes)) {
this_outcome = LIST_outcomes[[a]]
#option 1: boxplot
# plot_list[[a]] =ggplot(data = workshop[workshop$outcome == this_outcome ,]) +
#   geom_boxplot(aes(x=value,y=vax_scenario_short,color=as.factor(setting_beta)))  +
#   labs(title = paste(this_outcome), color = 'intervention') +
#   ylab('')+
#   xlab('doses to avert an outcome') #+
#   #facet_grid(intervention ~ .)
# #option 2: IQR and median
plot_list[[a]] =ggplot(data = workshop[workshop$outcome == this_outcome,]) +
geom_pointrange(aes(x=median,y=vax_scenario_short,
xmin=LQ,xmax=UQ,
color=as.factor(intervention),
shape = as.factor(setting_beta)
))  +
labs(title = paste(this_outcome),
color = 'intervention',
shape = "setting") +
ylab('')+
xlim(0,max(workshop$UQ[workshop$outcome == this_outcome])) +
xlab('doses to avert an outcome') +
theme_bw()+
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.position = "bottom",
legend.box = "vertical")
}
ggarrange(plot_list[[1]],plot_list[[2]],plot_list[[3]], plot_list[[4]],
common.legend = TRUE,
legend="bottom",
ncol = 1,
nrow = length(LIST_outcomes))
#ggsave(paste(rootpath,"x_results/plot_VaxVsAntivirals_",time,".png",sep=''), width = 9.6, height = 5.7)
options(warn = 0)
#       (1/2) Setup
####################################################################
#load libraries
library(readr)
library(deSolve)
library(rvest)
library(ggplot2)
library(gridExtra)
library(ggpubr)
library(tidyverse)
source("C:/Users/u6044061/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/workshop - add cumulative incidence.R", echo=TRUE)
source("C:/Users/u6044061/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/workshop - add cumulative incidence.R", echo=TRUE)
source("C:/Users/u6044061/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/workshop - add cumulative incidence.R", echo=TRUE)
source("C:/Users/u6044061/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/workshop - add cumulative incidence.R", echo=TRUE)
source("C:/Users/u6044061/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/workshop - add cumulative incidence.R", echo=TRUE)
cases_averted_log %>%
rename(booster_doses_delivered = overall) %>%
filter(is.na(doses_per_case_averted) == FALSE) %>%
select(setting,vax_scenario_short,percentage_cases_averted*100,percentage_older_cases_averted*100)
cases_averted_log %>%
rename(booster_doses_delivered = overall) %>%
filter(is.na(doses_per_case_averted) == FALSE) %>%
select(setting,vax_scenario_short,percentage_cases_averted*100,percentage_older_cases_averted*100)
cases_averted_log %>%
rename(booster_doses_delivered = overall) %>%
filter(is.na(doses_per_case_averted) == FALSE) %>%
mutate(percentage_cases_averted = percentage_cases_averted*100,
percentage_high_risk_case_averted = percentage_high_risk_case_averted * 100,
percentage_older_cases_averted = percentage_older_cases_averted *100)
cases_averted_log %>%
rename(booster_doses_delivered = overall) %>%
filter(is.na(doses_per_case_averted) == FALSE) %>%
mutate(percentage_cases_averted = percentage_cases_averted*100,
percentage_high_risk_case_averted = percentage_high_risk_case_averted * 100,
percentage_older_cases_averted = percentage_older_cases_averted *100) %>%
select(setting,vax_scenario_short,percentage_cases_averted,percentage_high_risk_case_averted,percentage_older_cases_averted)
cases_averted_log %>%
rename(booster_doses_delivered = overall) %>%
filter(is.na(doses_per_case_averted) == FALSE) %>%
filter(vax_scenario_short %in% c('booster to all prev primary','bosoter to high-risk prev primary'))
cases_averted_log %>%
rename(booster_doses_delivered = overall) %>%
filter(is.na(doses_per_case_averted) == FALSE) %>%
filter(vax_scenario_short %in% c('booster to all prev primary','bosoter to high-risk prev primary')) %>%
mutate(percentage_cases_averted = percentage_cases_averted*100,
percentage_high_risk_case_averted = percentage_high_risk_case_averted * 100,
percentage_older_cases_averted = percentage_older_cases_averted *100) %>%
select(setting,vax_scenario_short,percentage_cases_averted,percentage_high_risk_case_averted,percentage_older_cases_averted)
cases_averted_log %>%
rename(booster_doses_delivered = overall) %>%
filter(is.na(doses_per_case_averted) == FALSE) %>%
filter(vax_scenario_short %in% c('booster to all prev primary','booster to high-risk prev primary')) %>%
mutate(percentage_cases_averted = percentage_cases_averted*100,
percentage_high_risk_case_averted = percentage_high_risk_case_averted * 100,
percentage_older_cases_averted = percentage_older_cases_averted *100) %>%
select(setting,vax_scenario_short,percentage_cases_averted,percentage_high_risk_case_averted,percentage_older_cases_averted)
