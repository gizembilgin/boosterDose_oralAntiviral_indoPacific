# strain  count  mean     sd
# 1 delta       5 1.03  0.109
# 2 omicron    13 0.530 0.0450
infection_sympt_ratio = workshop %>% group_by(strain) %>%
summarise(count = sum(is.na(ratio)),
mean = mean(ratio,na.rm=TRUE),
sd = sd(ratio,na.rm=TRUE))
#_________________________
#(C/D) compare VE against omicron (where avaliable) to delta
delta = VE_estimates[VE_estimates$strain == 'delta',] %>%
select(outcome,vaccine_type,dose,VE) %>%
rename(delta = VE)
omicron = VE_estimates[VE_estimates$strain == 'omicron',] %>%
select(outcome,vaccine_type,dose,VE) %>%
rename(omicron = VE)
workshop = delta %>% left_join(omicron) %>%
mutate(ratio = omicron/delta)
workshop %>% summarise(mean = mean(ratio,na.rm=TRUE),
sd = sd(ratio,na.rm=TRUE))
# mean        sd
# 1 0.6210314 0.1543049
workshop %>% group_by(dose) %>%
summarise(mean = mean(ratio,na.rm=TRUE),
sd = sd(ratio,na.rm=TRUE))
# dose  mean    sd
# 1     1 0.540 0.171
# 2     2 0.651 0.148
workshop %>% group_by(outcome) %>%
summarise(count = sum(is.na(ratio)),
mean = mean(ratio,na.rm=TRUE),
sd = sd(ratio,na.rm=TRUE))
# outcome             count    mean      sd
# 1 any_infection           9   0.447  0.0225
# 2 death                  11 NaN     NA
# 3 severe_disease          6   0.620  0.164
# 4 symptomatic_disease     7   0.710  0.112
delta_omicron_ratio = workshop %>% group_by(outcome) %>%
summarise(count = sum(is.na(ratio)),
mean = mean(ratio,na.rm=TRUE),
sd = sd(ratio,na.rm=TRUE))
delta_omicron_ratio$mean[delta_omicron_ratio$outcome == 'death'] = delta_omicron_ratio$mean[delta_omicron_ratio$outcome == 'severe_disease']
#since death is missing
#_________________________
#(D/D) dose one to two
dose_one = VE_estimates[VE_estimates$dose == 1,] %>%
#filter(vaccine_type != "Johnson & Johnson") %>%
select(strain,outcome,vaccine_type,VE) %>%
rename(dose_one = VE)
dose_two = VE_estimates[VE_estimates$dose == 2,] %>%
#filter(vaccine_type != "Johnson & Johnson") %>%
select(strain,outcome,vaccine_type,VE) %>%
rename(dose_two = VE)
workshop = dose_one %>% left_join(dose_two) %>%
mutate(ratio = dose_one/dose_two)
# mean        sd
# 1 0.7445608 0.1569164
workshop %>% summarise(mean = mean(ratio,na.rm=TRUE),
sd = sd(ratio,na.rm=TRUE))
workshop %>% group_by(strain) %>%
summarise(count = sum(is.na(ratio)),
mean = mean(ratio,na.rm=TRUE),
sd = sd(ratio,na.rm=TRUE))
# strain  count  mean    sd
# 1 delta       6 0.755 0.139
# 2 omicron    16 0.709 0.232
workshop %>% group_by(vaccine_type) %>%
summarise(count = sum(is.na(ratio)),
mean = mean(ratio,na.rm=TRUE),
sd = sd(ratio,na.rm=TRUE))
# vaccine_type count  mean     sd
# 1 AstraZeneca      4 0.783 0.122
# 2 Johnson & Johnson4 0.755 0.258
# 2 Moderna          5 0.798 0.0949
# 3 Pfizer           2 0.735 0.203
# 4 Sinopharm        5 0.642 0.164
# 5 Sinovac          6 0.769 0.220
workshop %>% group_by(outcome) %>%
summarise(count = sum(is.na(ratio)),
mean = mean(ratio,na.rm=TRUE),
sd = sd(ratio,na.rm=TRUE))
# outcome             count  mean     sd
# 1 any_infection           6 0.698 0.146
# 2 death                   7 0.885 0.0500
# 3 severe_disease          4 0.830 0.129
# 4 symptomatic_disease     5 0.596 0.106
dose_ratio = workshop %>% group_by(outcome) %>%
summarise(count = sum(is.na(ratio)),
mean = mean(ratio,na.rm=TRUE),
sd = sd(ratio,na.rm=TRUE))
#_________________________
#_________________________________________________________________________________________________________________________________________
##### (2/2) Impute missing values based on previous analysis ###################################################################################
#COMEBACK - this is clunky!
workshop = VE_estimates %>%
mutate(source = case_when(
is.na(VE) == FALSE ~ 'literature',
TRUE ~ 'imputed'
))
#Step One: estimate dose one from dose two
for (s in unique(workshop$strain)){
for (t in unique(workshop$vaccine_type)){
#if (t != "Johnson & Johnson"){
for (o in unique(workshop$outcome)){
workshop_rows = workshop[workshop$strain == s & workshop$vaccine_type == t & workshop$outcome == o, ]
if (workshop_rows$source[workshop_rows$dose == 1] == "imputed" &
workshop_rows$source[workshop_rows$dose == 2] == "literature"){
estimate = workshop_rows$VE[workshop_rows$dose == 2] * dose_ratio$mean[dose_ratio$outcome == o]
workshop$VE[workshop$strain == s & workshop$vaccine_type == t & workshop$outcome == o & workshop$dose == 1] = estimate
workshop$source_extend[workshop$strain == s & workshop$vaccine_type == t & workshop$outcome == o & workshop$dose == 1] = "dose one estimated from dose two"
}
}
#}
}
}
sum(workshop$source_extend == "dose one estimated from dose two",na.rm=TRUE)
t="Johnson & Johnson"
workshop_rows = workshop[workshop$strain == s & workshop$vaccine_type == t & workshop$outcome == o, ]
o
#Step Two: estimate severe_disease <-> death, and acquisition <-> symptomatic
#(A/B) severe_disease <-> death
#close enough to one, thus set equal
for (s in unique(workshop$strain)){
for (t in unique(workshop$vaccine_type)){
for (d in c(1,2)){
#if(!(d == 2 & t == "Johnson & Johnson")){
workshop_rows = workshop[workshop$strain == s & workshop$vaccine_type == t & workshop$dose == d & workshop$outcome %in% c('death','severe_disease'), ]
#severe_outcome -> death
if (workshop_rows$source[workshop_rows$outcome == 'death'] == "imputed" &
is.na(workshop_rows$source_extend[workshop_rows$outcome == 'death']) &
is.na(workshop_rows$VE[workshop_rows$outcome == 'severe_disease']) == FALSE){ #NOTE ASSUMPTION - may be imputing from already imputed value!!!
estimate = workshop_rows$VE[workshop_rows$outcome == 'severe_disease']
workshop$VE[workshop$strain == s & workshop$vaccine_type == t & workshop$outcome == 'death' & workshop$dose == d] = estimate
workshop$source_extend[workshop$strain == s & workshop$vaccine_type == t & workshop$outcome == 'death' & workshop$dose == d] = "death inferred from severe_disease"
}
#death -> severe_outcome
if (workshop_rows$source[workshop_rows$outcome == 'severe_disease'] == "imputed" &
is.na(workshop_rows$source_extend[workshop_rows$outcome == 'severe_disease']) &
is.na(workshop_rows$VE[workshop_rows$outcome == 'death']) == FALSE){ #NOTE ASSUMPTION - may be imputing from already imputed value!!!
estimate = workshop_rows$VE[workshop_rows$outcome == 'death']
workshop$VE[workshop$strain == s & workshop$vaccine_type == t & workshop$outcome == 'severe_disease' & workshop$dose == d] = estimate
workshop$source_extend[workshop$strain == s & workshop$vaccine_type == t & workshop$outcome == 'severe_disease' & workshop$dose == d] = "severe_disease inferred from death"
}
#}
}
}
}
sum(workshop$source_extend == "death inferred from severe_disease",na.rm=TRUE) # n = 11
sum(workshop$source_extend == "severe_disease inferred from death",na.rm=TRUE) # n = 0
workshop[workshop$source_extend == "death inferred from severe_disease",]
#(B/B) acquisition <-> symptomatic
for (s in unique(workshop$strain)){
for (t in unique(workshop$vaccine_type)){
for (d in c(1,2)){
#if(!(d == 2 & t == "Johnson & Johnson")){
workshop_rows = workshop[workshop$strain == s & workshop$vaccine_type == t & workshop$dose == d & workshop$outcome %in% c('any_infection','symptomatic_disease'), ]
#any infection -> symptomatic infection
if (workshop_rows$source[workshop_rows$outcome == 'any_infection'] == "imputed" &
is.na(workshop_rows$source_extend[workshop_rows$outcome == 'any_infection']) &
is.na(workshop_rows$VE[workshop_rows$outcome == 'symptomatic_disease']) == FALSE){ #NOTE ASSUMPTION - may be imputing from already imputed value!!!
estimate = workshop_rows$VE[workshop_rows$outcome == 'symptomatic_disease'] * infection_sympt_ratio$mean[infection_sympt_ratio$strain == s]
workshop$VE[workshop$strain == s & workshop$vaccine_type == t & workshop$outcome == 'any_infection' & workshop$dose == d] = estimate
workshop$source_extend[workshop$strain == s & workshop$vaccine_type == t & workshop$outcome == 'any_infection' & workshop$dose == d] = "any_infection inferred from symptomatic_disease"
}
#symptomatic infection -> any infection
if (workshop_rows$source[workshop_rows$outcome == 'symptomatic_disease'] == "imputed" &
is.na(workshop_rows$source_extend[workshop_rows$outcome == 'symptomatic_disease']) &
is.na(workshop_rows$VE[workshop_rows$outcome == 'any_infection']) == FALSE){ #NOTE ASSUMPTION - may be imputing from already imputed value!!!
estimate = workshop_rows$VE[workshop_rows$outcome == 'any_infection'] * 1/infection_sympt_ratio$mean[infection_sympt_ratio$strain == s]
workshop$VE[workshop$strain == s & workshop$vaccine_type == t & workshop$outcome == 'symptomatic_disease' & workshop$dose == d] = estimate
workshop$source_extend[workshop$strain == s & workshop$vaccine_type == t & workshop$outcome == 'symptomatic_disease' & workshop$dose == d] = "symptomatic_disease inferred from any_infection"
}
#}
}
}
}
sum(workshop$source_extend == "any_infection inferred from symptomatic_disease",na.rm=TRUE) # n = 4
sum(workshop$source_extend == "symptomatic_disease inferred from any_infection",na.rm=TRUE) # n = 5
workshop[workshop$source_extend == "symptomatic_disease inferred from any_infection",]
workshop %>% filter(source_extend == "symptomatic_disease inferred from any_infection")
#Step Three: estimate omicron from delta
for (o in unique(workshop$outcome)){
for (t in unique(workshop$vaccine_type)){
#if (!(d == 2 & t == "Johnson & Johnson")){
for (d in c(1,2)){
workshop_rows = workshop[workshop$dose == d & workshop$vaccine_type == t & workshop$outcome == o, ]
if (workshop_rows$source[workshop_rows$strain == "omicron"] == "imputed" &
is.na(workshop_rows$source_extend[workshop_rows$strain == 'omicron']) &
is.na(workshop_rows$VE[workshop_rows$strain == 'delta']) == FALSE){
estimate = workshop_rows$VE[workshop_rows$strain == 'delta'] * delta_omicron_ratio$mean[delta_omicron_ratio$outcome == o]
workshop$VE[workshop$dose == d & workshop$vaccine_type == t & workshop$outcome == o & workshop$strain == "omicron"] = estimate
workshop$source_extend[workshop$dose == d & workshop$vaccine_type == t & workshop$outcome == o & workshop$strain == "omicron"] = "omicron estimated from delta"
}
}#}
}
}
sum(workshop$source_extend =="omicron estimated from delta",na.rm=TRUE)
workshop[is.na(workshop$VE),]
if (nrow(workshop[is.na(workshop$VE),])>0){stop('Some values to go!')}
VE_estimates_imputed = workshop %>%
mutate(vaccine_type_long = case_when(
vaccine_type == "AstraZeneca" ~ "AstraZeneca Vaxzevria (ChAdOx1)",
vaccine_type == "Johnson & Johnson" ~ "Johnson & Johnson Janssen (Ad26.COV2.S)",
vaccine_type == "Moderna" ~ "Moderna Spikevax (mRNA-1273)",
vaccine_type == "Pfizer" ~ "Pfizer-BioNTech Comirnaty (BNT162b2)",
vaccine_type == "Sinopharm" ~ "Sinopharm BIBP vaccine",
vaccine_type == "Sinovac" ~ "Sinovac Biotech CoronaVac"
),
vaccine_mode = case_when(
vaccine_type == 'Pfizer' ~ 'mRNA',
vaccine_type == 'Moderna' ~ 'mRNA',
vaccine_type == 'AstraZeneca' ~ 'viral',
vaccine_type == 'Sinopharm' ~ 'viral',
vaccine_type == 'Sinovac' ~ 'viral',
vaccine_type == 'Johnson & Johnson' ~ 'viral'
),
outcome_family = case_when(
outcome %in% c('any_infection','symptomatic_disease') ~ 'acquisition',
outcome %in% c('severe_disease','death') ~ 'severe_outcome'
))
strain = 'omicron'
to_plot = VE_estimates_imputed[VE_estimates_imputed$strain == strain &VE_estimates_imputed$dose !=3,]
plot_list = list()
for (i in 1:length(unique(to_plot$outcome))){
outcome = unique(to_plot$outcome)[i]
plot_list [[i]] <- ggplot(data=to_plot[to_plot$outcome==outcome,]) +
geom_pointrange(aes(x=VE,y=vaccine_type_long,color=as.factor(dose),shape=source,xmin=lower_est,xmax=upper_est)) +
xlim(0,100) +
xlab("") +
theme_bw() +
scale_shape_manual(values=c(1,19)) +
ylab("") +
labs(title=paste("VE against ",outcome,sep=""))
}
plot_VE_point_estimates = ggarrange(plot_list[[1]],plot_list[[2]],plot_list[[3]],plot_list[[4]],
common.legend = TRUE,
legend="bottom")
#annotate_figure(plot, top = text_grob(paste('VE estimates against',strain), size = 18))
plot_VE_point_estimates
###(1/3) Load distributions ('acqusition' and 'severe outcomes')
#COMEBACK - loading NG day-day waning
#distribution for viral (AZ reference) and mRNA (Pfizer reference) for dose 1,2, and 3 (booster is mRNA only)
load(file = "1_inputs/NG_VE_processed.Rdata")
load_distribution <- VE_together %>%
mutate(vaccine_type = gsub("AZ", "AstraZeneca", vaccine_type),
vaccine_mode = case_when(
vaccine_type == 'Pfizer' ~ 'mRNA',
vaccine_type == 'AstraZeneca' ~ 'viral'),
outcome_family = case_when(
outcome %in% c('acquisition') ~ 'acquisition',
outcome %in% c('hospitalisation') ~ 'severe_outcome'
#COMEBACK - options =  "symptoms"        "hospitalisation" "death"           "acquisition"     "transmission"
)
) %>%
filter(is.na(outcome_family) == FALSE) %>%
group_by(outcome,strain,vaccine_mode,dose) %>%
mutate(VE_internal = ve_predict_mean / max(ve_predict_mean)) %>%
ungroup() %>%
select(vaccine_mode,dose,outcome_family,strain,days,VE_internal)
###(2/3) Apply distributions
apply_distribution = VE_estimates_imputed %>% left_join(load_distribution, by =  c("outcome_family","dose","vaccine_mode","strain")) %>%
select('strain','outcome','vaccine_mode','vaccine_type','dose','days','VE','VE_internal')  %>%
mutate(VE_days = VE * VE_internal/100)
###(3/3) Plot distributions and save VE_waning_distribution
#(A/B) Plot
waning_to_plot = apply_distribution %>%
filter(dose < 3) %>%
filter(vaccine_type %in% vax_type_list) %>%
filter(outcome %in% c('any_infection','severe_disease','death')) %>%
mutate(immunity = paste(vaccine_type,dose))
strain_test = 'omicron'
waning_shape_plot_list = list()
for (i in 1:length(unique(waning_to_plot$outcome))){
proj_outcome = unique(waning_to_plot$outcome)[i]
waning_shape_plot_list[[i]]  <- ggplot() +
geom_line(data=waning_to_plot[waning_to_plot$outcome == proj_outcome & waning_to_plot$strain == strain_test,],
aes(x=days,y=VE_days,color=as.factor(immunity)),na.rm=TRUE) +
labs(title=(paste("Waning of VE against",proj_outcome,"(",strain_test,')'))) +
xlab("days since vaccination") +
ylab("% max protection") +
ylim(0,1)+
theme_bw() +
theme(panel.grid.major = element_blank(),panel.grid.minor = element_blank())
}
waning_shape_plot_list
#(B/B) Save
waning = apply_distribution %>% mutate(waning = TRUE)
no_waning = apply_distribution %>% mutate(waning = FALSE) %>%
group_by(strain,outcome,vaccine_type,dose) %>%
mutate(VE_days = max(VE_days))
VE_waning_distribution = rbind(waning,no_waning) %>% select(strain,outcome,vaccine_type,dose,days,VE_days,waning)
save(VE_waning_distribution, file = '1_inputs/VE_waning_distribution.Rdata')
#calc
vaccine_coverage = crossing(risk_group = risk_group_labels,
dose = c(1:num_vax_doses),
vaccine_type = unique(vaccination_history_FINAL$vaccine_type),
age_group = age_group_labels,
cov = c(0)) # CHECKED:vaccine coverage long like E/I/R structure
for (r in 1:num_risk_groups){ # risk group
for (i in 1:J){             # age
for (t in 1:T){           # vaccine type
for (d in 1:D){         # vaccine dose
workshop_type =  unique(vaccination_history_FINAL$vaccine_type)[t]
workshop_age  = age_group_labels[i]
workshop_risk = risk_group_labels[r]
this_vax_max_date = max(vaccination_history_FINAL$date[vaccination_history_FINAL$vaccine_type == workshop_type])
if (workshop_type == "Johnson & Johnson" & d == 2){ #avoid J&J dose 2, otherwise NA and stuffs up vax_type order #COMEBACK BOOSTER J&J
} else{
if ((date_start - vaccine_coverage_delay[d])<= this_vax_max_date &
(date_start - vaccine_coverage_delay[d])>= min(vaccination_history_FINAL$date)){
workshop_value =  vaccination_history_FINAL$coverage_this_date[
vaccination_history_FINAL$date == date_start - vaccine_coverage_delay[d]
& vaccination_history_FINAL$age_group == workshop_age
& vaccination_history_FINAL$risk_group == workshop_risk
& vaccination_history_FINAL$dose == d
& vaccination_history_FINAL$vaccine_type == workshop_type] / 100
vaccine_coverage$cov[
vaccine_coverage$dose == d &
vaccine_coverage$vaccine_type == workshop_type &
vaccine_coverage$age_group == workshop_age &
vaccine_coverage$risk_group == workshop_risk
] = max(workshop_value,0)
} else if ((date_start - vaccine_coverage_delay[d])> this_vax_max_date){
workshop_value =
vaccination_history_FINAL$coverage_this_date[
vaccination_history_FINAL$date == this_vax_max_date
& vaccination_history_FINAL$dose == d
& vaccination_history_FINAL$age_group == workshop_age
& vaccination_history_FINAL$risk_group == workshop_risk
& vaccination_history_FINAL$vaccine_type == workshop_type]/100
vaccine_coverage$cov[
vaccine_coverage$dose == d &
vaccine_coverage$vaccine_type == workshop_type &
vaccine_coverage$age_group == workshop_age &
vaccine_coverage$risk_group == workshop_risk
] =  max(workshop_value,0)
}
}
}
}
}
}
vaccine_coverage$cov[is.na(vaccine_coverage$cov)] = 0
vaccine_coverage
unique(vaccination_history_POP$vaccine_type)
unique(vaccination_history_FINAL$vaccine_type)
#calc
vaccine_coverage = crossing(risk_group = risk_group_labels,
dose = c(1:num_vax_doses),
vaccine_type = unique(vaccination_history_FINAL$vaccine_type),
age_group = age_group_labels,
cov = c(0)) # CHECKED:vaccine coverage long like E/I/R structure
for (r in 1:num_risk_groups){ # risk group
for (i in 1:J){             # age
for (t in 1:T){           # vaccine type
for (d in 1:D){         # vaccine dose
workshop_type =  unique(vaccination_history_FINAL$vaccine_type)[t]
workshop_age  = age_group_labels[i]
workshop_risk = risk_group_labels[r]
this_vax_max_date = max(vaccination_history_FINAL$date[vaccination_history_FINAL$vaccine_type == workshop_type])
#if (workshop_type == "Johnson & Johnson" & d == 2){ #avoid J&J dose 2, otherwise NA and stuffs up vax_type order #COMEBACK BOOSTER J&J
#} else{
if ((date_start - vaccine_coverage_delay[d])<= this_vax_max_date &
(date_start - vaccine_coverage_delay[d])>= min(vaccination_history_FINAL$date)){
workshop_value =  vaccination_history_FINAL$coverage_this_date[
vaccination_history_FINAL$date == date_start - vaccine_coverage_delay[d]
& vaccination_history_FINAL$age_group == workshop_age
& vaccination_history_FINAL$risk_group == workshop_risk
& vaccination_history_FINAL$dose == d
& vaccination_history_FINAL$vaccine_type == workshop_type] / 100
vaccine_coverage$cov[
vaccine_coverage$dose == d &
vaccine_coverage$vaccine_type == workshop_type &
vaccine_coverage$age_group == workshop_age &
vaccine_coverage$risk_group == workshop_risk
] = max(workshop_value,0)
} else if ((date_start - vaccine_coverage_delay[d])> this_vax_max_date){
workshop_value =
vaccination_history_FINAL$coverage_this_date[
vaccination_history_FINAL$date == this_vax_max_date
& vaccination_history_FINAL$dose == d
& vaccination_history_FINAL$age_group == workshop_age
& vaccination_history_FINAL$risk_group == workshop_risk
& vaccination_history_FINAL$vaccine_type == workshop_type]/100
vaccine_coverage$cov[
vaccine_coverage$dose == d &
vaccine_coverage$vaccine_type == workshop_type &
vaccine_coverage$age_group == workshop_age &
vaccine_coverage$risk_group == workshop_risk
] =  max(workshop_value,0)
}
#}
}
}
}
}
vaccine_coverage$cov[is.na(vaccine_coverage$cov)] = 0
vaccine_coverage
View(vaccine_coverage)
source("C:/Users/u6044061/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/(2)_inital_state.R", echo=TRUE)
VR_this_step
age_group_labels
vaxCovDelay
###### (1/4) Vaccination
#(A/B) Coverage
#(i/iv) Delay ____________________________________
vaxCovDelay = crossing(dose = seq(1,num_vax_doses),delay = 0)
vaxCovDelay = vaxCovDelay %>%
mutate(delay = case_when(
dose == 1 ~ 21,#number of days till protection from first dose, COMEBACK - J&J full protection after 14 days?
TRUE ~ 14 #all other doses
))
VR_this_step = crossing(dose = seq(1:D),
age_group = age_group_labels,
doses = 0)
for (d in 1:D){
for (i in 2:J){ #COMEBACK - could be faster with less for loop, assumption that don't vaccinate 0-4
if (date_now <= max(this_vax_history$date[this_vax_history$dose_number == d])+vaxCovDelay$delay[vaxCovDelay$dose == d] &
date_now > min(this_vax_history$date[this_vax_history$dose_number == d])+vaxCovDelay$delay[vaxCovDelay$dose == d]){
VR_this_step$doses[VR_this_step$dose == d & VR_this_step$age_group == age_group_labels[i]] =
this_vax_history$doses_delivered_this_date[this_vax_history$date ==  as.Date(date_now) - vaxCovDelay$delay[vaxCovDelay$dose == d] &
this_vax_history$dose_number==d &
this_vax_history$age_group == age_group_labels[i]]
}
}
}
warnings()
for (d in 1:D){
for (i in 2:J){ #COMEBACK - could be faster with less for loop, assumption that don't vaccinate 0-4
if (date_now <= max(this_vax_history$date[this_vax_history$dose == d])+vaxCovDelay$delay[vaxCovDelay$dose == d] &
date_now > min(this_vax_history$date[this_vax_history$dose == d])+vaxCovDelay$delay[vaxCovDelay$dose == d]){
VR_this_step$doses[VR_this_step$dose == d & VR_this_step$age_group == age_group_labels[i]] =
this_vax_history$doses_delivered_this_date[this_vax_history$date ==  as.Date(date_now) - vaxCovDelay$delay[vaxCovDelay$dose == d] &
this_vax_history$dose==d &
this_vax_history$age_group == age_group_labels[i]]
}
}
}
VR_this_step
VE_distribution <- VE_waning_distribution[VE_waning_distribution$outcome == outcome &
VE_waning_distribution$strain == strain_now,]
#(2) doses delivered to this date
vax_to_this_date <- vaccination_history_FINAL[vaccination_history_FINAL$date <= date_now,]
vax_to_this_date <- vax_to_this_date %>% # rearrange AIR dataset
select(risk_group,vaccine_type,dose,date,age_group,doses_delivered_this_date) %>%
rename(doses = doses_delivered_this_date)
total_doses_up_to_this_date <- aggregate(vax_to_this_date$doses,
by=list(Category=vax_to_this_date$risk_group, vax_to_this_date$vaccine_type, vax_to_this_date$dose,vax_to_this_date$age_group)
, FUN=sum)
colnames(total_doses_up_to_this_date) <- c('risk_group','vaccine_type','dose','age_group','total_delivered')
vax_to_this_date <- vax_to_this_date %>%
left_join(total_doses_up_to_this_date) %>%
mutate(prop = case_when(
total_delivered >0 ~ doses/total_delivered,
total_delivered == 0 ~ 0
),
days = as.numeric(date_now - date ))
#<interlude> to add together all days >365 to 365
meddling <- vax_to_this_date[vax_to_this_date$days > 364,]
if(length(unique(meddling$days))>1){
meddling <- aggregate(meddling$prop,
by=list(Category=meddling$risk_group, meddling$vaccine_type, meddling$dose,meddling$age_group)
, FUN=sum)
colnames(meddling)  = c('risk_group','vaccine_type','dose','age_group','prop')
meddling = meddling %>% mutate(days=365)
vax_to_this_date <- rbind(vax_to_this_date[vax_to_this_date$days<365,c(colnames(meddling))],
meddling)
}
#(3) Bring VE d'n and AIR history together
workshop <- vax_to_this_date %>%
left_join(VE_distribution) %>%
select(risk_group,vaccine_type,dose,days,age_group,VE_days,prop) %>%
mutate(VE_weighted = VE_days*prop)
#(4) Aggregate to estimate population VE for doses
workshop <- aggregate(workshop$VE_weighted,
by=list(Category=workshop$risk_group,workshop$dose,workshop$vaccine_type,workshop$age_group)
, FUN=sum)
colnames(workshop) <- c('risk_group','dose','vaccine_type','age_group','VE')
workshop
source("C:/Users/u6044061/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/CommandDeck.R", echo=TRUE)
watch = vaccine_coverage
colnames(watch) = c('dose','vaccine_type','agegroup','cov')
watch = watch %>% left_join(pop_setting) %>%
mutate(pop=pop/sum(pop_setting$pop),
interim = cov*pop)
aggregate(watch$interim, by=list(category=watch$dose),FUN=sum)
watch = vaccine_coverage
colnames(watch) = c('dose','vaccine_type','age_group','cov')
watch = watch %>% left_join(pop_setting) %>%
mutate(pop=pop/sum(pop_setting$pop),
interim = cov*pop)
watch
watch = vaccine_coverage
colnames(watch) = c('risk_group','dose','vaccine_type','age_group','cov')
watch = watch %>% left_join(pop_setting) %>%
mutate(pop=pop/sum(pop_setting$pop),
interim = cov*pop)
aggregate(watch$interim, by=list(category=watch$dose),FUN=sum)
sum(state_tidy$state_inital[state_tidy$age_group == '0 to 4'])/pop[1] #CHECKED = 1
sum(state_tidy$state_inital[state_tidy$age_group == '70 to 100'])/pop[7]
sum(state_tidy$state_inital[state_tidy$dose == 0])/sum(pop)
sum(state_tidy$state_inital[state_tidy$dose == 1])/sum(pop)
sum(state_tidy$state_inital[state_tidy$dose == 2])/sum(pop)
age = '70-100'
sum(state_tidy$state_inital[state_tidy$dose == 0 & state_tidy$age_group == age])/pop_setting$pop[pop_setting$agegroup == age]
sum(state_tidy$state_inital[state_tidy$dose == 1 & state_tidy$age_group == age])/pop_setting$pop[pop_setting$agegroup == age]
sum(state_tidy$state_inital[state_tidy$dose == 0 & state_tidy$age_group == age])/pop_setting$pop[pop_setting$age_group == age]
sum(state_tidy$state_inital[state_tidy$dose == 1 & state_tidy$age_group == age])/pop_setting$pop[pop_setting$age_group == age]
age = '70 to 100'
sum(state_tidy$state_inital[state_tidy$dose == 0 & state_tidy$age_group == age])/pop_setting$pop[pop_setting$age_group == age]
sum(state_tidy$state_inital[state_tidy$dose == 1 & state_tidy$age_group == age])/pop_setting$pop[pop_setting$age_group == age]
sum(state_tidy$state_inital[state_tidy$dose == 2 & state_tidy$age_group == age])/pop_setting$pop[pop_setting$age_group == age]
vax_strategy_vaccine_interval
