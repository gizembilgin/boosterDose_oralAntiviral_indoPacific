priority_num = 1
eligible_pop <- eligible_pop %>% mutate(doses_delivered = 0)
n=length(unique(eligible_pop$priority))
highest_priority = sort(unique(eligible_pop$priority),partial=n-1)[n-1] #highest valid priority
while (doses_to_deliver>0 & priority_num <= (highest_priority)){
priority_group = eligible_pop[eligible_pop$priority == priority_num,]
workshop = doses_to_deliver/vax_dose_strategy - sum(priority_group$eligible_individuals[priority_group$dose == 1]) #check enough for all priority groups
if (workshop < 0){
prop_to_deliver = doses_to_deliver/vax_dose_strategy / sum(priority_group$eligible_individuals[priority_group$dose == 1])
priority_group$doses_delivered[priority_group$dose == vax_dose_strategy] = prop_to_deliver * priority_group$eligible_individuals[priority_group$dose == vax_dose_strategy]
if (vax_dose_strategy == 2){priority_group$doses_delivered[priority_group$dose == 1] = prop_to_deliver * priority_group$eligible_individuals[priority_group$dose == 1] }
doses_to_deliver = 0
} else if (workshop>0){
priority_group$doses_delivered[priority_group$dose == vax_dose_strategy] =  priority_group$eligible_individuals[priority_group$dose == vax_dose_strategy]
doses_to_deliver = doses_to_deliver - sum(priority_group$eligible_individuals[priority_group$dose == vax_dose_strategy])
if (vax_dose_strategy == 2){
workshop2 = doses_to_deliver- sum(priority_group$eligible_individuals[priority_group$dose == 1])
if(workshop2 < 0){
prop_to_deliver = doses_to_deliver / sum(priority_group$eligible_individuals[priority_group$dose == 1])
priority_group$doses_delivered[priority_group$dose == 1] = doses_to_deliver
doses_to_deliver = 0
} else{
priority_group$doses_delivered[priority_group$dose == 1] = priority_group$eligible_individuals[priority_group$dose == 1]
doses_to_deliver = doses_to_deliver - sum(priority_group$eligible_individuals[priority_group$dose == 1])
}
}
}
eligible_pop$doses_delivered[eligible_pop$priority == priority_num] = priority_group$doses_delivered
priority_num = priority_num + 1
}
VA =  eligible_pop %>% mutate(doses_left = doses_delivered)
priority_num = 1
priority_group  = as.character(unique(VA$age_group[VA$priority == priority_num]))
if (vax_dose_strategy == 1){
ceiling = min(sum(eligible_pop$doses_delivered),vax_strategy_num_doses) #max delivery (either limited by eligible individuals, or available doses!)
timeframe = ceiling/vax_strategy_roll_out_speed
daily_per_dose = vax_strategy_roll_out_speed
} else if (vax_dose_strategy == 2){
ceiling =  min(sum(eligible_pop$doses_delivered),vax_strategy_num_doses)
if(ceiling/(vax_strategy_roll_out_speed*2)<vax_strategy_vaccine_interval){
timeframe = ceiling/(vax_strategy_roll_out_speed*2)
daily_per_dose = vax_strategy_roll_out_speed
} else{
timeframe = ceiling/(vax_strategy_roll_out_speed)
daily_per_dose = vax_strategy_roll_out_speed/2
}
}
#modify if end in sight of restriction date
if (is.na(restriction_date) == FALSE){
timeframe = as.numeric(restriction_date - vax_strategy_start_date) + 1
}
#modify if available doses restricted
if (nrow(vax_roll_out_speed_modifier)>0){
exception_list = unique(vax_roll_out_speed_modifier$day)
extension_time = sum(vax_roll_out_speed_modifier$doses_delivered_this_date)/daily_per_dose
timeframe = timeframe + extension_time
} else{
exception_list = c(-1)
}
timeframe = ceiling(timeframe)
length_track = timeframe
if (vax_dose_strategy == 2){length_track=length_track+vax_strategy_vaccine_interval}
vax_delivery_outline <- crossing(day = c(1:length_track),
dose = c(1:num_vax_doses),
age_group = age_group_labels,
doses_delivered = c(0))
for (day in 1:timeframe){
#for (day in 1:14){
#for (day in 1:(timeframe-1)){
avaliable = daily_per_dose
daily_per_dose_here = daily_per_dose
if (day %in% exception_list){
avaliable = vax_roll_out_speed_modifier$doses_avaliable[vax_roll_out_speed_modifier$day == day]
daily_per_dose_here = avaliable
}
#ensuring that we don't overshoot available doses
if (day == timeframe){
workshop_leftover = sum(vax_delivery_outline$doses_delivered_this_date)
avaliable = min(vax_strategy_num_doses/vax_dose_strategy-workshop_leftover,daily_per_dose)
#CHECK
if (nrow(vax_roll_out_speed_modifier)==0){
if(workshop_leftover != (timeframe-1)*daily_per_dose){stop('HA line 276 of vax strategies function')}
}
}
if (avaliable > sum(VA$doses_left)){avaliable = sum(VA$doses_left)}
while(avaliable>0 & priority_num <= highest_priority){
if(sum(VA$doses_left[VA$priority == priority_num])>0){
#i.e., while we still have doses to deliver in this priority group
if(0 %in% VA$doses_left[VA$priority == priority_num & VA$dose == 1]){
age_complete = VA$age_group[VA$doses_left == 0 & VA$priority == priority_num & VA$dose == 1]
VA$priority[VA$age_group %in% age_complete] = VA$priority[VA$age_group %in% age_complete] + 100
priority_group = as.character(unique(VA$age_group[VA$priority == priority_num]))
} #FIX - when one age group in the priority group runs out first
#ISSUE HERE
workshop_doses = min(sum(VA$doses_left[VA$priority == priority_num & VA$dose == 1]),
daily_per_dose_here)
#either deliver max capacity or number left in this group, whichever is fewer
leftover=0
VA_pt = VA #snapshot
for (i in length(priority_group):1){
workshop_age = priority_group[i]
workshop_prop = sum(VA_pt$doses_left[VA_pt$age_group == workshop_age])/sum(VA_pt$doses_left[VA_pt$priority == priority_num])
workshop_calc = workshop_doses * workshop_prop + leftover
if (workshop_calc > VA$doses_left[VA$age_group == workshop_age & VA$dose == 1]){
leftover = abs(workshop_calc - VA$doses_left[VA$age_group == workshop_age & VA$dose == 1])
workshop_calc = VA$doses_left[VA$age_group == workshop_age & VA$dose == 1]
} else{
leftover = 0
}
vax_delivery_outline$doses_delivered[vax_delivery_outline$day == day &
vax_delivery_outline$dose == 1 &
vax_delivery_outline$age_group == workshop_age] = workshop_calc
VA$doses_left[VA$age_group == workshop_age & VA$dose == 1] = VA$doses_left[VA$age_group == workshop_age & VA$dose == 1] - workshop_calc
if (vax_dose_strategy == 2){
vax_delivery_outline$doses_delivered[vax_delivery_outline$day == day + vax_strategy_vaccine_interval &
vax_delivery_outline$dose == 2 &
vax_delivery_outline$age_group == workshop_age] = workshop_calc
VA$doses_left[VA$age_group == workshop_age & VA$dose == 2] = VA$doses_left[VA$age_group == workshop_age & VA$dose == 2] - workshop_calc
}
}
avaliable = avaliable - workshop_doses
} else if (sum(VA$doses_left[VA$priority == priority_num])==0){
priority_num = priority_num+1
priority_group = as.character(unique(VA$age_group[VA$priority == priority_num]))
} else{
stop('negative doses left, reconsider!')
}
} #<end while loop>
}
VA =  eligible_pop %>% mutate(doses_left = doses_delivered)
priority_num = 1
priority_group  = as.character(unique(VA$age_group[VA$priority == priority_num]))
if (vax_dose_strategy == 1){
ceiling = min(sum(eligible_pop$doses_delivered),vax_strategy_num_doses) #max delivery (either limited by eligible individuals, or available doses!)
timeframe = ceiling/vax_strategy_roll_out_speed
daily_per_dose = vax_strategy_roll_out_speed
} else if (vax_dose_strategy == 2){
ceiling =  min(sum(eligible_pop$doses_delivered),vax_strategy_num_doses)
if(ceiling/(vax_strategy_roll_out_speed*2)<vax_strategy_vaccine_interval){
timeframe = ceiling/(vax_strategy_roll_out_speed*2)
daily_per_dose = vax_strategy_roll_out_speed
} else{
timeframe = ceiling/(vax_strategy_roll_out_speed)
daily_per_dose = vax_strategy_roll_out_speed/2
}
}
#modify if end in sight of restriction date
if (is.na(restriction_date) == FALSE){
timeframe = as.numeric(restriction_date - vax_strategy_start_date) + 1
}
#modify if available doses restricted
if (nrow(vax_roll_out_speed_modifier)>0){
exception_list = unique(vax_roll_out_speed_modifier$day)
extension_time = sum(vax_roll_out_speed_modifier$doses_delivered_this_date)/daily_per_dose
timeframe = timeframe + extension_time
} else{
exception_list = c(-1)
}
timeframe = ceiling(timeframe)
length_track = timeframe
if (vax_dose_strategy == 2){length_track=length_track+vax_strategy_vaccine_interval}
vax_delivery_outline <- crossing(day = c(1:length_track),
dose = c(1:num_vax_doses),
age_group = age_group_labels,
doses_delivered = c(0))
for (day in 1:timeframe){
#for (day in 1:14){
#for (day in 1:(timeframe-1)){
avaliable = daily_per_dose
daily_per_dose_here = daily_per_dose
if (day %in% exception_list){
avaliable = vax_roll_out_speed_modifier$doses_avaliable[vax_roll_out_speed_modifier$day == day]
daily_per_dose_here = avaliable
}
#ensuring that we don't overshoot available doses
if (day == timeframe){
workshop_leftover = sum(vax_delivery_outline$doses_delivered)
avaliable = min(vax_strategy_num_doses/vax_dose_strategy-workshop_leftover,daily_per_dose)
#CHECK
if (nrow(vax_roll_out_speed_modifier)==0){
if(workshop_leftover != (timeframe-1)*daily_per_dose){stop('HA line 276 of vax strategies function')}
}
}
if (avaliable > sum(VA$doses_left)){avaliable = sum(VA$doses_left)}
while(avaliable>0 & priority_num <= highest_priority){
if(sum(VA$doses_left[VA$priority == priority_num])>0){
#i.e., while we still have doses to deliver in this priority group
if(0 %in% VA$doses_left[VA$priority == priority_num & VA$dose == 1]){
age_complete = VA$age_group[VA$doses_left == 0 & VA$priority == priority_num & VA$dose == 1]
VA$priority[VA$age_group %in% age_complete] = VA$priority[VA$age_group %in% age_complete] + 100
priority_group = as.character(unique(VA$age_group[VA$priority == priority_num]))
} #FIX - when one age group in the priority group runs out first
#ISSUE HERE
workshop_doses = min(sum(VA$doses_left[VA$priority == priority_num & VA$dose == 1]),
daily_per_dose_here)
#either deliver max capacity or number left in this group, whichever is fewer
leftover=0
VA_pt = VA #snapshot
for (i in length(priority_group):1){
workshop_age = priority_group[i]
workshop_prop = sum(VA_pt$doses_left[VA_pt$age_group == workshop_age])/sum(VA_pt$doses_left[VA_pt$priority == priority_num])
workshop_calc = workshop_doses * workshop_prop + leftover
if (workshop_calc > VA$doses_left[VA$age_group == workshop_age & VA$dose == 1]){
leftover = abs(workshop_calc - VA$doses_left[VA$age_group == workshop_age & VA$dose == 1])
workshop_calc = VA$doses_left[VA$age_group == workshop_age & VA$dose == 1]
} else{
leftover = 0
}
vax_delivery_outline$doses_delivered[vax_delivery_outline$day == day &
vax_delivery_outline$dose == 1 &
vax_delivery_outline$age_group == workshop_age] = workshop_calc
VA$doses_left[VA$age_group == workshop_age & VA$dose == 1] = VA$doses_left[VA$age_group == workshop_age & VA$dose == 1] - workshop_calc
if (vax_dose_strategy == 2){
vax_delivery_outline$doses_delivered[vax_delivery_outline$day == day + vax_strategy_vaccine_interval &
vax_delivery_outline$dose == 2 &
vax_delivery_outline$age_group == workshop_age] = workshop_calc
VA$doses_left[VA$age_group == workshop_age & VA$dose == 2] = VA$doses_left[VA$age_group == workshop_age & VA$dose == 2] - workshop_calc
}
}
avaliable = avaliable - workshop_doses
} else if (sum(VA$doses_left[VA$priority == priority_num])==0){
priority_num = priority_num+1
priority_group = as.character(unique(VA$age_group[VA$priority == priority_num]))
} else{
stop('negative doses left, reconsider!')
}
} #<end while loop>
}
### formating vax_delivery_outline to align with vaccination_history_TRUE
vax_delivery_outline$date = vax_strategy_start_date + (vax_delivery_outline$day-1)
vax_delivery_outline$vaccine_type = vax_strategy_vaccine_type
if (vax_strategy_vaccine_type %in% c("Moderna","Pfizer")){
vax_delivery_outline$vaccine_mode = 'mRNA'
} else if (vax_strategy_vaccine_type %in% c("AstraZeneca","Johnson & Johnson","Sinopharm","Sinovac")){
vax_delivery_outline$vaccine_mode = 'viral'
}
vax_delivery_outline$coverage_this_date = NA #shouldn't be used anyway
names(vax_delivery_outline)[names(vax_delivery_outline) == 'doses_delivered'] <-'doses_delivered_this_date'
vax_delivery_outline = vax_delivery_outline %>%
select(date,vaccine_type,vaccine_mode,dose,coverage_this_date,doses_delivered_this_date,age_group)
#CHECK
workshop = aggregate(vax_delivery_outline$doses_delivered_this_date,by=list(vax_delivery_outline$age_group),FUN=sum)
colnames(workshop) = c('age_group','doses')
if (round(sum(workshop$doses)) != round(sum(eligible_pop$doses_delivered))) { #if not all doses delivered
if (is.na(restriction_date) == TRUE){ #if no restriction date -> error
stop('error line 350 of vax strategies function')
} else{ #else if restriction date
if (round(as.numeric(restriction_date - vax_strategy_start_date +1) * vax_strategy_roll_out_speed) == round(sum(workshop$doses))){
#if restriction date causing non delivery of doses
} else{
stop('error line 359 of vax strategies function')
}
}
}
ggplot(vax_delivery_outline) + geom_point(aes(x=date,y=doses_delivered_this_date,color=as.factor(age_group),shape=as.factor(dose)))
### adding to end of vaccination_history_TRUE
#do we need zero rows?
if(vax_delivery_group != 'universal'){
return(vax_delivery_outline)
} #HERE return as vaccination_history if 'universal', but as extra lines + timeframe if at risk
source("C:/Users/u6044061/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/(function)_vax_strategies.R", echo=TRUE)
generalPublic_leftover_outline = vax_strategy(vax_delivery_group = 'general_public',
vax_dose_strategy              = vax_doses_general,
vax_strategy_roll_out_speed    = vax_strategy_toggles$vax_strategy_roll_out_speed,
vax_roll_out_speed_modifier    = limiter,
vax_strategy_num_doses         = vax_strategy_toggles$vax_strategy_num_doses -
sum(at_risk_delivery_outline$doses_delivered_this_date) - sum(generalPublic_restricted_outline$doses_delivered_this_date),
vax_strategy_start_date        = end_risk_delivery_dose_1 + 1,
vax_age_strategy               = vax_strategy_toggles$vax_age_strategy,
vax_strategy_vaccine_type      = vax_strategy_toggles$vax_strategy_vaccine_type,
vax_strategy_vaccine_interval  = vax_strategy_toggles$vax_strategy_vaccine_interval,
vax_strategy_max_expected_cov  = vax_strategy_toggles$vax_strategy_max_expected_cov,
vax_end_hist   = vaccine_coverage_end_history_UPDATED
)
generalPublic_leftover_outline = generalPublic_leftover_outline %>% mutate(risk_group = 'general_public')
vaccination_history_MODF = rbind(vaccination_history_TRUE,at_risk_delivery_outline,generalPublic_restricted_outline,generalPublic_leftover_outline)
###CHECKS
#CHECK 1: total doses delivered <= total doses available
check_df = rbind(at_risk_delivery_outline,generalPublic_restricted_outline,generalPublic_leftover_outline)
if (round(sum(check_df$doses_delivered_this_date)) > vax_strategy_toggles$vax_strategy_num_doses){stop('Total doses delivered > total doses avaliable!')}
round(sum(check_df$doses_delivered_this_date))
vax_strategy_toggles$vax_strategy_num_doses
check_df_daily = check_df %>% group_by(date) %>% summarise(doses_delivered_this_date = sum(doses_delivered_this_date))
check_df_daily[check_df_daily$doses_delivered_this_date>vax_strategy_toggles$vax_strategy_roll_out_speed,]
vax_strategy_toggles$vax_strategy_roll_out_speed
check_df_daily[round(check_df_daily$doses_delivered_this_date)>vax_strategy_toggles$vax_strategy_roll_out_speed,]
nrow(check_df_daily[round(check_df_daily$doses_delivered_this_date)>vax_strategy_toggles$vax_strategy_roll_out_speed,])
ggplot(check_df) + geom_point(aes(x=date,y=doses_delivered_this_date,color=as.factor(age_group),shape=as.factor(dose)))
ggplot(check_df[check_df$risk_group == 'general public',]) + geom_point(aes(x=date,y=doses_delivered_this_date,color=as.factor(age_group),shape=as.factor(dose)))
unique(check_df$risk_group)
ggplot(check_df[check_df$risk_group == 'general_public',]) + geom_point(aes(x=date,y=doses_delivered_this_date,color=as.factor(age_group),shape=as.factor(dose)))
ggplot(check_df[check_df$risk_group != 'general_public',]) + geom_point(aes(x=date,y=doses_delivered_this_date,color=as.factor(age_group),shape=as.factor(dose)))
waning_shape_plot_list
risk_group_name
c(risk_group_name)\
c(risk_group_name)
list(risk_group_name)
View(vaccination_history_MODF)
unique(vaccination_history_MODF$vaccine_type)
eligibility_dataframe = vaccination_history_MODF %>%
mutate(primary_schedule_complete = case_when(
vaccine_type == "Johnson & Johnson" ~  'Y',
dose %in% c(2,3) ~ 'Y',
TRUE ~ 'N'
) )
View(eligibility_dataframe )
eligibility_dataframe = vaccination_history_MODF %>%
mutate(primary_schedule_complete = case_when(
vaccine_type == "Johnson & Johnson" ~  'Y',
dose %in% c(2,3) ~ 'Y',
TRUE ~ 'N'
)) %>%
filter(risk_group %in% risk_group_considered &
primary_schedule_complete = "Y")
eligibility_dataframe = vaccination_history_MODF %>%
mutate(primary_schedule_complete = case_when(
vaccine_type == "Johnson & Johnson" ~  'Y',
dose %in% c(2,3) ~ 'Y',
TRUE ~ 'N'
)) %>%
filter(risk_group %in% risk_group_considered &
primary_schedule_complete == "Y")
risk_group_considered = list(risk_group_name)
dose_interval = 30*3
eligibility_dataframe = vaccination_history_MODF %>%
mutate(primary_schedule_complete = case_when(
vaccine_type == "Johnson & Johnson" ~  'Y',
dose %in% c(2,3) ~ 'Y',
TRUE ~ 'N'
)) %>%
filter(risk_group %in% risk_group_considered &
primary_schedule_complete == "Y")
eligibility_dataframe = vaccination_history_FINAL %>%
mutate(primary_schedule_complete = case_when(
vaccine_type == "Johnson & Johnson" ~  'Y',
dose %in% c(2,3) ~ 'Y',
TRUE ~ 'N'
)) %>%
filter(risk_group %in% risk_group_considered &
primary_schedule_complete == "Y")
start_dose_interval = 30*3
source("C:/Users/u6044061/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/workshop - tracking eligibility for booster doses.R", echo=TRUE)
source("C:/Users/u6044061/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/workshop - tracking eligibility for booster doses.R", echo=TRUE)
### plot
ggplot(eligibility_dataframe) +
geom_line(aes(x=date,y=coverage_this_date)) +
xlab('') + ylab('Eligibility %') + ylim(0,100) +
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
axis.line = element_line(color = 'black'))
### plot
ggplot(eligibility_dataframe) +
geom_line(aes(x=date,y=coverage_this_date,color=as.factor(age_group))) +
xlab('') + ylab('Eligibility %') + ylim(0,100) +
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
axis.line = element_line(color = 'black'))
View(eligibility_dataframe)
View(vaccination_history_FINAL)
eligibility_dataframe = vaccination_history_FINAL %>%
mutate(primary_schedule_complete = case_when(
vaccine_type == "Johnson & Johnson" ~  'Y',
dose %in% c(2,3) ~ 'Y',
TRUE ~ 'N'
),
boosted = case_when(
vaccine_type == "Johnson & Johnson" & dose == 2 ~ 'Y',
dose == 3 ~ 'Y',
TRUE ~ 'N'
)) %>%
filter(risk_group %in% risk_group_considered &
primary_schedule_complete == "Y" &
boosted == "N")
eligibility_dataframe$date = eligibility_dataframe$date + start_dose_interval
### plot
ggplot(eligibility_dataframe) +
geom_line(aes(x=date,y=coverage_this_date,color=as.factor(age_group))) +
xlab('') + ylab('Eligibility %') + ylim(0,100) +
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
axis.line = element_line(color = 'black'))
eligibility_dataframe = vaccination_history_FINAL %>%
mutate(primary_schedule_complete = case_when(
vaccine_type == "Johnson & Johnson" ~  'Y',
dose %in% c(2,3) ~ 'Y',
TRUE ~ 'N'
),
boosted = case_when(
vaccine_type == "Johnson & Johnson" & dose == 2 ~ 'Y',
dose == 3 ~ 'Y',
TRUE ~ 'N'
)) %>%
filter(risk_group %in% risk_group_considered &
primary_schedule_complete == "Y" &
boosted == "N" &
coverage_this_date > 0)
eligibility_dataframe$date = eligibility_dataframe$date + start_dose_interval
### plot
to_plot = eligibility_dataframe %>% group_by(date) %>% summarise(doses_delivered_this_date = sum(doses_delivered_this_date))
ggplot(eligibility_dataframe) +
geom_line(aes(x=date,y=coverage_this_date,color=as.factor(age_group))) +
xlab('') + ylab('Eligibility %') + ylim(0,100) +
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
axis.line = element_line(color = 'black'))
### plot
to_plot = eligibility_dataframe %>% group_by(date) %>%
summarise(individuals_eligible = cumsum(doses_delivered_this_date))
ggplot(to_plot) +
geom_line(aes(x=date,y=coverage_this_date,color=as.factor(age_group))) +
xlab('') + ylab('Eligibility %') + ylim(0,100) +
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
axis.line = element_line(color = 'black'))
ggplot(to_plot) +
geom_line(aes(x=date,y=coverage_this_date)) +
xlab('') + ylab('Eligibility %') + ylim(0,100) +
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
axis.line = element_line(color = 'black'))
ggplot(to_plot) +
geom_line(aes(x=date,y=individuals_eligible)) +
xlab('') + ylab('Eligibility %') + ylim(0,100) +
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
axis.line = element_line(color = 'black'))
View(to_plot)
to_plot = eligibility_dataframe %>% ungroup() %>% group_by(date) %>%
summarise(individuals_eligible = cumsum(doses_delivered_this_date))
to_plot = eligibility_dataframe %>% ungroup() %>% group_by(date) %>%
summarise(individuals_eligible = sum(doses_delivered_this_date))
to_plot = eligibility_dataframe %>% ungroup() %>% group_by(date) %>%
summarise(total_doses = sum(doses_delivered_this_date)) %>%
ungroup() %>%
mutate(individuals_eligible = cumsum(total_doses))
ggplot(to_plot) +
geom_line(aes(x=date,y=individuals_eligible)) +
xlab('') + ylab('Eligibility %') + ylim(0,100) +
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
axis.line = element_line(color = 'black'))
ggplot(to_plot) +
geom_line(aes(x=date,y=individuals_eligible)) +
xlab('') + ylab('Eligibility %') +
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
axis.line = element_line(color = 'black'))
ggplot(to_plot) +
geom_line(aes(x=date,y=individuals_eligible)) +
xlab('') + ylab('number of eligible individuals') +
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
axis.line = element_line(color = 'black'))
source("C:/Users/u6044061/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/workshop - tracking eligibility for booster doses.R", echo=TRUE)
ggplot(to_plot) +
geom_line(aes(x=date,y=individuals_eligible)) +
xlab('') + ylab('number of individuals eligible for a booster dose') +
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
axis.line = element_line(color = 'black'))
source("C:/Users/u6044061/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/workshop - tracking eligibility for booster doses.R", echo=TRUE)
#       (1/4) Setup
####################################################################
#load libraries
library(readr)
library(deSolve)
library(rvest)
library(ggplot2)
library(gridExtra)
library(ggpubr)
library(tidyverse)
if (Sys.info()[['user']] == 'u6044061'){ rootpath = 'C:/Users/u6044061/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/'
}else if (Sys.info()[['user']] == 'gizem'){ rootpath = 'C:/Users/gizem/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/'}
### (1) Shape of waning ###############################################################################
#See rho.xlsx in parameter estimation
rho_dn = crossing(strain = 'omicron',
outcome = c('symptomatic_disease','severe_outcome'),
days = seq(0,365*2)
)
rho_dn = rho_dn %>% mutate(
protection = case_when(
outcome == 'symptomatic_disease' ~ 0.9932*exp(-0.004*days),
outcome == 'severe_outcome' ~ 0.88
)
)
rho_est_plot = ggplot() + geom_line(data = rho_dn[rho_dn$outcome == 'symptomatic_disease',],
aes(days,protection)) + ylim(0,1) +labs(title = 'symptomatic_disease')
rho_est_plot
ggplot() + geom_line(data = rho_dn[rho_dn$outcome == 'symptomatic_disease',],
aes(days,protection)) + ylim(0,1) +labs(title = 'symptomatic_disease') + xlim(0,365)
