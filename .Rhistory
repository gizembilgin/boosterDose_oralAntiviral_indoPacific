beta=beta,
NPI=NPI_inital,
contact_matrix=contact_matrix,
lota=lota,
gamma=gamma,
lambda=lambda,
delta=delta,
omega=omega,
rho=rho,
VE=VE,
# VE_onwards=VE_onwards,
num_age_groups=num_age_groups,
num_vax_types=num_vax_types,
num_vax_doses=num_vax_doses)
Reff_tracker = data.frame()
sol = as.data.frame(ode(y=state,times=(seq(0,time_step,by=1)),func=covidODE,parms=parameters))
sol_log <- sol
sol_log_unedited <- sol
Reff <- NA
Reff_tracker = rbind(Reff_tracker,Reff)
colnames(Reff_tracker) <- c('Reff')
date_now = date_start + increments_number*time_step
date_now
increments_number
increments_number=1
date_now = date_start + increments_number*time_step
if (date_now <= max(NPI_estimates$date)){
NPI_this_step <- NPI_estimates$NPI[NPI_estimates$date == date_now]/100
parameters$NPI = NPI_this_step
} #i.e. assume after end date that NPI constant
if ((date_now - min(vaccine_coverage_delay))>= min(vaccination_history_FINAL$date)){
parameters$VE = VE_time_step(strain,date_now,'acquisition')
}
# selecting bottom row of solution which is time = 7 (one week)
state_working=tail.matrix(sol,1)
state_working=select(state_working,-time) #remove column with time
state_working=as.vector(state_working)
# lets reconstruct our matrix (easier to work with)
A=J*(T*D+1) # +1 is unvax
S = as.matrix(state_working[1:A])
E = as.matrix(state_working[(A+1):(2*A)])
I = as.matrix(state_working[(2*A+1):(3*A)])
R = as.matrix(state_working[(3*A+1):(4*A)])
Incid = as.matrix(state_working[(4*A+1):(5*A)])
prev_state <- as.data.frame(rbind(S,E,I,R))
row.names(prev_state) <- c("S","E","I","R")
next_state=prev_state # initialise next state
next_state
state
time_step = 1
num_time_steps = model_weeks *7
parameters = c(
suscept = suscept,
behaviour_mod=behaviour_mod,
uniform_mod = uniform_mod,
beta=beta,
NPI=NPI_inital,
contact_matrix=contact_matrix,
lota=lota,
gamma=gamma,
lambda=lambda,
delta=delta,
omega=omega,
rho=rho,
VE=VE,
# VE_onwards=VE_onwards,
num_age_groups=num_age_groups,
num_vax_types=num_vax_types,
num_vax_doses=num_vax_doses)
View(parameters)
VE_inital
num_vax_classes
num_vax_doses
VE
vax_type_list
time_step = 1
num_time_steps = model_weeks *7
parameters = c(
suscept = suscept,
behaviour_mod=behaviour_mod,
uniform_mod = uniform_mod,
beta=beta,
NPI=NPI_inital,
contact_matrix=contact_matrix,
lota=lota,
gamma=gamma,
lambda=lambda,
delta=delta,
omega=omega,
rho=rho,
VE=VE,
# VE_onwards=VE_onwards,
num_age_groups=num_age_groups,
num_vax_types=num_vax_types,
num_vax_doses=num_vax_doses)
Reff_tracker = data.frame()
sol = as.data.frame(ode(y=state,times=(seq(0,time_step,by=1)),func=covidODE,parms=parameters))
sol_log <- sol
sol
View(sol)
vax_type_list
View(parameters)
parameters[[num_vax_types]]
#(1) VE_distribution
VE_distribution <- VE_waning_distribution[VE_waning_distribution$outcome == outcome &
VE_waning_distribution$strain == strain_now,]
outcome= 'acquisiton'
#(1) VE_distribution
VE_distribution <- VE_waning_distribution[VE_waning_distribution$outcome == outcome &
VE_waning_distribution$strain == strain_now,]
strain_now = 'delta'
#(1) VE_distribution
VE_distribution <- VE_waning_distribution[VE_waning_distribution$outcome == outcome &
VE_waning_distribution$strain == strain_now,]
#(2) AIR doses delivered to this date
vax_to_this_date <- vaccination_history_FINAL[vaccination_history_FINAL$date <= date_now,]
vax_to_this_date <- vax_to_this_date %>% # rearrange AIR dataset
select(vaccine_type,dose,date,doses_delivered_this_date)
colnames(vax_to_this_date) <- c('vaccine_type','dose','date','doses')
total_doses_up_to_this_date <- aggregate(vax_to_this_date$doses,
by=list(Category=vax_to_this_date$vaccine_type, vax_to_this_date$dose)
, FUN=sum)
colnames(total_doses_up_to_this_date) <- c('vaccine_type','dose','total_delivered')
View(total_doses_up_to_this_date)
vax_to_this_date <- vax_to_this_date %>%
left_join(total_doses_up_to_this_date) %>%
mutate(prop = case_when(
total_delivered >0 ~ doses/total_delivered,
total_delivered == 0 ~ 0
),
days = as.numeric(date_now - date ))
#<interlude> to add together all days >365 to 365
meddling <- vax_to_this_date[vax_to_this_date$days > 364,]
if(length(unique(meddling$days))>1){
meddling <- aggregate(meddling$prop,
by=list(Category=meddling$vaccine_type, meddling$dose)
, FUN=sum)
colnames(meddling)  = c('vaccine_type','dose','prop')
meddling = meddling %>% mutate(days=365)
vax_to_this_date <- rbind(vax_to_this_date[vax_to_this_date$days<365,c(colnames(meddling))],
meddling)
}
#(3) Bring VE d'n and AIR history together
workshop <- vax_to_this_date %>%
left_join(VE_distribution) %>%
select(vaccine_type,dose,days,VE_days,prop) %>%
mutate(VE_weighted = VE_days*prop)
#(4) Aggregate to estimate population VE for doses
workshop <- aggregate(workshop$VE_weighted,
by=list(Category=workshop$dose,workshop$vaccine_type)
, FUN=sum)
colnames(workshop) <- c('dose','vaccine_type','VE')
# #(5) Transpose to ODE format VE[type,dose]
VE_result <- pivot_wider(workshop,
id_cols = vaccine_type,
names_from = dose,
values_from = VE)
View(VE_result)
VE_result <- VE_result %>%
arrange(vaccine_type)
VE_result <- VE_result[,-c(1)]
VE_result[is.na(VE_result)] <-0 #J&J second dose correction
outcome
outcome = 'acquisition'
date
strain
strain_start
strain_inital
#(1) VE_distribution
VE_distribution <- VE_waning_distribution[VE_waning_distribution$outcome == outcome &
VE_waning_distribution$strain == strain_now,]
View(VE_distribution)
#(2) AIR doses delivered to this date
vax_to_this_date <- vaccination_history_FINAL[vaccination_history_FINAL$date <= date_now,]
vax_to_this_date <- vax_to_this_date %>% # rearrange AIR dataset
select(vaccine_type,dose,date,doses_delivered_this_date)
colnames(vax_to_this_date) <- c('vaccine_type','dose','date','doses')
total_doses_up_to_this_date <- aggregate(vax_to_this_date$doses,
by=list(Category=vax_to_this_date$vaccine_type, vax_to_this_date$dose)
, FUN=sum)
colnames(total_doses_up_to_this_date) <- c('vaccine_type','dose','total_delivered')
vax_to_this_date <- vax_to_this_date %>%
left_join(total_doses_up_to_this_date) %>%
mutate(prop = case_when(
total_delivered >0 ~ doses/total_delivered,
total_delivered == 0 ~ 0
),
days = as.numeric(date_now - date ))
#<interlude> to add together all days >365 to 365
meddling <- vax_to_this_date[vax_to_this_date$days > 364,]
if(length(unique(meddling$days))>1){
meddling <- aggregate(meddling$prop,
by=list(Category=meddling$vaccine_type, meddling$dose)
, FUN=sum)
colnames(meddling)  = c('vaccine_type','dose','prop')
meddling = meddling %>% mutate(days=365)
vax_to_this_date <- rbind(vax_to_this_date[vax_to_this_date$days<365,c(colnames(meddling))],
meddling)
}
View(vax_to_this_date)
#(3) Bring VE d'n and AIR history together
workshop <- vax_to_this_date %>%
left_join(VE_distribution) %>%
select(vaccine_type,dose,days,VE_days,prop) %>%
mutate(VE_weighted = VE_days*prop)
#(4) Aggregate to estimate population VE for doses
workshop <- aggregate(workshop$VE_weighted,
by=list(Category=workshop$dose,workshop$vaccine_type)
, FUN=sum)
colnames(workshop) <- c('dose','vaccine_type','VE')
workshop
vax_list
vax_type_list
#<interim> add none covered vaccines
workshop2 = !(vax_type_list %in% unique(workshop$vaccine_type))
num_vax_types
#<interim> add none covered vaccines
for (i in 1:num_vax_types){
this_vax = vax_type_list[i]
if (!( this_vax %in% unique(workshop$vaccine_type))){
}
}
this_vax
this_vax = "Pfizer"
!( this_vax %in% unique(workshop$vaccine_type))
View(workshop)
workshop2 = crossing(dose = c(1:num_vax_doses),
vaccine_type = this_vax,
VE =0)
View(workshop2)
workshop = rbind(workshop,workshop2)
# #(5) Transpose to ODE format VE[type,dose]
VE_result <- pivot_wider(workshop,
id_cols = vaccine_type,
names_from = dose,
values_from = VE)
View(VE_result)
VE_result <- VE_result %>%
arrange(vaccine_type)
VE_result <- VE_result[,-c(1)]
VE_result[is.na(VE_result)] <-0 #J&J second dose correction
source("~/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/CommandDeck.R", echo=TRUE)
source("~/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/CommandDeck.R", echo=TRUE)
source("~/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/CommandDeck.R", echo=TRUE)
source("~/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/(plot)_incid by age and vax status.R", echo=TRUE)
behaviour_mod
VE
parameters$VE.1
View(parameters)
date_now
(date_now - min(vaccine_coverage_delay))>= min(vaccination_history_FINAL$date)
VE_time_step(strain,date_now,'acquisition')
#(1) VE_distribution
VE_distribution <- VE_waning_distribution[VE_waning_distribution$outcome == outcome &
VE_waning_distribution$strain == strain_now,]
#(2) AIR doses delivered to this date
vax_to_this_date <- vaccination_history_FINAL[vaccination_history_FINAL$date <= date_now,]
vax_to_this_date <- vax_to_this_date %>% # rearrange AIR dataset
select(vaccine_type,dose,date,doses_delivered_this_date)
colnames(vax_to_this_date) <- c('vaccine_type','dose','date','doses')
total_doses_up_to_this_date <- aggregate(vax_to_this_date$doses,
by=list(Category=vax_to_this_date$vaccine_type, vax_to_this_date$dose)
, FUN=sum)
colnames(total_doses_up_to_this_date) <- c('vaccine_type','dose','total_delivered')
vax_to_this_date <- vax_to_this_date %>%
left_join(total_doses_up_to_this_date) %>%
mutate(prop = case_when(
total_delivered >0 ~ doses/total_delivered,
total_delivered == 0 ~ 0
),
days = as.numeric(date_now - date ))
View(vax_to_this_date)
#(2) AIR doses delivered to this date
vax_to_this_date <- vaccination_history_FINAL[vaccination_history_FINAL$date <= date_now,]
View(vaccination_history_FINAL)
View(vaccination_history_OVERWRITE)
workshop = vaccination_history_OVERWRITE
workshop =  aggregate(vaccination_history_OVERWRITE$doses_delivered_this_date,
by=list(Category=vaccination_history_OVERWRITE$date,
vaccination_history_OVERWRITE$dose,
vaccination_history_OVERWRITE$vaccine_type)
, FUN=sum)
View(workshop)
workshop =  aggregate(vaccination_history_OVERWRITE$doses_delivered_this_date,
by=list(Category=vaccination_history_OVERWRITE$date,
Category=vaccination_history_OVERWRITE$vaccine_mode,
vaccination_history_OVERWRITE$dose,
vaccination_history_OVERWRITE$vaccine_type)
, FUN=sum)
workshop =  aggregate(vaccination_history_OVERWRITE$doses_delivered_this_date,
by=list(Category=vaccination_history_OVERWRITE$date,
vaccination_history_OVERWRITE$vaccine_type,
vaccination_history_OVERWRITE$vaccine_mode,
vaccination_history_OVERWRITE$dose
)
, FUN=sum)
vaccination_history_4 <- vaccination_history_3[,c('date','vaccine_type','vaccine_mode','dose','coverage_this_date','doses_delivered_this_date')] %>%
arrange(date,vaccine_type,dose)
#Split daily doses by age
vaccination_history_TRUE = data.frame()
age_split =  pop/sum(pop[3:num_age_groups]); age_split[1:2] = 0 #COMEBACK - uniform assumption in ages 20+
for (j in 1:num_age_groups){
workshop = vaccination_history_4
workshop <- workshop %>% mutate(
age_group = age_group_labels[j],
doses_delivered_this_date = doses_delivered_this_date*age_split[j])
vaccination_history_TRUE = rbind(vaccination_history_TRUE,workshop)
}
source("~/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/(1)_simulate_setting.R", echo=TRUE)
#       (1/4) Setup
####################################################################
#load libraries
library(tidyverse)
library(readr)
library(deSolve)
library(rvest)
library(ggplot2)
library(gridExtra)
source("~/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/(1)_simulate_setting.R", echo=TRUE)
View(vaccination_history_TRUE)
source(paste(getwd(),"/(function)_vax_strategies.R",sep=""))
#(1) VE_distribution
VE_distribution <- VE_waning_distribution[VE_waning_distribution$outcome == outcome &
VE_waning_distribution$strain == strain_now,]
#(2) doses delivered to this date
vax_to_this_date <- vaccination_history_FINAL[vaccination_history_FINAL$date <= date_now,]
View(vax_to_this_date)
#       (1/4) Setup
####################################################################
#load libraries
library(tidyverse)
library(readr)
library(deSolve)
library(rvest)
library(ggplot2)
library(gridExtra)
#rm(list=ls())                                                               # clear global environment
#setwd("~/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/v2021_12_20_X")  # set working directory
#_________________________________________________________________
#       (2/4) User choice / Model toggles
####################################################################
setting = "SLE"
date_start = as.Date('2022-04-01')  #note, '2020-03-01' used for current WT behaviour_mod fit (02/02/2022); and '2022-04-01 for simulations
model_weeks = 10          # how many weeks should the model run for?, 24 PNG fit
complete_model_runs = 1   # when >1 samples randomly from distribution of parameters (where available)
strain_inital = 'delta'             #options:'WT','delta'
seed = 0.001
NPI_outbreak_toggle = "delta_peaks"   #options: final, delta_peaks
underascertainment_est = 43
behaviour_mod = 0  #0.268 if start 01/03
uniform_mod=1
seroprev_year = 2022 #COMEBACK - tie this to date_start!
vax_strategy_plot = "on" #to add hypothetical vaccination campaign
#__________________________________________________________________
#       (3/4) Run model
# ####################################################################
##(A) Load functions
source(paste(getwd(),"/(function)_COVID_ODE.R",sep=""))
source(paste(getwd(),"/(function)_vax_strategies.R",sep=""))
##(B) Simulate setting
# time saving tactics! Load setting if not yet loaded
if (setting == "PNG"){setting_long = "Papua New Guinea"
} else if (setting == "SLE"){setting_long = "Sierra Leone"}
if (exists("prev_setting") == FALSE){ prev_setting = "NONE"}
if (setting != prev_setting){souNrce(paste(getwd(),"/(1)_simulate_setting.R",sep=""))} #load setting stats if new setting
prev_setting = setting
#making some interim variables to assist with configuring states
seed = sum(pop)*seed
num_disease_classes = 4                                 # SEIR
num_age_groups = J = length(age_group_labels)           # 0-4,5-11,12-15,16-29,30-59,60+
num_vax_doses = D = length(unique(vaccination_history_TRUE$dose))  # dose 1, dose 2, COMEBACK no boosters yet in these settings
vax_type_list = sort(unique(vaccination_history_TRUE$vaccine_type))
num_vax_types = T = length(unique(vaccination_history_TRUE$vaccine_type))
num_vax_classes = num_vax_doses*num_vax_types + 1                 # + 1 for unvaccinated
num_total_classes = (num_disease_classes+1)*(num_age_groups*num_vax_classes) #+1 for incidence tracker
source(paste(getwd(),"/(2)_inital_state.R",sep=""))
source(paste(getwd(),"/(2)_inital_state.R",sep=""))
vax_delivery_outline =
vax_strategy(vax_strategy_start_date        = vax_strategy_toggles$vax_strategy_start_date,
vax_strategy_num_doses         = vax_strategy_toggles$vax_strategy_num_doses,
vax_strategy_roll_out_speed    = vax_strategy_toggles$vax_strategy_roll_out_speed,
vax_age_strategy               = vax_strategy_toggles$vax_age_strategy,
vax_dose_strategy              = vax_strategy_toggles$vax_dose_strategy,
vax_strategy_vaccine_type      = vax_strategy_toggles$vax_strategy_vaccine_type,
vax_strategy_vaccine_interval  = vax_strategy_toggles$vax_strategy_vaccine_interval,
vax_strategy_max_expected_cov  = vax_strategy_toggles$vax_strategy_max_expected_cov
)
vaccination_history_FINAL = vaccination_history_MODF
source("~/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/(function)_vax_strategies.R", echo=TRUE)
source("~/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/(2)_inital_state.R", echo=TRUE)
source("~/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/(2)_inital_state.R", echo=TRUE)
source("~/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/(1)_simulate_setting.R", echo=TRUE)
source("~/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/(2)_inital_state.R", echo=TRUE)
#(2) doses delivered to this date
vax_to_this_date <- vaccination_history_FINAL[vaccination_history_FINAL$date <= date_now,]
vax_to_this_date <- vax_to_this_date %>% # rearrange AIR dataset
select(vaccine_type,dose,date,age_band,doses_delivered_this_date)
vax_to_this_date <- vax_to_this_date %>% # rearrange AIR dataset
select(vaccine_type,dose,date,age_group,doses_delivered_this_date)
colnames(vax_to_this_date) <- c('vaccine_type','dose','date','age_group','doses')
unique(vax_t0_this_date$age_group)
unique(vax_to_this_date$age_group)
total_doses_up_to_this_date <- aggregate(vax_to_this_date$doses,
by=list(Category=vax_to_this_date$vaccine_type, vax_to_this_date$dose,vax_to_this_date$age_group)
, FUN=sum)
colnames(total_doses_up_to_this_date) <- c('vaccine_type','dose','age_group','total_delivered')
vax_to_this_date <- vax_to_this_date %>%
left_join(total_doses_up_to_this_date) %>%
mutate(prop = case_when(
total_delivered >0 ~ doses/total_delivered,
total_delivered == 0 ~ 0
),
days = as.numeric(date_now - date ))
#<interlude> to add together all days >365 to 365
meddling <- vax_to_this_date[vax_to_this_date$days > 364,]
if(length(unique(meddling$days))>1){
meddling <- aggregate(meddling$prop,
by=list(Category=meddling$vaccine_type, meddling$dose,meddling$age_group)
, FUN=sum)
colnames(meddling)  = c('vaccine_type','dose','age_group','prop')
meddling = meddling %>% mutate(days=365)
vax_to_this_date <- rbind(vax_to_this_date[vax_to_this_date$days<365,c(colnames(meddling))],
meddling)
}
#(3) Bring VE d'n and AIR history together
workshop <- vax_to_this_date %>%
left_join(VE_distribution) %>%
select(vaccine_type,dose,days,age_group,VE_days,prop) %>%
mutate(VE_weighted = VE_days*prop)
#(4) Aggregate to estimate population VE for doses
workshop <- aggregate(workshop$VE_weighted,
by=list(Category=workshop$dose,workshop$vaccine_type,workshop$age_group)
, FUN=sum)
colnames(workshop) <- c('dose','vaccine_type','age_group','VE')
#<interim> add none covered vaccines
for (i in 1:num_vax_types){
this_vax = vax_type_list[i]
if (!( this_vax %in% unique(workshop$vaccine_type))){
workshop2 = crossing(dose = c(1:num_vax_doses),
vaccine_type = this_vax,
age_group = age_group_labels,
VE =0)
workshop = rbind(workshop,workshop2)
}
}
# #(5) Transpose to ODE format VE[type,dose]
VE_result <- pivot_wider(workshop,
id_cols = vaccine_type,
names_from = dose,
values_from = VE)
View(workshop)
# #(5) Transpose to ODE format VE[type,dose]
VE_result <- pivot_wider(workshop,
id_cols = c(vaccine_type,age_group),
names_from = dose,
values_from = VE)
View(VE_result)
##instead retain tidy form
VE_tidy = workshop
VE_tidy
#distribution for viral (AZ reference) and mRNA (Pfizer reference) for dose 1,2, and 3 (booster is mRNA only)
#VE = matrix(0,nrow=num_vax_classes,ncol=num_vax_doses)
VE =  crossing(dose = c(1:num_vax_doses),
vaccine_type = unique(vaccination_history_FINAL$vaccine_type),
age_group = age_group_labels,
VE = c(0))
vax_type_list
source("~/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/CommandDeck.R", echo=TRUE)
VE_step
i
t
d
VE_step = VE$VE[VE$dose==d &
VE$vaccine_type == vax_type_list[t]&
VE$age_group == i]
VE_step
VE$VE[VE$dose==d &
VE$vaccine_type == vax_type_list[t]&
VE$age_group == i]
VE$VE[
VE$vaccine_type == vax_type_list[t]&
VE$age_group == i]
VE$VE[
VE$age_group == i]
View(VE)
source("~/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/CommandDeck.R", echo=TRUE)
source("~/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/CommandDeck.R", echo=TRUE)
warnings()
sum(next_state)
sum(pop)
source("~/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/CommandDeck.R", echo=TRUE)
source("~/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/CommandDeck.R", echo=TRUE)
source("~/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/CommandDeck.R", echo=TRUE)
source("~/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/CommandDeck.R", echo=TRUE)
source("~/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/CommandDeck.R", echo=TRUE)
source("~/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/CommandDeck.R", echo=TRUE)
strain_inital
run_type
complete_model_runs
source("~/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/CommandDeck.R", echo=TRUE)
source("~/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/CommandDeck.R", echo=TRUE)
vax_strategy_toggles =
list(vax_strategy_start_date                  = as.Date('2022-04-20'),
vax_strategy_num_doses         = as.integer(1000000),
vax_strategy_roll_out_speed    = 50000 ,               # doses delivered per day
vax_age_strategy               = "oldest",            # options: "oldest", "youngest","50_down","uniform", OTHER?
vax_dose_strategy              = 2,                    # options: 1,2
vax_strategy_vaccine_type      = "Pfizer" ,            # options: "Moderna","Pfizer","AstraZeneca","Johnson & Johnson","Sinopharm","Sinovac"
vax_strategy_vaccine_interval  = 7*3 ,                 # (days) interval between first and second dose
vax_strategy_max_expected_cov  = 0.8                   # value between 0-1 (equivalent to %) of age group willing to be vaccinated
)
source("~/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/CommandDeck.R", echo=TRUE)
