rsquared = model_rsquared )
predicted_distribution = rbind(predicted_distribution,workshop_predicted)
}
}
predicted_distribution = predicted_distribution %>% mutate(plot_label = paste(age_group,"(R squared",round(rsquared,digits=3)))
# ggplot(data = raw[raw$age_group == 'overall',]) +
#   geom_point(aes(x=days,y=VE,color=as.factor(dose))) +
#   geom_errorbar(aes(x=days, ymin=LB, ymax=UB)) +
#   geom_line(data = predicted_distribution[ predicted_distribution$age_group == 'overall',],
#             aes(x=days,y=VE,color=as.factor(dose))) +
#   ylim(0,1) +
#   theme_bw() +
#   theme(panel.grid.major = element_blank(),
#         panel.grid.minor = element_blank(),
#         axis.line = element_line(color = 'black'))
###(2/3) Apply predicted distributions
#(A) calculate internal
apply_distribution <- predicted_distribution %>%
mutate(outcome_family =  'severe_outcome') %>%
group_by(age_group,dose) %>%
mutate(VE_internal = VE / max(VE)) %>%
ungroup() %>%
select(dose,age_group,outcome_family,days,VE_internal)
# plot_dose2 = ggplot() +
#   geom_line(data = apply_distribution[apply_distribution$dose == 2,], aes(x=days,y=VE_internal,color=as.factor(age_group))) +
#   ylim(0,1)  +
#   ylab('% of max protection') +
#   xlab('days since vaccination') +
#   labs(color='age group') +
#   ggtitle('primary schedule')
# plot_dose3 = ggplot() +
#   geom_line(data = apply_distribution[apply_distribution$dose == 3,], aes(x=days,y=VE_internal,color=as.factor(age_group))) +
#   ylim(0,1) +
#   ylab('% of max protection') +
#   xlab('days since vaccination') +
#   labs(color='age group') +
#   ggtitle('booster dose')
# grid.arrange(plot_dose2,plot_dose3, nrow=2)
#(B) Calculate ratio between age groups
workshop_overall = raw %>%
filter(age_group == 'overall') %>%
rename(VE_overall = VE) %>%
select(dose,days,VE_overall)
workshop_age = raw %>%
filter(! age_group == 'overall') %>%
left_join(workshop_overall, by = c('dose','days')) %>%
mutate(VE_overall = VE/VE_overall)
apply_ratio = workshop_age %>% filter(days == 22) %>% rename(VE_ratio = VE_overall,agegroup_RAW = age_group) %>% select(dose,agegroup_RAW,VE_ratio)
#(C) Convert ratio to age groups in model
CS_age_groupings = c(0,59,79,110) #age groupings in VE estimate data
pop_RAW <- pop_estimates %>%
mutate(agegroup_RAW = cut(age,breaks = CS_age_groupings, include.lowest = T, labels = unique(apply_ratio$agegroup_RAW)),
agegroup_MODEL = cut(age,breaks = age_groups_num, include.lowest = T, labels = age_group_labels)) %>%
ungroup() %>%
group_by(agegroup_MODEL) %>%
mutate(model_group_percent = population/sum(population))
apply_ratio_MODEL = pop_RAW %>% left_join(apply_ratio) %>%
mutate(interim = model_group_percent * VE_ratio) %>%
group_by(dose,agegroup_MODEL) %>%
summarise(VE_ratio = sum(interim)) %>%
rename(age_group = agegroup_MODEL) %>%
arrange(dose) %>%
mutate(schedule = case_when(
dose > 2 ~ 'booster',
TRUE ~ 'primary'
))  %>%
select(-dose)
workshop = apply_distribution %>%
rename(agegroup_RAW = age_group)
workshop = pop_RAW %>% left_join(workshop) %>%
mutate(interim = model_group_percent * VE_internal) %>%
group_by(dose,agegroup_MODEL,days) %>%
summarise(VE_internal = sum(interim)) %>%
rename(age_group = agegroup_MODEL)
apply_distribution_MODEL = workshop %>% arrange(dose)  %>%
mutate(schedule = case_when(
dose > 2 ~ 'booster',
TRUE ~ 'primary' #copy dose 2 for dose 1
)) %>%
select(-dose)
plot_dose2 = ggplot() +
geom_line(data = apply_distribution_MODEL[apply_distribution_MODEL$schedule == 'primary',], aes(x=days,y=VE_internal,color=as.factor(age_group))) +
ylim(0,1)  +
ylab('% of max protection') +
xlab('days since vaccination') +
labs(color='age group') +
ggtitle('primary schedule') +
plotting_standard
plot_dose3 = ggplot() +
geom_line(data = apply_distribution_MODEL[apply_distribution_MODEL$schedule == 'booster',], aes(x=days,y=VE_internal,color=as.factor(age_group))) +
ylim(0,1) +
ylab('% of max protection') +
xlab('days since vaccination') +
labs(color='age group') +
ggtitle('booster dose') +
plotting_standard
grid.arrange(plot_dose2,plot_dose3, nrow=2)
#rm(list=ls())
raw <- read.csv(file = '1_inputs/VE_severe_outcomes.csv',header=TRUE)
######SAMPLE HERE
sampled_value = mapply(runif,1,raw$LB, raw$UB)
raw = cbind(raw,sampled_value)
raw$VE = raw$sampled_value
#######
###(1/3) Predict distribution
predicted_distribution = data.frame()
plot_list = list()
for (j in 1:length(unique(raw$age_group))){
subplot_list = list()
for (i in 1: length(unique(raw$dose))){
workshop_real = raw[raw$dose == unique(raw$dose)[i] &
raw$age_group == unique(raw$age_group)[j],]
attach(workshop_real)
model = lm(VE~days)
#summary(model)
model_rsquared = summary(model)$adj.r.squared
detach(workshop_real)
time <- seq(0, 365)
workshop_predicted <- predict(model,list(days=time))
workshop_predicted = data.frame(cbind(days = time, VE = workshop_predicted))
workshop_predicted = workshop_predicted %>%
mutate(age_group = unique(raw$age_group)[j],
dose = unique(raw$dose)[i],
rsquared = model_rsquared )
predicted_distribution = rbind(predicted_distribution,workshop_predicted)
}
}
predicted_distribution = predicted_distribution %>% mutate(plot_label = paste(age_group,"(R squared",round(rsquared,digits=3)))
# ggplot(data = raw[raw$age_group == 'overall',]) +
#   geom_point(aes(x=days,y=VE,color=as.factor(dose))) +
#   geom_errorbar(aes(x=days, ymin=LB, ymax=UB)) +
#   geom_line(data = predicted_distribution[ predicted_distribution$age_group == 'overall',],
#             aes(x=days,y=VE,color=as.factor(dose))) +
#   ylim(0,1) +
#   theme_bw() +
#   theme(panel.grid.major = element_blank(),
#         panel.grid.minor = element_blank(),
#         axis.line = element_line(color = 'black'))
###(2/3) Apply predicted distributions
#(A) calculate internal
apply_distribution <- predicted_distribution %>%
mutate(outcome_family =  'severe_outcome') %>%
group_by(age_group,dose) %>%
mutate(VE_internal = VE / max(VE)) %>%
ungroup() %>%
select(dose,age_group,outcome_family,days,VE_internal)
# plot_dose2 = ggplot() +
#   geom_line(data = apply_distribution[apply_distribution$dose == 2,], aes(x=days,y=VE_internal,color=as.factor(age_group))) +
#   ylim(0,1)  +
#   ylab('% of max protection') +
#   xlab('days since vaccination') +
#   labs(color='age group') +
#   ggtitle('primary schedule')
# plot_dose3 = ggplot() +
#   geom_line(data = apply_distribution[apply_distribution$dose == 3,], aes(x=days,y=VE_internal,color=as.factor(age_group))) +
#   ylim(0,1) +
#   ylab('% of max protection') +
#   xlab('days since vaccination') +
#   labs(color='age group') +
#   ggtitle('booster dose')
# grid.arrange(plot_dose2,plot_dose3, nrow=2)
#(B) Calculate ratio between age groups
workshop_overall = raw %>%
filter(age_group == 'overall') %>%
rename(VE_overall = VE) %>%
select(dose,days,VE_overall)
workshop_age = raw %>%
filter(! age_group == 'overall') %>%
left_join(workshop_overall, by = c('dose','days')) %>%
mutate(VE_overall = VE/VE_overall)
apply_ratio = workshop_age %>% filter(days == 22) %>% rename(VE_ratio = VE_overall,agegroup_RAW = age_group) %>% select(dose,agegroup_RAW,VE_ratio)
#(C) Convert ratio to age groups in model
CS_age_groupings = c(0,59,79,110) #age groupings in VE estimate data
pop_RAW <- pop_estimates %>%
mutate(agegroup_RAW = cut(age,breaks = CS_age_groupings, include.lowest = T, labels = unique(apply_ratio$agegroup_RAW)),
agegroup_MODEL = cut(age,breaks = age_groups_num, include.lowest = T, labels = age_group_labels)) %>%
ungroup() %>%
group_by(agegroup_MODEL) %>%
mutate(model_group_percent = population/sum(population))
apply_ratio_MODEL = pop_RAW %>% left_join(apply_ratio) %>%
mutate(interim = model_group_percent * VE_ratio) %>%
group_by(dose,agegroup_MODEL) %>%
summarise(VE_ratio = sum(interim)) %>%
rename(age_group = agegroup_MODEL) %>%
arrange(dose) %>%
mutate(schedule = case_when(
dose > 2 ~ 'booster',
TRUE ~ 'primary'
))  %>%
select(-dose)
workshop = apply_distribution %>%
rename(agegroup_RAW = age_group)
workshop = pop_RAW %>% left_join(workshop) %>%
mutate(interim = model_group_percent * VE_internal) %>%
group_by(dose,agegroup_MODEL,days) %>%
summarise(VE_internal = sum(interim)) %>%
rename(age_group = agegroup_MODEL)
apply_distribution_MODEL = workshop %>% arrange(dose)  %>%
mutate(schedule = case_when(
dose > 2 ~ 'booster',
TRUE ~ 'primary' #copy dose 2 for dose 1
)) %>%
select(-dose)
plot_dose2 = ggplot() +
geom_line(data = apply_distribution_MODEL[apply_distribution_MODEL$schedule == 'primary',], aes(x=days,y=VE_internal,color=as.factor(age_group))) +
ylim(0,1)  +
ylab('% of max protection') +
xlab('days since vaccination') +
labs(color='age group') +
ggtitle('primary schedule') +
plotting_standard
plot_dose3 = ggplot() +
geom_line(data = apply_distribution_MODEL[apply_distribution_MODEL$schedule == 'booster',], aes(x=days,y=VE_internal,color=as.factor(age_group))) +
ylim(0,1) +
ylab('% of max protection') +
xlab('days since vaccination') +
labs(color='age group') +
ggtitle('booster dose') +
plotting_standard
grid.arrange(plot_dose2,plot_dose3, nrow=2)
source("C:/Users/u6044061/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/(antiviral)(mech shop) stochastic VE.R", echo=TRUE)
source("C:/Users/u6044061/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/(antiviral)(mech shop) stochastic VE.R", echo=TRUE)
ggplot() +
geom_line(data=waning_to_plot[waning_to_plot$strain == strain_test  & waning_to_plot$outcome == outcome_test & waning_to_plot$vaccine_type == vaccine_type_test,],
aes(x=days,y=VE_days,color=as.factor(immunity)),na.rm=TRUE) +
labs(title=(paste("Waning of VE against","(",strain_test,")"))) +
xlab("days since vaccination") +
ylab("% max protection") +
ylim(0,1)+
theme_bw() +
theme(panel.grid.major = element_blank(),panel.grid.minor = element_blank())
vaccine_type_test = 'Johnson & Johnson'
ggplot() +
geom_line(data=waning_to_plot[waning_to_plot$strain == strain_test  & waning_to_plot$outcome == outcome_test & waning_to_plot$vaccine_type == vaccine_type_test,],
aes(x=days,y=VE_days,color=as.factor(immunity)),na.rm=TRUE) +
labs(title=(paste("Waning of VE against","(",strain_test,")"))) +
xlab("days since vaccination") +
ylab("% max protection") +
ylim(0,1)+
theme_bw() +
theme(panel.grid.major = element_blank(),panel.grid.minor = element_blank())
ggplot() +
geom_line(data=waning_to_plot[waning_to_plot$strain == strain_test  & waning_to_plot$outcome == outcome_test & waning_to_plot$vaccine_type == vaccine_type_test,],
aes(x=days,y=VE_days,color=as.factor(age_group),shape=as.factor(dose)),na.rm=TRUE) +
labs(title=(paste("Waning of VE against","(",strain_test,")"))) +
xlab("days since vaccination") +
ylab("% max protection") +
ylim(0,1)+
theme_bw() +
theme(panel.grid.major = element_blank(),panel.grid.minor = element_blank())
ggplot() +
geom_point(data=waning_to_plot[waning_to_plot$strain == strain_test  & waning_to_plot$outcome == outcome_test & waning_to_plot$vaccine_type == vaccine_type_test,],
aes(x=days,y=VE_days,color=as.factor(age_group),shape=as.factor(dose)),na.rm=TRUE) +
labs(title=(paste("Waning of VE against","(",strain_test,")"))) +
xlab("days since vaccination") +
ylab("% max protection") +
ylim(0,1)+
theme_bw() +
theme(panel.grid.major = element_blank(),panel.grid.minor = element_blank())
vaccine_type_test = 'Pfizer'
ggplot() +
geom_point(data=waning_to_plot[waning_to_plot$strain == strain_test  & waning_to_plot$outcome == outcome_test & waning_to_plot$vaccine_type == vaccine_type_test,],
aes(x=days,y=VE_days,color=as.factor(age_group),shape=as.factor(dose)),na.rm=TRUE) +
labs(title=(paste("Waning of VE against","(",strain_test,")"))) +
xlab("days since vaccination") +
ylab("% max protection") +
ylim(0,1)+
theme_bw() +
theme(panel.grid.major = element_blank(),panel.grid.minor = element_blank())
source("C:/Users/u6044061/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/(antiviral)(mech shop) stochastic VE.R", echo=TRUE)
source("C:/Users/u6044061/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/(antiviral)(mech shop) stochastic VE.R", echo=TRUE)
source("C:/Users/u6044061/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/(antiviral)(mech shop) stochastic VE.R", echo=TRUE)
workshop = VE_waning_distribution_SO %>%
filter(dose == 3 & strain == strain_now) %>%
group_by(strain,outcome,vaccine_type,dose,days,.add = TRUE) %>%
summarise(VE_days = mean(VE_days),.groups = "keep")
workshop = VE_waning_distribution_SO %>%
filter(dose == 3 & strain == 'omicron') %>%
group_by(strain,outcome,vaccine_type,dose,days,.add = TRUE) %>%
summarise(VE_days = mean(VE_days),.groups = "keep")
VE_waning_distribution_SO = VE_waning_distribution_SO %>% filter(! dose == 3) %>% select(-primary_if_booster)
VE_waning_distribution_SO = rbind(VE_waning_distribution_SO,workshop)
VE_waning_distribution = VE_waning_distribution_SO
#(3) Calculate VE against severe outcome by day
VE_tracker = data.frame()
for (outcome in c('death','severe_disease')){
for (day in 0:num_time_steps){
workshop = VE_time_step(strain_now,date_start+day,outcome)
workshop = workshop %>% mutate(date=day,
outcome_VE=outcome)
VE_tracker = rbind(VE_tracker,workshop)
}
}
num_time_steps
num_time_steps = 365
#(3) Calculate VE against severe outcome by day
VE_tracker = data.frame()
for (outcome in c('death','severe_disease')){
for (day in 0:num_time_steps){
workshop = VE_time_step(strain_now,date_start+day,outcome)
workshop = workshop %>% mutate(date=day,
outcome_VE=outcome)
VE_tracker = rbind(VE_tracker,workshop)
}
}
source(paste(getwd(),"/(function)_VE_time_step.R",sep=""))
for (outcome in c('death','severe_disease')){
for (day in 0:num_time_steps){
workshop = VE_time_step(strain_now,date_start+day,outcome)
workshop = workshop %>% mutate(date=day,
outcome_VE=outcome)
VE_tracker = rbind(VE_tracker,workshop)
}
}
strain_now = 'omicron'
#(3) Calculate VE against severe outcome by day
VE_tracker = data.frame()
for (outcome in c('death','severe_disease')){
for (day in 0:num_time_steps){
workshop = VE_time_step(strain_now,date_start+day,outcome)
workshop = workshop %>% mutate(date=day,
outcome_VE=outcome)
VE_tracker = rbind(VE_tracker,workshop)
}
}
sensitivity_analysis_toggles = list(VE_older_adults = "reduced",VE_adults_comorb = 0.9)
#(3) Calculate VE against severe outcome by day
VE_tracker = data.frame()
for (outcome in c('death','severe_disease')){
for (day in 0:num_time_steps){
workshop = VE_time_step(strain_now,date_start+day,outcome)
workshop = workshop %>% mutate(date=day,
outcome_VE=outcome)
VE_tracker = rbind(VE_tracker,workshop)
}
}
VE_tracker$date = date_start + VE_tracker$date
toggle_antiviral_start_date
date_start = toggle_antiviral_start_date
#(3) Calculate VE against severe outcome by day
VE_tracker = data.frame()
for (outcome in c('death','severe_disease')){
for (day in 0:num_time_steps){
workshop = VE_time_step(strain_now,date_start+day,outcome)
workshop = workshop %>% mutate(date=day,
outcome_VE=outcome)
VE_tracker = rbind(VE_tracker,workshop)
}
}
source("C:/Users/u6044061/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/(2)_inital_state.R", echo=TRUE)
source("C:/Users/u6044061/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/(1)_simulate_setting.R", echo=TRUE)
risk_group_toggle = 'on'
risk_group_toggle = "on"
risk_group_name = "adults_with_comorbidities" #options: pregnant_women, adults_with_comorbidities
source("C:/Users/u6044061/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/(1)_simulate_setting.R", echo=TRUE)
source("C:/Users/u6044061/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/(2)_inital_state.R", echo=TRUE)
risk_group_prioritisation_to_date = NA
default_prioritisation_proportion = 0.5
risk_group_lower_cov_ratio = NA
source("C:/Users/u6044061/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/(1)_simulate_setting.R", echo=TRUE)
source("C:/Users/u6044061/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/(2)_inital_state.R", echo=TRUE)
vax_strategy_toggle = "off"
vax_risk_strategy_toggle = "off"
source("C:/Users/u6044061/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/(2)_inital_state.R", echo=TRUE)
setting = "SLE"
RR_estimate  = 2
vax_strategy_toggle = "off"
vax_risk_strategy_toggle = "off"
risk_group_toggle = "on"
risk_group_name = "adults_with_comorbidities" #options: pregnant_women, adults_with_comorbidities
risk_group_prioritisation_to_date = NA
default_prioritisation_proportion = 0.5
risk_group_lower_cov_ratio = NA
sensitivity_analysis_toggles = list()
#       (3/4) Run model
#####################################################################
##(A) Initialise setting
if (complete_model_runs == 1){run_type="point"
} else if (complete_model_runs > 1){run_type="rand"}
#       (2/4) User choice / Model toggles
####################################################################
rootpath = str_replace(getwd(), "GitHub_vaxAllocation","") #Note: x_results not stored within GitHub repository
complete_model_runs = 1   # when >1 samples randomly from distribution of parameters (where available)
#       (3/4) Run model
#####################################################################
##(A) Initialise setting
if (complete_model_runs == 1){run_type="point"
} else if (complete_model_runs > 1){run_type="rand"}
if (risk_group_toggle == "on"){
num_risk_groups = 2
} else{ num_risk_groups = 1; vax_risk_strategy_toggle = "off"}
if (exists("ticket") == FALSE){ ticket = 1 }
if (exists("prev_setting") == FALSE){ prev_setting = "NONE"}
if (exists("prev_risk_num") == FALSE){ prev_risk_num = "NONE"}
if (exists("prev_risk_group") == FALSE){ prev_risk_group = "NONE"}
if (exists("risk_group_name") == FALSE){ risk_group_name = "NO RISK GROUPS"}
if (exists("prev_run_date") == FALSE){ prev_run_date = as.Date('1900-01-01')}
if (setting != prev_setting | num_risk_groups != prev_risk_num | risk_group_name != prev_risk_group | prev_run_date != Sys.Date()){
source(paste(getwd(),"/(1)_simulate_setting.R",sep="")) #load setting stats if new setting
}
prev_setting = setting
prev_run_date = Sys.Date()
prev_risk_num = num_risk_groups
prev_risk_group = risk_group_name
#making some interim variables to assist with configuring states
num_disease_classes = 4
disease_class_list = c('S','E','I','R')
num_vax_doses = D = length(unique(vaccination_history_TRUE$dose))
vax_type_list = sort(unique(vaccination_history_TRUE$vaccine_type))
num_vax_types = T = length(unique(vaccination_history_TRUE$vaccine_type))
num_vax_classes = num_vax_doses*num_vax_types + 1 # + 1 for unvaccinated
##(B) Load functions
source(paste(getwd(),"/(function)_COVID_ODE.R",sep=""))
source(paste(getwd(),"/(function)_VE_time_step.R",sep=""))
source(paste(getwd(),"/(function)_rho_time_step.R",sep=""))
source(paste(getwd(),"/(function)_vax_strategies.R",sep=""))
source(paste(getwd(),"/(function)_vax_strategies_risk.R",sep=""))
if (exists("VE_estimates_imputed") == FALSE){load(file='1_inputs/VE_estimates_imputed.Rdata')}
source(paste(getwd(),"/(2)_inital_state.R",sep=""))
fitting = 'off'
source(paste(getwd(),"/(2)_inital_state.R",sep=""))
warning('Debugging is on')
if (debug_type == "full"){rm(list=ls());debug = "on"}  # clear global environment
setting = "SLE"
RR_estimate  = 2
vax_strategy_toggle = "off"
vax_risk_strategy_toggle = "off"
risk_group_toggle = "on"
risk_group_name = "adults_with_comorbidities" #options: pregnant_women, adults_with_comorbidities
risk_group_prioritisation_to_date = NA
default_prioritisation_proportion = 0.5
risk_group_lower_cov_ratio = NA
sensitivity_analysis_toggles = list()
vax_strategy_toggles =
list(vax_strategy_start_date        = date_start+30,
vax_strategy_num_doses         = as.integer(1642011),
vax_strategy_roll_out_speed    = 11075 ,                           # doses delivered per day
vax_delivery_group             = 'universal',
vax_age_strategy               = "uniform_no_children",            # options: "oldest", "youngest","50_down","uniform"
vax_dose_strategy              = 1,                                # options: 1,2
vax_strategy_vaccine_type      = "Johnson & Johnson" ,             # options: "Moderna","Pfizer","AstraZeneca","Johnson & Johnson","Sinopharm","Sinovac"
vax_strategy_vaccine_interval  = c(30*3) ,                         # (days) interval between doses, you must specify multiple intervals if multiple doses e.g. c(21,90)
vax_strategy_max_expected_cov  = 0.88                              # value between 0-1 of age group willing to be vaccinated
)
apply_risk_strategy_toggles = list(
vax_risk_strategy = 'Y',             # options: 'Y','N'
vax_risk_proportion = 0.8,           # value between 0-1 (equivalent to %) of doses prioritised to the at risk group
vax_doses_general = 1,               # number of doses delivered to general pop
vax_doses_risk = 2                   # number of doses delivered to risk group
)
waning_toggle_acqusition = TRUE
waning_toggle_severe_outcome = FALSE # save some time, no need to accurate gauge severe outcomes when debugging model
waning_toggle_rho_acqusition = TRUE
#       (2/4) User choice / Model toggles
####################################################################
rootpath = str_replace(getwd(), "GitHub_vaxAllocation","") #Note: x_results not stored within GitHub repository
complete_model_runs = 1   # when >1 samples randomly from distribution of parameters (where available)
#__________________________________________________________________
#       (3/4) Run model
#####################################################################
##(A) Initialise setting
if (complete_model_runs == 1){run_type="point"
} else if (complete_model_runs > 1){run_type="rand"}
if (risk_group_toggle == "on"){
num_risk_groups = 2
} else{ num_risk_groups = 1; vax_risk_strategy_toggle = "off"}
if (exists("ticket") == FALSE){ ticket = 1 }
if (exists("prev_setting") == FALSE){ prev_setting = "NONE"}
if (exists("prev_risk_num") == FALSE){ prev_risk_num = "NONE"}
if (exists("prev_risk_group") == FALSE){ prev_risk_group = "NONE"}
if (exists("risk_group_name") == FALSE){ risk_group_name = "NO RISK GROUPS"}
if (exists("prev_run_date") == FALSE){ prev_run_date = as.Date('1900-01-01')}
if (setting != prev_setting | num_risk_groups != prev_risk_num | risk_group_name != prev_risk_group | prev_run_date != Sys.Date()){
source(paste(getwd(),"/(1)_simulate_setting.R",sep="")) #load setting stats if new setting
}
prev_setting = setting
prev_run_date = Sys.Date()
prev_risk_num = num_risk_groups
prev_risk_group = risk_group_name
#making some interim variables to assist with configuring states
num_disease_classes = 4
disease_class_list = c('S','E','I','R')
num_vax_doses = D = length(unique(vaccination_history_TRUE$dose))
vax_type_list = sort(unique(vaccination_history_TRUE$vaccine_type))
num_vax_types = T = length(unique(vaccination_history_TRUE$vaccine_type))
num_vax_classes = num_vax_doses*num_vax_types + 1 # + 1 for unvaccinated
##(B) Load functions
source(paste(getwd(),"/(function)_COVID_ODE.R",sep=""))
source(paste(getwd(),"/(function)_VE_time_step.R",sep=""))
source(paste(getwd(),"/(function)_rho_time_step.R",sep=""))
source(paste(getwd(),"/(function)_vax_strategies.R",sep=""))
source(paste(getwd(),"/(function)_vax_strategies_risk.R",sep=""))
if (exists("VE_estimates_imputed") == FALSE){load(file='1_inputs/VE_estimates_imputed.Rdata')}
source(paste(getwd(),"/(3)_disease_characteristics.R",sep=""))
source(paste(getwd(),"/(2)_inital_state.R",sep=""))
outbreak_timing = 'off'
source(paste(getwd(),"/(2)_inital_state.R",sep=""))
source(paste(getwd(),"/(3)_disease_characteristics.R",sep=""))
start_date
date_start
source("C:/Users/u6044061/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/CommandDeck.R", echo=TRUE)
#(3) Calculate VE against severe outcome by day
VE_tracker = data.frame()
source("C:/Users/u6044061/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/(antiviral)(function) stochastic severe outcome projections.R", echo=TRUE)
rm(VE)
source("C:/Users/u6044061/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/(antiviral)(function) stochastic severe outcome projections.R", echo=TRUE)
source("C:/Users/u6044061/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/(antiviral)(function) antiviral model.R", echo=TRUE)
source("C:/Users/u6044061/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/(0)_fitting_model.R", echo=TRUE)
source("C:/Users/u6044061/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/(antiviral)(plot) access to care - outcomes averted.R", echo=TRUE)
source("C:/Users/u6044061/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/(antiviral)(plot) access to care - outcomes averted.R", echo=TRUE)
source("C:/Users/u6044061/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/(antiviral)(plot) access to care - outcomes averted.R", echo=TRUE)
detectCores()
