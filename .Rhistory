left_join(overall) %>%
select(agegroup,outcome,rate,overall)
#(C) Check zero values, and manually overwrite them
workshop[workshop$rate == 0,] #n=3
workshop$rate[workshop$agegroup == '0 to 9' & workshop$outcome=='critical_disease'] =
workshop$rate[workshop$agegroup == '10 to 19' & workshop$outcom=='critical_disease'] * 1.5
workshop$rate[workshop$agegroup == '10 to 19' & workshop$outcom=='death'] =
workshop$rate[workshop$agegroup == '20 to 29' & workshop$outcom=='death']
workshop$rate[workshop$agegroup == '0 to 9' & workshop$outcom=='death'] =
workshop$rate[workshop$agegroup == '10 to 19' & workshop$outcom=='death'] * 1.5
workshop[workshop$rate == 0,] #n=0
#(D) calculate RR, clean age groups
workshop = workshop %>%
mutate(RR = rate/overall) %>%
filter(agegroup != '80+') #remove dodgy age group!
workshop$agegroup[workshop$agegroup == '70 to 79'] = '70 to 100'
#(E) plot to see!
plot_list = list()
for (i in 1:length(unique(workshop$outcome))){
outcome = unique(workshop$outcome)[i]
plot_list [[i]] <- ggplot() +
geom_point(data=workshop[workshop$outcome==outcome,],aes(x=agegroup,y=RR)) +
labs(title=paste("distribution of all ",outcome,sep=""))
}
gridExtra::grid.arrange(grobs=plot_list)
plot_list = list()
for (i in 1:length(unique(workshop$outcome))){
outcome = unique(workshop$outcome)[i]
plot_list [[i]] <- ggplot() +
geom_point(data=workshop[workshop$outcome==outcome,],aes(x=agegroup,y=RR)) +
labs(title=paste("distribution of all ",outcome,"(log-scale)",sep=""))+ scale_y_log10()
}
gridExtra::grid.arrange(grobs=plot_list)
########################################################################################################
### (2) Adjust age-distributions to setting ###########################################################
#(A) Multiply RR by pop-level value
pop_level <- read.csv('1_inputs/severe_outcome_country_level.csv')
pop_level = pop_level %>%
filter(country == setting) %>%
mutate(pop_est = percentage) %>%
select(outcome,pop_est)
workshop = workshop %>% left_join(pop_level) %>%
mutate(age_est = pop_est * RR)
View(workshop)
#(B) Calculate % of pop by 10 year age bands
age_groups_10 = c(0,9,19,29,39,49,59,69,100)
age_group_labels_10 = c('0 to 9','10 to 19','20 to 29','30 to 39','40 to 49','50 to 59','60 to 69','70 to 100')
pop_10_bands <- read.csv(paste(rootpath,"inputs/pop_estimates.csv",sep=''), header=TRUE)
pop_10_bands <- pop_10_bands %>%
filter(country == setting) %>%
mutate(agegroup = cut(age,breaks = age_groups_10, include.lowest = T,labels = age_group_labels_10)) %>%
group_by(agegroup) %>%
summarise(pop = sum(population)) %>%
mutate(pop_percentage = pop/sum(pop_10_bands$pop))
#(C) Hence, rederive pop-level est by age_est * % pop
workshop = workshop %>% left_join(pop_10_bands) %>%
mutate(interim = pop_percentage * age_est)
pop_10_bands
sum(pop_10_bands$pop_percentage)
pop_10_bands = pop_10_bands %>%  mutate(pop_percentage = pop/sum(pop_10_bands$pop))
pop_10_bands <- read.csv(paste(rootpath,"inputs/pop_estimates.csv",sep=''), header=TRUE)
pop_10_bands <- pop_10_bands %>%
filter(country == setting) %>%
mutate(agegroup = cut(age,breaks = age_groups_10, include.lowest = T,labels = age_group_labels_10)) %>%
group_by(agegroup) %>%
summarise(pop = sum(population))
pop_10_bands = pop_10_bands %>%  mutate(pop_percentage = pop/sum(pop_10_bands$pop))
sum(pop_10_bands$pop_percentage)
source("C:/Users/u6044061/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/(mech shop) severe outcome age distribution.R", echo=TRUE)
View(age_dn_severe_outcomes)
source("C:/Users/u6044061/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/(0)_fitting_model.R", echo=TRUE)
source("C:/Users/u6044061/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/(mech shop) severe outcome setting-specific rates.R", echo=TRUE)
View(severe_outcome_FINAL)
VOC = strain_inital
##### (1/7) Load population-level wild-type estimate of severe outcomes
severe_outcome_0 <- read.csv('1_inputs/severe_outcome_country_level.csv')
severe_outcome_0$percentage = severe_outcome_0$percentage/100 #make it between 0-1
severe_outcome_0 <- severe_outcome_0[severe_outcome_0$outcome %in% c('death','severe_disease','hosp') &
severe_outcome_0$country == setting
,-c(1,5)] #dropping ICU and ICR as we won't use them, removing source and country column
severe_outcome_0
#####(2/7) Load variant-specific multipliers
workshop <- read.csv('1_inputs/severe_outcome_variant_multiplier.csv')
if (VOC != 'WT'){
#<interlude for omicron>
workshop2 <- read.csv('1_inputs/severe_outcome_variant_multiplier_complex.csv') #omicron vs delta
omicron_basis = workshop[workshop$variant == 'delta',]
omicron_basis$variant = 'omicron'
omicron_basis$source = paste(omicron_basis$source,'/',workshop2$source)
omicron_basis <- omicron_basis %>%
mutate(multiplier = case_when(
outcome == 'hosp' ~ multiplier*workshop2$multiplier[workshop2$outcome == 'hosp'],
outcome %in% c('ICU','death') ~ multiplier*workshop2$multiplier[workshop2$outcome == 'hosp_long']))
#ASSUMPTION: hosp_long proportional to ICU and death
workshop = rbind(workshop,omicron_basis)
#<fin>
workshop = workshop[workshop$variant == VOC,c('outcome','multiplier')]
#_______________________________________________________________________________
#####(3/7) Calculating population-level variant-specific estimate of severe outcomes
#could be made faster, but the assumptions were are making would be less obvious
severe_outcome_1 <- severe_outcome_0 %>%
mutate(percentage = case_when(
outcome == 'death' ~ percentage * workshop$multiplier[workshop$outcome == 'death'],
outcome == 'severe_disease' ~ percentage * workshop$multiplier[workshop$outcome == 'ICU'], #ASSUMPTION
outcome == 'hosp' ~ percentage * workshop$multiplier[workshop$outcome == 'hosp']
),variant=VOC)
rm (omicron_basis,workshop2)
} else if (VOC == 'WT'){
severe_outcome_1 = severe_outcome_0 %>% mutate(variant = VOC)
}
severe_outcome_1
VOC
VOC = 'omicron'
source("C:/Users/u6044061/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/(mech shop) severe outcome setting-specific rates.R", echo=TRUE)
severe_outcome_1
VOC
strain_inital = 'omicron'
source("C:/Users/u6044061/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/(mech shop) severe outcome setting-specific rates.R", echo=TRUE)
debug
debug = "on"
model_weeks
model_weeks = 1
source("C:/Users/u6044061/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/CommandDeck.R", echo=TRUE)
source(paste(getwd(),"/(2)_inital_state.R",sep=""))
source("C:/Users/u6044061/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/(2)_inital_state.R", echo=TRUE)
###### (5/5) calculate inital infection-derived protection (rho) & beta
if (waning_toggle_rho_acqusition == TRUE ){
rho_inital = rho_time_step(date_start)
} else{
rho_inital = 0.95 #Chemaitelly et al. 2 week estimate
}
rho_time_step(date_now)
source("C:/Users/u6044061/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/CommandDeck.R", echo=TRUE)
source("C:/Users/u6044061/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/(2)_inital_state.R", echo=TRUE)
source(paste(getwd(),"/(4)_time_step.R",sep=""))
source("C:/Users/u6044061/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/CommandDeck.R", echo=TRUE)
source("C:/Users/u6044061/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/(0)_fitting_model.R", echo=TRUE)
source("C:/Users/u6044061/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/(0)_fitting_model.R", echo=TRUE)
risk_group_lower_cov_ratio = NA
vaccination_history_TRUE
source("C:/Users/u6044061/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/(1)_simulate_setting.R", echo=TRUE)
source("C:/Users/u6044061/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/(1)_simulate_setting.R", echo=TRUE)
J
Prem_et_al_age_num
age_groups_num
pop_Prem <- pop_setting_orig %>%
mutate(agegroup_PREM = cut(age,breaks = Prem_et_al_age_num, include.lowest = T, labels = Prem_et_al_age_list),
agegroup_MODEL = cut(age,breaks = age_groups_num, include.lowest = T, labels = age_group_labels)) %>%
ungroup() %>%
group_by(agegroup_MODEL) %>%
mutate(model_group_percent = population/sum(population)) %>%
ungroup() %>%
group_by(agegroup_PREM) %>%
mutate(prem_group_percent = population/sum(population)) %>%
select(age,agegroup_PREM,agegroup_MODEL,model_group_percent,prem_group_percent)
sum_1 = pop_Prem %>%
group_by(agegroup_MODEL,agegroup_PREM) %>%
summarise(model_group_percentage = sum(model_group_percent))
sum_2 = pop_Prem %>%
group_by(agegroup_MODEL,agegroup_PREM) %>%
summarise(prem_group_percentage = sum(prem_group_percent))
pop_Prem = sum_1 %>% left_join(sum_2, by = c("agegroup_MODEL", "agegroup_PREM"))
#(C/C) construct contact matrix by our age groups
#create skeleton
workshop_cm1  <- data.frame(matrix(0,ncol = 16,nrow=length(age_groups_num)-1))
rownames(workshop_cm1) <- age_group_labels
colnames(workshop_cm1) <- Prem_et_al_age_list
workshop_cm2 <- data.frame(matrix(0,ncol = length(age_group_labels),nrow=length(age_group_labels)))
rownames(workshop_cm2) <- age_group_labels
colnames(workshop_cm2) <- age_group_labels
#age weighting of contacts
for (i in 1:(length(age_group_labels))){
workshop = pop_Prem[pop_Prem$agegroup_MODEL == age_group_labels[i],]
for (j in 1:nrow(workshop)){
workshop_cm1[i,] = workshop_cm1[i,]  + contact_matrix_setting[row.names(contact_matrix_setting) == workshop$agegroup_PREM[j]] * workshop$model_group_percentage[j]
}
}
#sum across collapsed age bands
for (i in 1:J){
workshop = pop_Prem[pop_Prem$agegroup_MODEL == age_group_labels[i],]
for (j in 1:nrow(workshop)){
workshop_cm2[,i] = workshop_cm2[,i]  + workshop_cm1[colnames(workshop_cm1) == workshop$agegroup_PREM[j]]  * workshop$prem_group_percentage[j]
}
}
j
workshop_cm2[,i]
workshop_cm2
#(B/C) calculate age weightings
Prem_et_al_age_num <- c(0,4,9,14,19,24,29,34,39,44,49,54,59,64,69,74,110)
pop_Prem <- pop_setting_orig %>%
mutate(agegroup_PREM = cut(age,breaks = Prem_et_al_age_num, include.lowest = T, labels = Prem_et_al_age_list),
agegroup_MODEL = cut(age,breaks = age_groups_num, include.lowest = T, labels = age_group_labels)) %>%
ungroup() %>%
group_by(agegroup_MODEL) %>%
mutate(model_group_percent = population/sum(population)) %>%
ungroup() %>%
group_by(agegroup_PREM) %>%
mutate(prem_group_percent = population/sum(population)) %>%
select(age,agegroup_PREM,agegroup_MODEL,model_group_percent,prem_group_percent)
sum_1 = pop_Prem %>%
group_by(agegroup_MODEL,agegroup_PREM) %>%
summarise(model_group_percentage = sum(model_group_percent))
sum_2 = pop_Prem %>%
group_by(agegroup_MODEL,agegroup_PREM) %>%
summarise(prem_group_percentage = sum(prem_group_percent))
pop_Prem = sum_1 %>% left_join(sum_2, by = c("agegroup_MODEL", "agegroup_PREM"))
#(C/C) construct contact matrix by our age groups
#create skeleton
workshop_cm1  <- data.frame(matrix(0,ncol = 16,nrow=length(age_groups_num)-1))
rownames(workshop_cm1) <- age_group_labels
colnames(workshop_cm1) <- Prem_et_al_age_list
workshop_cm2 <- data.frame(matrix(0,ncol = length(age_group_labels),nrow=length(age_group_labels)))
rownames(workshop_cm2) <- age_group_labels
colnames(workshop_cm2) <- age_group_labels
#age weighting of contacts
for (i in 1:(length(age_group_labels))){
workshop = pop_Prem[pop_Prem$agegroup_MODEL == age_group_labels[i],]
for (j in 1:nrow(workshop)){
workshop_cm1[i,] = workshop_cm1[i,]  + contact_matrix_setting[row.names(contact_matrix_setting) == workshop$agegroup_PREM[j]] * workshop$model_group_percentage[j]
}
}
workshop_cm1
workshop
contact_matrix_setting
workshop_cm1
workshop
pop_Prem
pop_setting_orig
pop_Prem <- pop_setting_orig %>%
mutate(agegroup_PREM = cut(age,breaks = Prem_et_al_age_num, include.lowest = T, labels = Prem_et_al_age_list),
agegroup_MODEL = cut(age,breaks = age_groups_num, include.lowest = T, labels = age_group_labels)) %>%
ungroup() %>%
group_by(agegroup_MODEL) %>%
mutate(model_group_percent = population/sum(population)) %>%
ungroup() %>%
group_by(agegroup_PREM) %>%
mutate(prem_group_percent = population/sum(population)) %>%
select(age,agegroup_PREM,agegroup_MODEL,model_group_percent,prem_group_percent)
pop_Prem
pop_Prem <- pop_setting_orig %>%
mutate(agegroup_PREM = cut(age,breaks = Prem_et_al_age_num, include.lowest = T, labels = Prem_et_al_age_list),
agegroup_MODEL = cut(age,breaks = age_groups_num, include.lowest = T, labels = age_group_labels)) %>%
ungroup() %>%
group_by(agegroup_MODEL) %>%
mutate(model_group_percent = population/sum(population)) %>%
ungroup() %>%
group_by(agegroup_PREM) %>%
mutate(prem_group_percent = population/sum(population)) %>%
select(age,agegroup_PREM,agegroup_MODEL,model_group_percent,prem_group_percent)
sum_1 = pop_Prem %>%
group_by(agegroup_MODEL,agegroup_PREM) %>%
summarise(model_group_percentage = sum(model_group_percent))
sum_2 = pop_Prem %>%
group_by(agegroup_MODEL,agegroup_PREM) %>%
summarise(prem_group_percentage = sum(prem_group_percent))
sum_1 %>% left_join(sum_2, by = c("agegroup_MODEL", "agegroup_PREM"))
sum_1
sum_2
pop_Prem
View(pop_Prem)
age_groups_num
Prem_et_al_age_num
pop_Prem <- pop_setting_orig %>%
mutate(agegroup_PREM = cut(age,breaks = Prem_et_al_age_num, include.lowest = T, labels = Prem_et_al_age_list),
agegroup_MODEL = cut(age,breaks = age_groups_num, include.lowest = T, labels = age_group_labels))
pop_Prem
age
Prem_et_al_age_num
#(B/C) calculate age weightings
Prem_et_al_age_num <- as.numeric(0,4,9,14,19,24,29,34,39,44,49,54,59,64,69,74,110)
pop_Prem <- pop_setting_orig %>%
mutate(agegroup_PREM = cut(age,breaks = Prem_et_al_age_num, include.lowest = T, labels = Prem_et_al_age_list),
agegroup_MODEL = cut(age,breaks = age_groups_num, include.lowest = T, labels = age_group_labels)) %>%
ungroup() %>%
group_by(agegroup_MODEL) %>%
mutate(model_group_percent = population/sum(population)) %>%
ungroup() %>%
group_by(agegroup_PREM) %>%
mutate(prem_group_percent = population/sum(population)) %>%
select(age,agegroup_PREM,agegroup_MODEL,model_group_percent,prem_group_percent)
pop_Prem <- pop_setting_orig %>%
mutate(agegroup_PREM = cut(age,breaks = Prem_et_al_age_num, include.lowest = T, labels = Prem_et_al_age_list),
agegroup_MODEL = cut(age,breaks = age_groups_num, include.lowest = T, labels = age_group_labels)) %>%
mutate(
agegroup_PREM = case_when(
age == 0 ~ 0,
TRUE ~ agegroup_PREM),
agegroup_MODEL = case_when(
age == 0 ~ '0 to 4',
TRUE ~ agegroup_MODEL
))
Prem_et_al_age_list
pop_setting_orig %>%
mutate(agegroup_PREM = cut(age,breaks = Prem_et_al_age_num, include.lowest = T, labels = Prem_et_al_age_list),
agegroup_MODEL = cut(age,breaks = age_groups_num, include.lowest = T, labels = age_group_labels)) %>%
mutate(
agegroup_PREM = case_when(
age == 0 ~ 0,
TRUE ~ agegroup_PREM),
agegroup_MODEL = case_when(
age == 0 ~ '0 to 4',
TRUE ~ agegroup_MODEL
))
pop_setting_orig %>%
mutate(agegroup_PREM = cut(age,breaks = Prem_et_al_age_num, include.lowest = T, labels = Prem_et_al_age_list),
agegroup_MODEL = cut(age,breaks = age_groups_num, include.lowest = T, labels = age_group_labels)
pop_setting_orig %>%
pop_setting_orig %>%
mutate(agegroup_PREM = cut(age,breaks = Prem_et_al_age_num, include.lowest = T, labels = Prem_et_al_age_list),
agegroup_MODEL = cut(age,breaks = age_groups_num, include.lowest = T, labels = age_group_labels))
#(B/C) calculate age weightings
Prem_et_al_age_num <- c(0,4,9,14,19,24,29,34,39,44,49,54,59,64,69,74,110)
pop_setting_orig %>%
mutate(agegroup_PREM = cut(age,breaks = Prem_et_al_age_num, include.lowest = T, labels = Prem_et_al_age_list),
agegroup_MODEL = cut(age,breaks = age_groups_num, include.lowest = T, labels = age_group_labels))
pop_setting_orig %>%
mutate(agegroup_PREM = cut(age,breaks = Prem_et_al_age_num, include.lowest = T, labels = Prem_et_al_age_list),
agegroup_MODEL = cut(age,breaks = age_groups_num, include.lowest = T, labels = age_group_labels)) %>%
mutate(
agegroup_PREM = case_when(
age == 0 ~ 0,
TRUE ~ agegroup_PREM),
agegroup_MODEL = case_when(
age == 0 ~ '0 to 4',
TRUE ~ agegroup_MODEL
))
pop_setting_orig %>%
mutate(agegroup_PREM = cut(age,breaks = Prem_et_al_age_num, include.lowest = T, labels = Prem_et_al_age_list),
agegroup_MODEL = cut(age,breaks = age_groups_num, include.lowest = T, labels = age_group_labels)) %>%
mutate(
agegroup_PREM = case_when(
age == 0 ~ 0,
TRUE ~ agegroup_PREM))
source("C:/Users/u6044061/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/(1)_simulate_setting.R", echo=TRUE)
#       (1/4) Setup
####################################################################
#load libraries
library(readr)
library(deSolve)
library(rvest)
library(ggplot2)
library(gridExtra)
library(ggpubr)
library(tidyverse)
debug
source("C:/Users/u6044061/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/(1)_simulate_setting.R", echo=TRUE)
### (2/5) Contact patterns of population
#CONFIRMATION FROM MARK JIT: .Rdata files are more up to date on GitHub (Prem et al. 2021 paper)
#(A/C) load contact matrix
load(file = paste(rootpath,"inputs/contact_all.Rdata",sep=''))
contact_matrix_setting <- contact_all[[setting]]
contact_matrix_setting
Prem_et_al_age_list <- c(0,5,10,15,20,25,30,35,40,45,50,55,60,65,70,75)
colnames(contact_matrix_setting) <- Prem_et_al_age_list; rownames(contact_matrix_setting) <- Prem_et_al_age_list
contact_matrix_setting
#(B/C) calculate age weightings
Prem_et_al_age_num <- c(0,4,9,14,19,24,29,34,39,44,49,54,59,64,69,74,110)
pop_setting_orig %>%
mutate(agegroup_PREM = cut(age,breaks = Prem_et_al_age_num, include.lowest = T, labels = Prem_et_al_age_list),
agegroup_MODEL = cut(age,breaks = age_groups_num, include.lowest = T, labels = age_group_labels)) %>%
ungroup() %>%
group_by(agegroup_MODEL) %>%
mutate(model_group_percent = population/sum(population)) %>%
ungroup() %>%
group_by(agegroup_PREM) %>%
mutate(prem_group_percent = population/sum(population)) %>%
select(age,agegroup_PREM,agegroup_MODEL,model_group_percent,prem_group_percent)
Prem_et_al_age_num
Prem_et_al_age_list
pop_setting_orig
min(pop_setting_orig$age)
pop_Prem <- pop_setting_orig %>%
mutate(agegroup_PREM = cut(age,breaks = Prem_et_al_age_num, include.lowest = T, labels = Prem_et_al_age_list),
agegroup_MODEL = cut(age,breaks = age_groups_num, include.lowest = T, labels = age_group_labels))
pop_setting_orig
pop_Prem <- pop_setting_orig %>%
mutate(agegroup_PREM = cut(age,breaks = Prem_et_al_age_num, include.lowest = T, labels = Prem_et_al_age_list),
agegroup_MODEL = cut(age,breaks = age_groups_num, include.lowest = T, labels = age_group_labels))
pop_Prem
pop_Prem$agegroup_PREM[pop_Prem$age == 0] = 0
pop_Prem
pop_Prem$agegroup_MODEL[pop_Prem$age == 0] = "0 to 4"
source("C:/Users/u6044061/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/(1)_simulate_setting.R", echo=TRUE)
source("C:/Users/u6044061/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/(0)_fitting_model.R", echo=TRUE)
pop
sum(pop)
View(initalClasses)
pop_risk_group_dn
pop_risk_group_dn
##(B/B) With risk groups
pop_risk_group_dn = pop_setting %>%
mutate(risk_group = 'general_public')
pop_setting %>%
mutate(risk_group = 'general_public')
pop_setting
pop_setting_orig %>%
mutate(age_group = cut(age,breaks = age_groups_num, include.lowest = T,labels = age_group_labels))
pop_setting <- pop_setting_orig %>%
mutate(age_group = cut(age,breaks = age_groups_num, include.lowest = T,labels = age_group_labels)) %>%
group_by(age_group) %>%
summarise(pop = as.numeric(sum(population)))
pop_setting
##(B/B) With risk groups
pop_risk_group_dn = pop_setting %>%
mutate(risk_group = 'general_public')
pop_risk_group_dn
if (num_risk_groups>1){
risk_dn = read.csv('1_inputs/risk_group.csv')
if(risk_group_name %in% c('adults_with_comorbidities')){
risk_dn = risk_dn[risk_dn$risk_group_name == risk_group_name,]
} else if (risk_group_name %in% c('pregnant_women')){
load(file = "1_inputs/prevalence_pregnancy.Rdata")
risk_dn = prevalence_pregnancy
} else {
stop('risk_group_name not a valid value')
}
risk_dn = risk_dn %>%
select(age_group,prop)
pop_high_risk = pop_setting %>%
left_join(risk_dn, by = "age_group") %>%
mutate(risk_group = risk_group_name,
pop = round(pop*prop)) %>%
select(risk_group,age_group,pop)
pop_general_public   = pop_setting %>%
left_join(risk_dn, by = "age_group") %>%
mutate(risk_group = 'general_public',
pop = round(pop*(1-prop))) %>%
select(risk_group,age_group,pop)
pop_risk_group_dn = rbind(pop_general_public,pop_high_risk)
pop_risk_group = pop_risk_group_dn %>%
group_by(risk_group) %>%
summarise(pop = sum(pop))
} else{
risk_dn = crossing(age_group=age_group_labels,
prop = 1)
}
if (round(sum(pop_risk_group_dn$pop)) != sum(pop)){stop('population by risk group group does not match total population!')}
pop_risk_group_dn
source("C:/Users/u6044061/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/(0)_fitting_model.R", echo=TRUE)
RR_estimate
### Fit with risk group _______________________________________________________________________________________
risk_group_prioritisation_to_date = NA
risk_group_lower_cov_ratio = NA
default_prioritisation_proportion = 0.5
risk_group_toggle = "on"
risk_group_name_list = c('pregnant_women', 'adults_with_comorbidities')
risk_group_RR_list = c(2.4,1.95)
plot_list = list()
for (fit_ticket in 1:length(risk_group_name_list)){
risk_group_name = risk_group_name_list[fit_ticket]
RR_estimate = risk_group_RR_list[fit_ticket]
source(paste(getwd(),"/CommandDeck.R",sep=""))
plot_list[[fit_ticket]] = list(plot1,plot2,plot3,plot4,plot5)
fitted_incidence_log_tidy = incidence_log_tidy
fitted_incidence_log = incidence_log %>% select(date,daily_cases)
fitted_results[[(fit_ticket+1)]] = list(parameters,next_state,fitted_incidence_log_tidy,fitted_incidence_log,risk_group_name)
}
grid.arrange(plot_list[[1]][[1]],plot_list[[1]][[2]],plot_list[[1]][[3]],plot_list[[1]][[4]],plot_list[[1]][[5]], layout_matrix = lay)
grid.arrange(plot_list[[2]][[1]],plot_list[[2]][[2]],plot_list[[2]][[3]],plot_list[[2]][[4]],plot_list[[2]][[5]], layout_matrix = lay)
#______________________________________________________________________________________________________________
### Save fitted results ______________________________________________________________________________________
if (! Sys.Date() == date_now-1 ){
warning('fitted date not equal to current date')
if (Sys.Date() > date_now){stop('fitted date less than current date, may cause problems with real vaccines not being delivered!')}
}
fitted_max_date = date_now-1  #incidence log always missed in first day of model
save(fitted_max_date,file = '1_inputs/last_fit_date.Rdata')
save(fitted_results, file = '1_inputs/fitted_results.Rdata')
#______________________________________________________________________________________________________________
### CHECK _____________________________________________________________________________________________________
#seroprevalence estimates
workshop = next_state_FIT #November 2022
workshop = next_state     #steady state in August 2022
workshop = fitted_next_state
sum(workshop$pop[workshop$class == "R"])/sum(workshop$pop)
workshop %>%
filter(class == 'R') %>%
group_by(age_group) %>%
summarise(pop = sum(pop)) %>%
rename(recovered = pop) %>%
left_join(pop_setting,by='age_group') %>%
mutate(seroprev= recovered/pop)
#plot shape of outbreak compared to reported cases
coeff <- 1/2000
ggplot() +
geom_point(data=case_history[case_history$date>date_start & case_history$date <max(incidence_log$date),],
aes(x=date,y=rolling_average/coeff),na.rm=TRUE) +
geom_line(data=incidence_log,aes(x=date,y=rolling_average)) +
scale_y_continuous(
name = "Model projections",
sec.axis = sec_axis(~.*coeff, name="Reported cases")
)+
plot_standard
if (new_variant_check == "on"){
if (max(incidence_log_fit$date) == max(incidence_log_outbreak$date)){
ggplot() +
geom_point(data=case_history[case_history$date>date_start & case_history$date <max(incidence_log$date),],
aes(x=date,y=rolling_average/coeff),na.rm=TRUE) +
geom_line(data=incidence_log_outbreak,aes(x=date,y=rolling_average)) +
geom_line(data = incidence_log_fit,aes(x=date,y=rolling_average),linetype = "dashed") +
scale_y_continuous(
name = "Model projections",
sec.axis = sec_axis(~.*coeff, name="Reported cases")
) +
plot_standard
}
}
#______________________________________________________________________________________________________________
###TURN OFF FITTING ___________________________________________________________________________________________
fitting = "off"
#______________________________________________________________________________________________________________
source("C:/Users/u6044061/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/FleetAdmiral.R", echo=TRUE)
