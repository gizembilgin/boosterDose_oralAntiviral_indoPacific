if (nrow(vax_roll_out_speed_modifier)>0){
exception_list = unique(booster_speed_modifier$day)
workshop = booster_speed_modifier %>% filter(cumsum<ceiling)
workshop = nrow(workshop) + 1
if (max(booster_speed_modifier$cumsum)+daily_per_dose>ceiling){
timeframe = workshop
} else{
extension_time = (ceiling - max(booster_speed_modifier$cumsum))/daily_per_dose
timeframe = timeframe + extension_time
}
} else{
exception_list = c(-1)
}
timeframe = ceiling(timeframe)
booster_delivery_outline <- crossing(day = c(1:timeframe),
dose = unique(eligible_pop$dose),
vaccine_type = unique(eligible_pop$vaccine_type),
age_group = age_group_labels,
doses_delivered = c(0))
for (day in 1:timeframe){
avaliable = daily_per_dose
daily_per_dose_here = daily_per_dose
#apply limiting
if (day %in% exception_list){
avaliable = booster_speed_modifier$doses_avaliable[booster_speed_modifier$day == day]
daily_per_dose_here = avaliable
}
#ensuring that we don't overshoot available doses
if (day == timeframe){
workshop_leftover = sum(booster_delivery_outline$doses_delivered)
avaliable = min(booster_dose_allocation-workshop_leftover,daily_per_dose)
#CHECK
if(! round(workshop_leftover) %in% c(round((timeframe-1)*daily_per_dose))){
if (round(workshop_leftover) %in% round(sum(booster_speed_modifier$doses_avaliable[booster_speed_modifier$day < timeframe]))){
} else{
stop('delivered booster doses do not align with expected')
}
}
}
if (avaliable > sum(VA$doses_left)){avaliable = sum(VA$doses_left)}
while(avaliable>0 & priority_num <= highest_priority){
if(sum(VA$doses_left[VA$priority == priority_num])>0){
#i.e., while we still have doses to deliver in this priority group
if(0 %in% VA$doses_left[VA$priority == priority_num & VA$dose == 1]){
age_complete = VA$age_group[VA$doses_left == 0 & VA$priority == priority_num & VA$dose == 1]
VA$priority[VA$age_group %in% age_complete] = VA$priority[VA$age_group %in% age_complete] + 100
priority_group = as.character(unique(VA$age_group[VA$priority == priority_num]))
} #FIX - when one age group in the priority group runs out first
workshop_doses = min(sum(VA$doses_left[VA$priority == priority_num]),
daily_per_dose_here,
avaliable)
#either deliver max capacity or number left in this group, whichever is fewer
leftover=0
VA_pt = VA #snapshot
for (i in length(priority_group):1){
for (d in unique(VA$dose)){
for (t in 1:length(unique(VA$vaccine_type))){
workshop_age = priority_group[i]
workshop_type = unique(VA$vaccine_type)[t]
workshop_prop = VA_pt$doses_left[VA_pt$age_group == workshop_age & VA_pt$dose == d & VA_pt$vaccine_type == workshop_type]/
sum(VA_pt$doses_left[VA_pt$priority == priority_num])
workshop_calc = workshop_doses * workshop_prop + leftover
if (workshop_calc > VA$doses_left[VA$age_group == workshop_age & VA$dose == d & VA$vaccine_type == workshop_type]){
leftover = abs(workshop_calc - VA$doses_left[VA$age_group == workshop_age & VA$dose == d & VA$vaccine_type == workshop_type])
workshop_calc = VA$doses_left[VA$age_group == workshop_age & VA$dose == d & VA$vaccine_type == workshop_type]
} else{
leftover = 0
}
booster_delivery_outline$doses_delivered[booster_delivery_outline$day == day &
booster_delivery_outline$dose == d &
booster_delivery_outline$vaccine_type == workshop_type &
booster_delivery_outline$age_group == workshop_age] = workshop_calc
VA$doses_left[VA$age_group == workshop_age & VA$dose == d & VA$vaccine_type == workshop_type] =
VA$doses_left[VA$age_group == workshop_age & VA$dose == d & VA$vaccine_type == workshop_type] - workshop_calc
}
}
}
avaliable = avaliable - workshop_doses
} else if (sum(VA$doses_left[VA$priority == priority_num])==0){
priority_num = priority_num+1
priority_group = as.character(unique(VA$age_group[VA$priority == priority_num]))
} else{
stop('negative doses left, reconsider!')
}
} #<end while loop>
}
workshop_calc
VA
View(workshop_calc )
VA %>% filter(age_group == workshop_age)
workshop_age
priority_group
day
VA =  eligible_pop %>% mutate(doses_left = doses_delivered)
priority_num = 1
priority_group  = as.character(unique(VA$age_group[VA$priority == priority_num]))
ceiling = min(sum(eligible_pop$doses_delivered),booster_dose_allocation)
timeframe = ceiling/booster_rollout_speed
daily_per_dose = booster_rollout_speed
#modify if available doses restricted
if (nrow(vax_roll_out_speed_modifier)>0){
exception_list = unique(booster_speed_modifier$day)
workshop = booster_speed_modifier %>% filter(cumsum<ceiling)
workshop = nrow(workshop) + 1
if (max(booster_speed_modifier$cumsum)+daily_per_dose>ceiling){
timeframe = workshop
} else{
extension_time = (ceiling - max(booster_speed_modifier$cumsum))/daily_per_dose
timeframe = timeframe + extension_time
}
} else{
exception_list = c(-1)
}
timeframe = ceiling(timeframe)
booster_delivery_outline <- crossing(day = c(1:timeframe),
dose = unique(eligible_pop$dose),
vaccine_type = unique(eligible_pop$vaccine_type),
age_group = age_group_labels,
doses_delivered = c(0))
day
avaliable = daily_per_dose
avaliable
daily_per_dose_here = daily_per_dose
#apply limiting
if (day %in% exception_list){
avaliable = booster_speed_modifier$doses_avaliable[booster_speed_modifier$day == day]
daily_per_dose_here = avaliable
}
day
avaliable
daily_per_dose_here
#ensuring that we don't overshoot available doses
if (day == timeframe){
workshop_leftover = sum(booster_delivery_outline$doses_delivered)
avaliable = min(booster_dose_allocation-workshop_leftover,daily_per_dose)
#CHECK
if(! round(workshop_leftover) %in% c(round((timeframe-1)*daily_per_dose))){
if (round(workshop_leftover) %in% round(sum(booster_speed_modifier$doses_avaliable[booster_speed_modifier$day < timeframe]))){
} else{
stop('delivered booster doses do not align with expected')
}
}
}
timeframe
if (avaliable > sum(VA$doses_left)){avaliable = sum(VA$doses_left)}
avaliable
priority_num
highest_priority
sum(VA$doses_left[VA$priority == priority_num])>0
0 %in% VA$doses_left[VA$priority == priority_num & VA$dose == 1]
VA[VA$priority == priority_num & VA$dose == 1]
VA[VA$priority == priority_num & VA$dose == 1,]
VA$age_group[VA$doses_left == 0 & VA$priority == priority_num & VA$dose == 1]
VA[VA$priority == priority_num & VA$dose == 1]
VA[VA$priority == priority_num & VA$dose == 1,]
VA =  eligible_pop %>% mutate(doses_left = doses_delivered)
priority_num = 1
priority_group  = as.character(unique(VA$age_group[VA$priority == priority_num]))
ceiling = min(sum(eligible_pop$doses_delivered),booster_dose_allocation)
timeframe = ceiling/booster_rollout_speed
daily_per_dose = booster_rollout_speed
#modify if available doses restricted
if (nrow(vax_roll_out_speed_modifier)>0){
exception_list = unique(booster_speed_modifier$day)
workshop = booster_speed_modifier %>% filter(cumsum<ceiling)
workshop = nrow(workshop) + 1
if (max(booster_speed_modifier$cumsum)+daily_per_dose>ceiling){
timeframe = workshop
} else{
extension_time = (ceiling - max(booster_speed_modifier$cumsum))/daily_per_dose
timeframe = timeframe + extension_time
}
} else{
exception_list = c(-1)
}
timeframe = ceiling(timeframe)
booster_delivery_outline <- crossing(day = c(1:timeframe),
dose = unique(eligible_pop$dose),
vaccine_type = unique(eligible_pop$vaccine_type),
age_group = age_group_labels,
doses_delivered = c(0))
for (day in 1:timeframe){
avaliable = daily_per_dose
daily_per_dose_here = daily_per_dose
#apply limiting
if (day %in% exception_list){
avaliable = booster_speed_modifier$doses_avaliable[booster_speed_modifier$day == day]
daily_per_dose_here = avaliable
}
#ensuring that we don't overshoot available doses
if (day == timeframe){
workshop_leftover = sum(booster_delivery_outline$doses_delivered)
avaliable = min(booster_dose_allocation-workshop_leftover,daily_per_dose)
#CHECK
if(! round(workshop_leftover) %in% c(round((timeframe-1)*daily_per_dose))){
if (round(workshop_leftover) %in% round(sum(booster_speed_modifier$doses_avaliable[booster_speed_modifier$day < timeframe]))){
} else{
stop('delivered booster doses do not align with expected')
}
}
}
if (avaliable > sum(VA$doses_left)){avaliable = sum(VA$doses_left)}
while(avaliable>0 & priority_num <= highest_priority){
if(sum(VA$doses_left[VA$priority == priority_num])>0){
#i.e., while we still have doses to deliver in this priority group
# if(0 %in% VA$doses_left[VA$priority == priority_num & VA$dose == 1]){
#   age_complete = VA$age_group[VA$doses_left == 0 & VA$priority == priority_num & VA$dose == 1]
#   VA$priority[VA$age_group %in% age_complete] = VA$priority[VA$age_group %in% age_complete] + 100
#
#   priority_group = as.character(unique(VA$age_group[VA$priority == priority_num]))
# } #FIX - when one age group in the priority group runs out first
workshop_doses = min(sum(VA$doses_left[VA$priority == priority_num]),
daily_per_dose_here,
avaliable)
#either deliver max capacity or number left in this group, whichever is fewer
leftover=0
VA_pt = VA #snapshot
for (i in length(priority_group):1){
for (d in unique(VA$dose)){
for (t in 1:length(unique(VA$vaccine_type))){
workshop_age = priority_group[i]
workshop_type = unique(VA$vaccine_type)[t]
workshop_prop = VA_pt$doses_left[VA_pt$age_group == workshop_age & VA_pt$dose == d & VA_pt$vaccine_type == workshop_type]/
sum(VA_pt$doses_left[VA_pt$priority == priority_num])
workshop_calc = workshop_doses * workshop_prop + leftover
if (workshop_calc > VA$doses_left[VA$age_group == workshop_age & VA$dose == d & VA$vaccine_type == workshop_type]){
leftover = abs(workshop_calc - VA$doses_left[VA$age_group == workshop_age & VA$dose == d & VA$vaccine_type == workshop_type])
workshop_calc = VA$doses_left[VA$age_group == workshop_age & VA$dose == d & VA$vaccine_type == workshop_type]
} else{
leftover = 0
}
booster_delivery_outline$doses_delivered[booster_delivery_outline$day == day &
booster_delivery_outline$dose == d &
booster_delivery_outline$vaccine_type == workshop_type &
booster_delivery_outline$age_group == workshop_age] = workshop_calc
VA$doses_left[VA$age_group == workshop_age & VA$dose == d & VA$vaccine_type == workshop_type] =
VA$doses_left[VA$age_group == workshop_age & VA$dose == d & VA$vaccine_type == workshop_type] - workshop_calc
}
}
}
avaliable = avaliable - workshop_doses
} else if (sum(VA$doses_left[VA$priority == priority_num])==0){
priority_num = priority_num+1
priority_group = as.character(unique(VA$age_group[VA$priority == priority_num]))
} else{
stop('negative doses left, reconsider!')
}
} #<end while loop>
}
### formating booster_delivery_outline to align with vaccination_history_TRUE
booster_delivery_outline = booster_delivery_outline %>%
mutate(date = vax_strategy_start_date + (day-1)) %>%
rename(FROM_vaccine_type = vaccine_type,
FROM_dose = dose,
doses_delivered_this_date = doses_delivered) %>%
mutate(vaccine_type = vax_strategy_vaccine_type,
dose = 8,
vaccine_mode = case_when(
vaccine_type %in% c("Moderna","Pfizer") ~ 'mRNA',
vaccine_type %in% c("AstraZeneca","Johnson & Johnson","Sinopharm","Sinovac") ~ 'viral'),
coverage_this_date = NA #shouldn't be used anyway
) %>%
select(date,vaccine_type,vaccine_mode,dose,coverage_this_date,doses_delivered_this_date,age_group,FROM_dose,FROM_vaccine_type)
#CHECK #########################################
#Checking all doses delivered
if (round(sum(booster_delivery_outline$doses_delivered_this_date)) != round(sum(eligible_pop$doses_delivered))) { #if not all doses delivered
if (is.na(restriction_date) == TRUE){ #if no restriction date -> error
stop('not all booster doses delivered')
} else{ #else if restriction date
if (round(as.numeric(restriction_date - vax_strategy_start_date +1) * booster_rollout_speed) == round(sum(workshop$doses))){
#if restriction date causing non delivery of doses
} else{
stop('not all booster doses delivered')
}
}
}
#Checking poached doses are not before eligibility
check_elig = vaccination_history_TRUE %>%
mutate(primary_schedule_complete = case_when(
vaccine_type == "Johnson & Johnson" ~  'Y',
dose %in% c(2,3) ~ 'Y',
TRUE ~ 'N'),
boosted = case_when(
vaccine_type == "Johnson & Johnson" & dose == 2 ~ 'Y',
dose == 3 ~ 'Y',
TRUE ~ 'N'))  %>%
filter(risk_group %in% risk_group_name &
# primary_schedule_complete == "Y" & #CAN CHANGE THIS TOGGLE
boosted == "N" &
coverage_this_date > 0) %>%
mutate(date = date + booster_dose_interval) %>%
ungroup() %>% group_by(date) %>% summarise(total_doses = sum(doses_delivered_this_date),.groups = "keep") %>%
ungroup() %>% mutate(individuals_eligible = cumsum(total_doses)) %>%
select(-total_doses)
hypoth_delivery = booster_delivery_outline %>%
ungroup() %>% group_by(date) %>% summarise(total_doses = sum(doses_delivered_this_date),.groups = "keep") %>%
ungroup() %>% mutate(cum_doses_delivered = cumsum(total_doses)) %>%
select(-total_doses)
check_less_than = check_elig %>%
left_join(hypoth_delivery, by = "date") %>%
filter(round(cum_doses_delivered) > round(individuals_eligible))
if (nrow(check_less_than) > 0 ){
ggplot() +
geom_line(data = check_elig, aes(x=date,y=individuals_eligible)) +
geom_point(data = hypoth_delivery, aes(x=date,y=cum_doses_delivered)) +
xlab('') + ylab('number of individuals eligible for a booster dose') +
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
axis.line = element_line(color = 'black'))
stop('more booster doses delivered than individuals eligible!')
}
#################################################
ggplot(booster_delivery_outline) + geom_point(aes(x=date,y=doses_delivered_this_date,color=as.factor(age_group),shape=as.factor(FROM_vaccine_type)))
vax_delivery_outline = bind_rows(vax_delivery_outline,booster_delivery_outline)
ticket
receipt
### (3) Run  ##################################################################################################
for (ticket in 5:length(queue)){
# if (ticket == 2){ # ticket == 1 was no prioritisation
#   vax_risk_strategy_toggle = "on"
#   risk_group_toggle = "on"
# }
commands = queue[[ticket]]
VE_loop = 0
vax_strategy_description    = commands$vax_strategy_description
apply_risk_strategy_toggles = commands$apply_risk_strategy_toggles
source(paste(getwd(),"/CommandDeck.R",sep=""))
severe_outcome_projections = severe_outcome_log %>%
mutate(label = vax_strategy_description, day = as.numeric(date - date_start ))
warehouse_plot = rbind(warehouse_plot,severe_outcome_projections)
row = row %>%
mutate(scenario                    = vax_strategy_description,
date_complete_at_risk_group = date_complete_at_risk_group) %>%
relocate(scenario, .before = colnames(row)[[1]])
warehouse_table = rbind(warehouse_table,row)
### code for RR sensitivity analysis
if ('RR_risk_group' %in% names(sensitivity_analysis_toggles)){
RR_to_test_list = sensitivity_analysis_toggles$RR_risk_group
if (ticket == 1){SA_RR_warehouse_table = data.frame()}
for (RR_loop in 1:length(RR_to_test_list)){
RR_estimate = RR_to_test_list[[RR_loop]]
source(paste(getwd(),"/(5)_severe_outcomes_calc.R",sep=""))
source(paste(getwd(),"/(function)_severe_outcome_proj.R",sep=""))
row = row %>% mutate(scenario = vax_strategy_description,
RR_estimate = RR_estimate) %>%
relocate(scenario, .before = colnames(row)[[1]])
SA_RR_warehouse_table = rbind(SA_RR_warehouse_table,row)
}
save(SA_RR_warehouse_table,file =  paste(rootpath,"x_results/sensitivity_analysis_RR_",Sys.Date(),".Rdata",sep=''))
RR_estimate = RR_default
}
### code for VE sensitivity analysis
if ('VE_older_adults' %in% names(sensitivity_analysis_toggles)){
save_toggles = sensitivity_analysis_toggles
if ('VE_adults_comorb' %in% names(sensitivity_analysis_toggles)){VE_loop_length = 2
} else{VE_loop_length = 1}
if (ticket == 1){SA_VE_warehouse_table = warehouse_table %>%
select(-date_complete_at_risk_group) %>%
mutate(VE_mod = 'none')
} else{
workshop = row %>%
select(-date_complete_at_risk_group) %>%
mutate(VE_mod = 'none')
SA_VE_warehouse_table = rbind(SA_VE_warehouse_table,workshop)
}
for (VE_loop in 1:VE_loop_length){
if ('VE_older_adults' %in% names(sensitivity_analysis_toggles) & 'VE_adults_comorb' %in% names(sensitivity_analysis_toggles)){this_sensitivity_analysis = 'VE_comorb'
} else{this_sensitivity_analysis = 'VE_older_adults'} #COMEBACK - there MUST be a simpler way to do this in R, but a quick 30min search yielded no results
source(paste(getwd(),"/(5)_severe_outcomes_calc.R",sep=""))
source(paste(getwd(),"/(function)_severe_outcome_proj.R",sep=""))
row = row %>% mutate(scenario = vax_strategy_description,
VE_mod = this_sensitivity_analysis) %>%
relocate(scenario, .before = colnames(row)[[1]])
SA_VE_warehouse_table = rbind(SA_VE_warehouse_table,row)
sensitivity_analysis_toggles = sensitivity_analysis_toggles[!names(sensitivity_analysis_toggles) %in% c('VE_adults_comorb')] #remove for second loop
}
VE_loop = 0
save(SA_VE_warehouse_table,file =  paste(rootpath,"x_results/sensitivity_analysis_VE_",Sys.Date(),".Rdata",sep=''))
sensitivity_analysis_toggles = save_toggles
}
}
#____________________________________________________________________________________________________________________________________
### (4) Save outputs  ##################################################################################################
results_warehouse_entry = list()
results_warehouse_entry[[1]] = warehouse_table
results_warehouse_entry[[2]] = warehouse_plot
### (A/B) Quick plot for sense checking
warehouse_plot = warehouse_plot %>%
mutate(time = day) %>%
filter(time>=0)
if (risk_group_name == 'adults_with_comorbidities'){warehouse_plot = warehouse_plot[! warehouse_plot$label %in% c('broaden to <18 pregnant individuals'),]}
section_1 = c("no prioritisation" ,"25% prioritisation" ,"50% prioritisation" ,"75% prioritisation", "booster at three months (at risk only)" )
section_2 = c("no prioritisation","additional primary doses","additional booster doses","broaden to <18 pregnant individuals")
section_list = list(section_1,section_2)
for (section in 1:length(section_list)){
list_plot_commands = section_list[[section]]
workshop = warehouse_plot[warehouse_plot$label %in% list_plot_commands, ]
abs_plot_list = list()
for (i in 1:length(unique(workshop$outcome))){
outcome = unique(workshop$outcome)[i]
abs_plot_list [[i]] <- ggplot(data=workshop[workshop$outcome==outcome,]) +
geom_line(aes(x=time,y=proj,color=as.factor(label))) +
labs(title=paste(outcome)) +
labs(colour = "") +
theme_bw() +
xlab("") +
ylab("")}
cum_plot_list = list()
for (i in 1:length(unique(workshop$outcome))){
outcome = unique(workshop$outcome)[i]
cum_plot_list [[i]] <- ggplot(data=workshop[workshop$outcome==outcome,]) +
geom_line(aes(x=time,y=proj_cum,color=as.factor(label))) +
labs(title=paste(outcome)) +
labs(colour = "") +
theme_bw() +
xlab("") +
ylab("")
}
# 1 = death, 2 = hosp, 3 = severe_disease, 4 = YLL, 5 = cases
ggarrange(abs_plot_list[[5]],cum_plot_list[[5]],
abs_plot_list[[2]],cum_plot_list[[2]],
abs_plot_list[[3]], cum_plot_list[[3]],
abs_plot_list[[1]],  cum_plot_list[[1]],
common.legend = TRUE,
legend="bottom",
ncol = 2,
nrow = 4)
}
### (B/B) Create table
baseline_to_compare = "no prioritisation"
iteration_num = 1
if ('RR_risk_group' %in% names(sensitivity_analysis_toggles)){iteration_num = length(RR_to_test_list)}
if ('VE_adults_comorb' %in% names(sensitivity_analysis_toggles)){iteration_num = 3
} else if ('VE_older_adults' %in% names(sensitivity_analysis_toggles)){iteration_num = 2 #include default
}
for (i in 1:iteration_num){
if ('RR_risk_group' %in% names(sensitivity_analysis_toggles)){
workshop = SA_RR_warehouse_table %>%
filter(RR_estimate == RR_to_test_list[[i]] ) %>%
select(-RR_estimate)
} else if ('VE_older_adults' %in% names(sensitivity_analysis_toggles)){
workshop = SA_VE_warehouse_table %>%
filter(VE_mod == unique(SA_VE_warehouse_table$VE_mod)[i] ) %>%
select(-VE_mod)
} else {
workshop = warehouse_table %>%
select(-date_complete_at_risk_group)
}
table3 = workshop %>%
pivot_longer(
cols = 2:ncol(workshop) ,
names_to = 'outcome',
values_to = 'num'
)
#compare to baseline
baseline = table3 %>%
filter(scenario == baseline_to_compare) %>%
rename(baseline_num=num) %>%
select(-scenario)
table3 = table3 %>%
left_join(baseline,by=c('outcome'))  %>%
mutate(abs_reduction = num - baseline_num,
rel_reduction = 100*(num - baseline_num)/baseline_num)
if (risk_group_name == "pregnant_women"){
table3$outcome = factor(table3$outcome,levels=c('cases','severe_disease','hosp','death','YLL','neonatal_deaths'))
} else{
table3$outcome = factor(table3$outcome,levels=c('cases','severe_disease','hosp','death','YLL'))
}
table3$scenario = factor(table3$scenario, levels =
c("no prioritisation",                      "25% prioritisation",                     "50% prioritisation",
"75% prioritisation",                     "booster at three months (at risk only)", "additional primary doses",
"additional booster doses",               "broaden to <18 pregnant individuals" ))
table3 = table3 %>% arrange(scenario,outcome)
options(scipen = 1000)
print = table3 %>%
filter(! scenario %in% c(baseline_to_compare))  %>%
mutate(abs_reduction = round(abs_reduction),
rel_reduction = round(rel_reduction,digits=1),
together_value = paste(format(abs_reduction, format="f", big.mark=",", digits=1),
' (',rel_reduction,'%)',sep=''),
together_outcome = paste(outcome,sep='_')) %>%
ungroup() %>%
select(-num,-baseline_num,-abs_reduction,-rel_reduction,-outcome) %>%
pivot_wider(
id_cols = scenario,
names_from = together_outcome,
values_from = together_value)
#Save results!
time = Sys.time()
time = gsub(':','-',time)
if ('RR_risk_group' %in% names(sensitivity_analysis_toggles)){
this_RR = RR_to_test_list[[i]]
write.csv(print,file=paste(rootpath,'x_results/table3',vax_strategy_toggles_CURRENT_TARGET$vax_strategy_vaccine_type,risk_group_name,'RR',this_RR,time,'.csv',sep=''))
} else if ('VE_older_adults' %in% names(sensitivity_analysis_toggles)){
this_VE_mod = unique(SA_VE_warehouse_table$VE_mod)[i]
write.csv(print,file=paste(rootpath,'x_results/table3',vax_strategy_toggles_CURRENT_TARGET$vax_strategy_vaccine_type,this_VE_mod,time,'.csv',sep=''))
} else if ('vax_hesistancy_risk_group' %in% names(sensitivity_analysis_toggles)){
write.csv(print,file=paste(rootpath,'x_results/table3',vax_strategy_toggles_CURRENT_TARGET$vax_strategy_vaccine_type,risk_group_name,' vax_hest ',time,'.csv',sep=''))
results_warehouse_entry[[4]]= print
} else{
write.csv(print,file=paste(rootpath,'x_results/table3',vax_strategy_toggles_CURRENT_TARGET$vax_strategy_vaccine_type,risk_group_name,gov_target,time,'.csv',sep=''))
results_warehouse_entry[[4]]= print
results_warehouse[[receipt]] = results_warehouse_entry
}
}
receipt = 3
risk_group_name = "adults_with_comorbidities"
source(paste(getwd(),"/(Table 3) high-risk groups.R",sep=""))
receipt
ticket
