fitted_next_state = loaded_fit[[2]]
fitted_incidence_log_tidy = loaded_fit[[3]]
fitted_incidence_log = loaded_fit[[4]]
fitted_incidence_log_tidy = fitted_incidence_log_tidy %>% filter(date <= date_start) # CHECKED last of fitted log = first of new log
fitted_incidence_log = fitted_incidence_log %>% filter(date <= date_start)
}
}
if ( debug == "on" | fitting == "on"){
Reff_tracker = data.frame()
rho_tracker_dataframe = data.frame()
VE_tracker_dataframe = data.frame()
}
#__________________________________________________________________
#       (2/4) User choice / Model toggles
####################################################################
if (Sys.info()[['user']] == 'u6044061'){ rootpath = 'C:/Users/u6044061/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/'
}else if (Sys.info()[['user']] == 'gizem'){ rootpath = 'C:/Users/gizem/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/'}
complete_model_runs = 1   # when >1 samples randomly from distribution of parameters (where available)
discounting_rate = 0      #discounting on YLL
#__________________________________________________________________
#       (3/4) Run model
#####################################################################
##(A) Initialise setting
if (complete_model_runs == 1){run_type="point"
} else if (complete_model_runs > 1){run_type="rand"}
if (risk_group_toggle == "on"){
num_risk_groups = 2
} else{ num_risk_groups = 1; vax_risk_strategy_toggle = "off"}
if (exists("ticket") == FALSE){ ticket = 1 }
if (exists("prev_setting") == FALSE){ prev_setting = "NONE"}
if (exists("prev_risk_num") == FALSE){ prev_risk_num = "NONE"}
if (exists("prev_risk_group") == FALSE){ prev_risk_group = "NONE"}
if (exists("risk_group_name") == FALSE){ risk_group_name = "NO RISK GROUPS"}
if (exists("prev_run_date") == FALSE){ prev_run_date = as.Date('1900-01-01')}
if (exists("prev_discounting_rate") == FALSE){ prev_discounting_rate = discounting_rate}
if (prev_discounting_rate != discounting_rate){stop('need to re-run "(mech shop) severe outcome setting-specific rates" to apply new discounting rate')}
if (setting != prev_setting | num_risk_groups != prev_risk_num | risk_group_name != prev_risk_group | prev_run_date != Sys.Date()){
source(paste(getwd(),"/(1)_simulate_setting.R",sep="")) #load setting stats if new setting
}
prev_setting = setting
prev_run_date = Sys.Date()
prev_risk_num = num_risk_groups
prev_risk_group = risk_group_name
#making some interim variables to assist with configuring states
num_disease_classes = 4
disease_class_list = c('S','E','I','R')
num_vax_doses = D = length(unique(vaccination_history_TRUE$dose))
vax_type_list = sort(unique(vaccination_history_TRUE$vaccine_type))
num_vax_types = T = length(unique(vaccination_history_TRUE$vaccine_type))
num_vax_classes = num_vax_doses*num_vax_types + 1 # + 1 for unvaccinated
##(B) Load functions
source(paste(getwd(),"/(function)_COVID_ODE.R",sep=""))
source(paste(getwd(),"/(function)_VE_time_step.R",sep=""))
source(paste(getwd(),"/(function)_rho_time_step.R",sep=""))
source(paste(getwd(),"/(function)_vax_strategies.R",sep=""))
source(paste(getwd(),"/(function)_vax_strategies_risk.R",sep=""))
if (exists("VE_estimates_imputed") == FALSE){load(file='1_inputs/VE_estimates_imputed.Rdata')}
source(paste(getwd(),"/(3)_disease_characteristics.R",sep=""))
source(paste(getwd(),"/(2)_inital_state.R",sep=""))
vaccination_history_FINAL =
apply_risk_strategy(vax_risk_strategy     = apply_risk_strategy_toggles$vax_risk_strategy,
vax_risk_proportion   = apply_risk_strategy_toggles$vax_risk_proportion,
vax_doses_general     = apply_risk_strategy_toggles$vax_doses_general,
vax_doses_risk        = apply_risk_strategy_toggles$vax_doses_risk,
risk_group_acceptability = apply_risk_strategy_toggles$risk_group_acceptability,
risk_group_accessibility = apply_risk_strategy_toggles$risk_group_accessibility,
risk_group_age_broaden   = apply_risk_strategy_toggles$risk_group_age_broaden
)
#update attributes!
list_doses = unique(vaccination_history_FINAL$dose)
list_doses = list_doses[! list_doses %in% c(8)]
num_vax_doses = D = length(list_doses)
num_vax_doses = max(num_vax_doses,vax_strategy_toggles$vax_dose_strategy)
vax_type_list = sort(unique(vaccination_history_FINAL$vaccine_type))
num_vax_types = T = length(unique(vaccination_history_FINAL$vaccine_type))
num_vax_classes = num_vax_doses*num_vax_types + 1                 # + 1 for unvaccinated
parameters$num_vax_types = num_vax_types
parameters$num_vax_doses = num_vax_doses
date_complete_at_risk_group = vaccination_history_FINAL %>%
filter(risk_group == risk_group_name &
doses_delivered_this_date > 0)
date_complete_at_risk_group = max(date_complete_at_risk_group$date)
if (is.na(risk_group_lower_cov_ratio) &
max(vaccination_history_FINAL$date[vaccination_history_FINAL$dose == 1 & vaccination_history_FINAL$risk_group == risk_group_name & vaccination_history_FINAL$doses_delivered_this_date>0]) >
max(vaccination_history_FINAL$date[vaccination_history_FINAL$dose == 1 & vaccination_history_FINAL$risk_group != risk_group_name & vaccination_history_FINAL$doses_delivered_this_date>0])){
stop('high risk group finish dose 1 after lower risk group')
}
check = vaccination_history_FINAL
View(check)
View(vaccination_history_FINAL)
#sum across day in case date fitted < date_now
vaccination_history_FINAL = vaccination_history_FINAL %>%
group_by(date,vaccine_type,vaccine_mode,dose,age_group,risk_group,FROM_dose,FROM_vaccine_type) %>%
summarise(doses_delivered_this_date = sum(doses_delivered_this_date), .groups = 'keep')
source("C:/Users/u6044061/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/(2)_inital_state.R", echo=TRUE)
load(file = paste(rootpath,"x_results/complete_model_run_2022-09-30,".Rdata",sep=''))
load(file = paste(rootpath,"x_results/complete_model_run_2022-09-30",".Rdata",sep=''))
results_warehouse[[4]][[3]]
results_warehouse[[5]][[3]]
source("C:/Users/u6044061/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/(antiviral) set up.R", echo=TRUE)
source("C:/Users/u6044061/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/(2)_inital_state.R", echo=TRUE)
source("C:/Users/u6044061/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/(antiviral) set up.R", echo=TRUE)
ticket
vax_strategy_toggle == "on" & vax_risk_strategy_toggle == "on"
vaccination_history_FINAL =
apply_risk_strategy(vax_risk_strategy     = apply_risk_strategy_toggles$vax_risk_strategy,
vax_risk_proportion   = apply_risk_strategy_toggles$vax_risk_proportion,
vax_doses_general     = apply_risk_strategy_toggles$vax_doses_general,
vax_doses_risk        = apply_risk_strategy_toggles$vax_doses_risk,
risk_group_acceptability = apply_risk_strategy_toggles$risk_group_acceptability,
risk_group_accessibility = apply_risk_strategy_toggles$risk_group_accessibility,
risk_group_age_broaden   = apply_risk_strategy_toggles$risk_group_age_broaden
)
outcomes_without_antivirals = severe_outcome_log_tidy  %>%
group_by(outcome) %>%
summarise(overall = sum(proj))
#ASSUMPTION: only symptomatic cases lead to severe outcomes
prop_sympt = param_age %>%
filter(param == 'prop_sympt') %>%
select(-param)
param_age
param_age %>%
filter(param == 'prop_sympt')
param_age %>%
filter(param == 'prop_sympt') %>%
select(-param)
param_age %>%
ungroup() %>%
filter(param == 'prop_sympt') %>%
select(-param)
prop_sympt
likelihood_severe_outcome = severe_outcome_this_run %>%
left_join(reinfection_protection, by = c("date", "age_group")) %>%
mutate(percentage = percentage*(1-protection)) %>%
select(-outcome_long,-protection) %>%
left_join(prop_sympt,by= c('age_group' = 'agegroup')) %>%
mutate(percentage = percentage * (1/value)) %>%
select(-value)
###need to include variables which inform vaccination scenario and target group
if (length(sensitivity_analysis_toggles) >0){VE_sensitivity_analysis = "on"
} else{VE_sensitivity_analysis = "off"}
outcomes_without_antivirals = outcomes_without_antivirals %>%
mutate(toggle_vax_scenario = vax_strategy_description,
toggle_vax_scenario_risk_group = risk_group_name,
toggle_VE_sensitivity_analysis = VE_sensitivity_analysis)
likelihood_severe_outcome = likelihood_severe_outcome %>%
mutate(toggle_vax_scenario = vax_strategy_description,
toggle_vax_scenario_risk_group = risk_group_name,
toggle_VE_sensitivity_analysis = VE_sensitivity_analysis)
incidence_log_tidy = incidence_log_tidy %>%
mutate(toggle_vax_scenario = vax_strategy_description,
toggle_vax_scenario_risk_group = risk_group_name,
toggle_VE_sensitivity_analysis = VE_sensitivity_analysis)
#       (1/4) Setup
####################################################################
#load libraries
library(readr)
library(deSolve)
library(rvest)
library(ggplot2)
library(gridExtra)
library(ggpubr)
library(tidyverse)
debug = "off"
debug_type = "partial" #options: "full", "partial"
### set default values of toggles if debug is on
if (exists("fitting") == FALSE){fitting = "off"}
if (fitting == "on"){debug = "off"} # can not debug while fitting the model
if ( debug == "on"){
warning('Debugging is on')
if (debug_type == "full"){rm(list=ls());debug = "on"}  # clear global environment
plotting = "on"
## options for run from fit with omicron onwards
outbreak_timing = "off"
strain_inital = strain_now = 'omicron'
load(file = '1_inputs/last_fit_date.Rdata')
date_start = fitted_max_date
model_weeks = 4
##options for run from start
# date_start = as.Date('2021-03-31')
# strain_inital = strain_now = 'WT'
# seed_date = c(as.Date('2021-04-25'),as.Date('2021-11-07'),) #first is seed date for delta, second is omicron
# model_weeks = as.numeric((ceiling(Sys.Date()-date_start)/7))+52
setting = "SLE"
RR_estimate  = 2
vax_strategy_toggle = "off"
vax_risk_strategy_toggle = "off"
risk_group_toggle = "on"
risk_group_name = "adults_with_comorbidities" #options: pregnant_women, adults_with_comorbidities
risk_group_prioritisation_to_date = NA
default_prioritisation_proportion = 0.5
vax_strategy_toggles =
list(vax_strategy_start_date        = date_start+30,
vax_strategy_num_doses         = as.integer(1642011),
vax_strategy_roll_out_speed    = 11075 ,                           # doses delivered per day
vax_delivery_group             = 'universal',
vax_age_strategy               = "uniform_no_children",            # options: "oldest", "youngest","50_down","uniform"
vax_dose_strategy              = 1,                                # options: 1,2
vax_strategy_vaccine_type      = "Johnson & Johnson" ,             # options: "Moderna","Pfizer","AstraZeneca","Johnson & Johnson","Sinopharm","Sinovac"
vax_strategy_vaccine_interval  = c(30*3) ,                         # (days) interval between doses, you must specify multiple intervals if multiple doses e.g. c(21,90)
vax_strategy_max_expected_cov  = 0.88                              # value between 0-1 of age group willing to be vaccinated
)
apply_risk_strategy_toggles = list(
vax_risk_strategy = 'Y',             # options: 'Y','N'
vax_risk_proportion = 0.8,           # value between 0-1 (equivalent to %) of doses prioritised to the at risk group
vax_doses_general = 1,               # number of doses delivered to general pop
vax_doses_risk = 2                   # number of doses delivered to risk group
)
waning_toggle_acqusition = TRUE
waning_toggle_severe_outcome = FALSE # save some time, no need to accurate gauge severe outcomes when debugging model
waning_toggle_rho_acqusition = TRUE
}
### load refit, or refit if not recent enough
if (fitting == "on"){
warning('Fitting is on')
} else if ( ! 'vax_hesistancy_risk_group' %in% names(sensitivity_analysis_toggles)){
load(file = '1_inputs/last_fit_date.Rdata')
if (as.numeric(abs(fitted_max_date - Sys.Date()))>30){
warning('refitting model as fitted_max_date over one month since today!')
source(paste(getwd(),"/(0)_fitting_model.R",sep=""))
} else{
load(file = '1_inputs/fitted_results.Rdata')
if (risk_group_toggle == "off"){
loaded_fit = fitted_results[[1]]
} else if (risk_group_name == 'pregnant_women'){
loaded_fit = fitted_results[[2]]
} else if (risk_group_name == 'adults_with_comorbidities'){
loaded_fit = fitted_results[[3]]
}
if (risk_group_toggle == "on"){if(!loaded_fit[[5]] == risk_group_name){stop('risk group name != fitted risk group name')}}
parameters = loaded_fit[[1]]
fitted_next_state = loaded_fit[[2]]
fitted_incidence_log_tidy = loaded_fit[[3]]
fitted_incidence_log = loaded_fit[[4]]
fitted_incidence_log_tidy = fitted_incidence_log_tidy %>% filter(date <= date_start)
fitted_incidence_log = fitted_incidence_log %>% filter(date <= date_start)
if (risk_group_toggle == "on"){
if ((is.na(risk_group_prioritisation_to_date) == FALSE) ){
stop('no fitted result avaliable for this risk group characteristic')
}
}
}
} else{
if ('vax_hesistancy_risk_group' %in% names(sensitivity_analysis_toggles)){
if (! risk_group_name == 'pregnant_women'){stop('havent configured vax hesistance sensitivity analysis for another risk group')}
load(file = '1_inputs/SA_vaxHest_fitted_results.Rdata')
loaded_fit = SA_vaxHest_fitted_results
parameters = loaded_fit[[1]]
fitted_next_state = loaded_fit[[2]]
fitted_incidence_log_tidy = loaded_fit[[3]]
fitted_incidence_log = loaded_fit[[4]]
fitted_incidence_log_tidy = fitted_incidence_log_tidy %>% filter(date <= date_start) # CHECKED last of fitted log = first of new log
fitted_incidence_log = fitted_incidence_log %>% filter(date <= date_start)
}
}
if ( debug == "on" | fitting == "on"){
Reff_tracker = data.frame()
rho_tracker_dataframe = data.frame()
VE_tracker_dataframe = data.frame()
}
#__________________________________________________________________
#       (2/4) User choice / Model toggles
####################################################################
if (Sys.info()[['user']] == 'u6044061'){ rootpath = 'C:/Users/u6044061/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/'
}else if (Sys.info()[['user']] == 'gizem'){ rootpath = 'C:/Users/gizem/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/'}
complete_model_runs = 1   # when >1 samples randomly from distribution of parameters (where available)
discounting_rate = 0      #discounting on YLL
#__________________________________________________________________
#       (3/4) Run model
#####################################################################
##(A) Initialise setting
if (complete_model_runs == 1){run_type="point"
} else if (complete_model_runs > 1){run_type="rand"}
if (risk_group_toggle == "on"){
num_risk_groups = 2
} else{ num_risk_groups = 1; vax_risk_strategy_toggle = "off"}
if (exists("ticket") == FALSE){ ticket = 1 }
if (exists("prev_setting") == FALSE){ prev_setting = "NONE"}
if (exists("prev_risk_num") == FALSE){ prev_risk_num = "NONE"}
if (exists("prev_risk_group") == FALSE){ prev_risk_group = "NONE"}
if (exists("risk_group_name") == FALSE){ risk_group_name = "NO RISK GROUPS"}
if (exists("prev_run_date") == FALSE){ prev_run_date = as.Date('1900-01-01')}
if (exists("prev_discounting_rate") == FALSE){ prev_discounting_rate = discounting_rate}
if (prev_discounting_rate != discounting_rate){stop('need to re-run "(mech shop) severe outcome setting-specific rates" to apply new discounting rate')}
if (setting != prev_setting | num_risk_groups != prev_risk_num | risk_group_name != prev_risk_group | prev_run_date != Sys.Date()){
source(paste(getwd(),"/(1)_simulate_setting.R",sep="")) #load setting stats if new setting
}
prev_setting = setting
prev_run_date = Sys.Date()
prev_risk_num = num_risk_groups
prev_risk_group = risk_group_name
#making some interim variables to assist with configuring states
num_disease_classes = 4
disease_class_list = c('S','E','I','R')
num_vax_doses = D = length(unique(vaccination_history_TRUE$dose))
vax_type_list = sort(unique(vaccination_history_TRUE$vaccine_type))
num_vax_types = T = length(unique(vaccination_history_TRUE$vaccine_type))
num_vax_classes = num_vax_doses*num_vax_types + 1 # + 1 for unvaccinated
##(B) Load functions
source(paste(getwd(),"/(function)_COVID_ODE.R",sep=""))
source(paste(getwd(),"/(function)_VE_time_step.R",sep=""))
source(paste(getwd(),"/(function)_rho_time_step.R",sep=""))
source(paste(getwd(),"/(function)_vax_strategies.R",sep=""))
source(paste(getwd(),"/(function)_vax_strategies_risk.R",sep=""))
if (exists("VE_estimates_imputed") == FALSE){load(file='1_inputs/VE_estimates_imputed.Rdata')}
source(paste(getwd(),"/(3)_disease_characteristics.R",sep=""))
source(paste(getwd(),"/(2)_inital_state.R",sep=""))
source(paste(getwd(),"/(5)_severe_outcomes_calc.R",sep="")) # COMEBACK - should this just save its results somewhere?
sensitivity_analysis_toggles = list()
RECORD_antiviral_setup = list(outcomes_without_antivirals = RECORD_outcomes_without_antivirals,
prop_sympt = prop_sympt, #only static dependency
likelihood_severe_outcome = RECORD_likelihood_severe_outcome,
incidence_log_tidy = RECORD_incidence_log_tidy)
View(RECORD_outcomes_without_antivirals)
prop_sympt
View(RECORD_likelihood_severe_outcome)
RECORD_outcomes_without_antivirals %>% arrange(outcome)
RECORD_outcomes_without_antivirals = RECORD_outcomes_without_antivirals %>% arrange(outcome)
toggle_antiviral_start_date
### TOGGLES ################################################################
toggle_antiviral_start_date = as.Date('2022-09-01')
### TOGGLES ################################################################
toggle_antiviral_start_date = Sys.Date()
toggle_antiviral_start_date
fitted_max_date
toggle_antiviral_delivery_capacity = 250 #daily capacity for antiviral delivery
toggle_number_of_runs = 100
LIST_toggle_antiviral_type = list('paxlovid', #(baseline)
'molunipiravir')
LIST_toggle_antiviral_target = list('adults_with_comorbidities', #(baseline)
'unvaccinated_adults',
'pregnant_women',
'all_adults')
LIST_toggle_vax_scenario = list('all willing adults vaccinated with a primary schedule',
'all willing adults vaccinated with a primary schedule and high risk group recieve a booster', #(baseline)
'all willing adults vaccinated with a primary schedule plus booster dose')
LIST_toggle_vax_scenario_risk_group = list('adults_with_comorbidities',
'pregnant_women',
'none')
LIST_toggle_VE_sensitivity_analysis = list('on','off')
LIST_toggle_antiviral_type = list('paxlovid', #(baseline)
'molunipiravir')
LIST_toggle_antiviral_target = list('adults_with_comorbidities', #(baseline)
'unvaccinated_adults',
'pregnant_women',
'all_adults')
LIST_toggle_vax_scenario = list('all willing adults vaccinated with a primary schedule',
'all willing adults vaccinated with a primary schedule and high risk group recieve a booster', #(baseline)
'all willing adults vaccinated with a primary schedule plus booster dose')
LIST_toggle_vax_scenario_risk_group = list('adults_with_comorbidities',
'pregnant_women',
'none')
LIST_toggle_VE_sensitivity_analysis = list('on','off')
queue = list()
queue_place = 0
for (a in 1:length(LIST_toggle_antiviral_type)){
toggle_antiviral_type = LIST_toggle_antiviral_type[[a]]
for (b in 1:length(LIST_toggle_antiviral_target)){
toggle_antiviral_target = LIST_toggle_antiviral_target[[b]]
for (c in 1:length(LIST_toggle_vax_scenario)){
toggle_vax_scenario = LIST_toggle_vax_scenario[[c]]
for (d in 1:length(LIST_toggle_vax_scenario_risk_group)){
toggle_vax_scenario_risk_group = LIST_toggle_vax_scenario_risk_group[[d]]
if (toggle_vax_scenario_risk_group == 'none' & toggle_vax_scenario == 'all willing adults vaccinated with a primary schedule and high risk group recieve a booster'){
#require risk group to exist to be able to deliver additional booster doses
} else if(toggle_vax_scenario_risk_group %in% c('pregnant_women','adults_with_comorbidities') &
toggle_antiviral_target %in% c('pregnant_women','adults_with_comorbidities') &
toggle_vax_scenario_risk_group != toggle_antiviral_target){
#require risk group name to exist to be able to deliver antivirals
} else {
for (e in 1:length(LIST_toggle_VE_sensitivity_analysis)){
toggle_VE_sensitivity_analysis = LIST_toggle_VE_sensitivity_analysis[[e]]
if (toggle_VE_sensitivity_analysis == "on" & toggle_vax_scenario_risk_group != 'adults_with_comorbidities'){
# do not run as sensitivity analysis only for reduced VE in adults with comorbidities and older adults
} else{
###LOAD DEPENDENCIES
#By toggle_vax_scenario, toggle_vax_scenario_risk_group, and toggle_VE_sensitivity_analysis
outcomes_without_antivirals = RECORD_antiviral_setup$outcomes_without_antivirals %>%
filter(toggle_vax_scenario == toggle_vax_scenario,
toggle_vax_scenario_risk_group == toggle_vax_scenario_risk_group,
toggle_VE_sensitivity_analysis == toggle_VE_sensitivity_analysis)
likelihood_severe_outcome = RECORD_antiviral_setup$likelihood_severe_outcome %>%
filter(toggle_vax_scenario == toggle_vax_scenario,
toggle_vax_scenario_risk_group == toggle_vax_scenario_risk_group,
toggle_VE_sensitivity_analysis == toggle_VE_sensitivity_analysis)
incidence_log_tidy = RECORD_antiviral_setup$incidence_log_tidy %>%
filter(toggle_vax_scenario == toggle_vax_scenario,
toggle_vax_scenario_risk_group == toggle_vax_scenario_risk_group,
toggle_VE_sensitivity_analysis == toggle_VE_sensitivity_analysis)
prop_sympt = RECORD_antiviral_setup$prop_sympt
###CONFIGURE QUEUE
queue_place = queue_place + 1
queue[[queue_place]] = list(outcomes_without_antivirals = outcomes_without_antivirals,
likelihood_severe_outcome = likelihood_severe_outcome,
incidence_log_tidy = incidence_log_tidy,
prop_sympt = prop_sympt)
}
}
}
}
}
}
}
queue_place
queu[[1]]$prop_sympt
queue[[1]]$prop_sympt
ticket = 1
toggle_number_of_runs = 1
outcomes_without_antivirals = queue[[ticket]]$outcomes_without_antivirals
likelihood_severe_outcome = queue[[ticket]]$likelihood_severe_outcome
incidence_log_tidy = queue[[ticket]]$incidence_log_tidy
prop_sympt = queue[[ticket]]$prop_sympt
source(paste(getwd(),"/(antiviral) antiviral delivery pathway.R",sep=""))
source(paste(getwd(),"/(antiviral) antiviral delivery pathway.R",sep=""))
### CREATE SUMMARY OVER RUNS #################################################
summary_over_runs <-
this_scenario_tracker %>%
group_by(outcome) %>%
dplyr::summarise(average = mean(n),
sd = sd(n),
UCI = average - qnorm(0.975)*sd,
LCI = average - qnorm(0.023)*sd) %>%
left_join(outcomes_without_antivirals) %>%
mutate(percentage = average/overall *100,
UCI_percentage = UCI/overall *100,
LCI_percentage = LCI/overall *100) %>%
select(outcome,average,UCI,LCI,percentage,UCI_percentage,LCI_percentage)
summary_over_runs_tidy = summary_over_runs_tidy %>%
mutate(toggle_antiviral_type = toggle_antiviral_type,
toggle_antiviral_target = toggle_antiviral_target,
toggle_vax_scenario = toggle_vax_scenario,
toggle_vax_scenario_risk_group = toggle_vax_scenario_risk_group,
toggle_VE_sensitivity_analysis = toggle_VE_sensitivity_analysis)
detectCores()
library(parallel)
detectCores()
detectCores()-1
# create cluster
CLUSTER <- parallel::makeCluster(detectCores()-1)
# Close cluster
parallel::stopCluster(CLUSTER)
library(parallel)
CLUSTER <- parallel::makeCluster(detectCores()-1) # create cluster
doParallel::registerDoParallel(CLUSTER) # activate cluster
library(doParallel); library(parallel); library(foreach)
install.packages('doParallel')
library(doParallel); library(parallel); library(foreach)
CLUSTER <- parallel::makeCluster(detectCores()-1) # create cluster
doParallel::registerDoParallel(CLUSTER) # activate cluster
# Run parallel computation
time_parallel <- system.time({
RECORD_antiviral_model_simulations <- foreach::foreach(i = 1:5,
.combine = rbind) %dopar% {
outcomes_without_antivirals = queue[[ticket]]$outcomes_without_antivirals
likelihood_severe_outcome = queue[[ticket]]$likelihood_severe_outcome
incidence_log_tidy = queue[[ticket]]$incidence_log_tidy
prop_sympt = queue[[ticket]]$prop_sympt
source(paste(getwd(),"/(antiviral) antiviral delivery pathway.R",sep=""))
summary_over_runs_tidy %>%
mutate(toggle_antiviral_type = toggle_antiviral_type,
toggle_antiviral_target = toggle_antiviral_target,
toggle_vax_scenario = toggle_vax_scenario,
toggle_vax_scenario_risk_group = toggle_vax_scenario_risk_group,
toggle_VE_sensitivity_analysis = toggle_VE_sensitivity_analysis)
}
})
CLUSTER <- parallel::makeCluster(detectCores()-1) # create cluster
doParallel::registerDoParallel(CLUSTER) # activate cluster
# Run parallel computation
time_parallel <- system.time({
RECORD_antiviral_model_simulations <- foreach::foreach(ticket = 1:5,
.combine = rbind) %dopar% {
outcomes_without_antivirals = queue[[ticket]]$outcomes_without_antivirals
likelihood_severe_outcome = queue[[ticket]]$likelihood_severe_outcome
incidence_log_tidy = queue[[ticket]]$incidence_log_tidy
prop_sympt = queue[[ticket]]$prop_sympt
source(paste(getwd(),"/(antiviral) antiviral delivery pathway.R",sep=""))
summary_over_runs_tidy %>%
mutate(toggle_antiviral_type = toggle_antiviral_type,
toggle_antiviral_target = toggle_antiviral_target,
toggle_vax_scenario = toggle_vax_scenario,
toggle_vax_scenario_risk_group = toggle_vax_scenario_risk_group,
toggle_VE_sensitivity_analysis = toggle_VE_sensitivity_analysis)
}
})
library(doParallel); library(parallel); library(foreach)
CLUSTER <- parallel::makeCluster(detectCores()/2) # create cluster
doParallel::registerDoParallel(CLUSTER) # activate cluster
# run parallel
time_parallel <- system.time({
RECORD_antiviral_model_simulations <- foreach::foreach(ticket = 1:5,
.combine = rbind) %dopar% {
outcomes_without_antivirals = queue[[ticket]]$outcomes_without_antivirals
likelihood_severe_outcome = queue[[ticket]]$likelihood_severe_outcome
incidence_log_tidy = queue[[ticket]]$incidence_log_tidy
prop_sympt = queue[[ticket]]$prop_sympt
source(paste(getwd(),"/(antiviral) antiviral delivery pathway.R",sep=""))
summary_over_runs_tidy %>%
mutate(toggle_antiviral_type = toggle_antiviral_type,
toggle_antiviral_target = toggle_antiviral_target,
toggle_vax_scenario = toggle_vax_scenario,
toggle_vax_scenario_risk_group = toggle_vax_scenario_risk_group,
toggle_VE_sensitivity_analysis = toggle_VE_sensitivity_analysis)
}
})
# close cluster
parallel::stopCluster(CLUSTER)
CLUSTER <- parallel::makeCluster(detectCores()/2) # create cluster
# close cluster
parallel::stopCluster(CLUSTER)
source("C:/Users/u6044061/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/(sensitivity)_Pfizer.R", echo=TRUE)
source("C:/Users/u6044061/Documents/PhD/Research/2_scarce_COVID_vaccine_supply/4_code/GitHub_vaxAllocation/(sensitivity)_vax_hest_pregnancy.R", echo=TRUE)
